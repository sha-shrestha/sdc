//Copyright SequenceDiagram.org
function onGooglePlatform() {
    SEQ.googleDrive.init()
}
var SEQ = SEQ || {};
SEQ.menu = function() {
    function a() {
        b(!w.presentationMode)
    }

    function b(a) {
        w.presentationMode = a, a ? w.readOnlyPresentationMode && (SEQ.interactor.setReadOnly(!0), SEQ.main.getInteractionCanvas().style.cursor = "grab") : (SEQ.interactor.setReadOnly(!1), SEQ.main.getInteractionCanvas().style.cursor = "auto"), m();
        var b = document.getElementById("actions").style,
            c = document.getElementById("source").style,
            d = document.getElementById("handleWrapper").style,
            f = document.getElementById("diagramCanvas").style,
            g = document.getElementById("interactionCanvasWrapper").style,
            h = document.getElementById("participantCanvas").style;
        if (w.presentationMode) {
            b.display = "none", c.display = "none", d.display = "none";
            var i = 320;
            f.left = i + "px", g.left = i + "px", h.left = i + "px", e(!1)
        } else b.removeProperty("display"), c.removeProperty("display"), d.removeProperty("display"), f.removeProperty("left"), g.removeProperty("left"), h.removeProperty("left"), e(!0)
    }

    function c() {
        d(!w.readOnlyPresentationMode)
    }

    function d(a) {
        w.readOnlyPresentationMode = a, w.presentationMode && (SEQ.interactor.setReadOnly(a), w.readOnlyPresentationMode ? SEQ.main.getInteractionCanvas().style.cursor = "grab" : SEQ.main.getInteractionCanvas().style.cursor = "auto"), m()
    }

    function e(a) {
        var b = document.getElementById("top"),
            c = document.getElementById("topRight"),
            d = document.getElementById("actions"),
            e = document.getElementById("source"),
            f = document.getElementById("handleWrapper"),
            g = document.getElementById("diagramCanvas"),
            h = document.getElementById("interactionCanvasWrapper");
        a ? (b.style.removeProperty("display"), c.style.removeProperty("top"), d.style.removeProperty("top"), e.style.removeProperty("top"), f.style.removeProperty("top"), g.style.removeProperty("top"), h.style.removeProperty("top")) : (b.style.display = "none", d.style.top = "5px", e.style.top = "5px", f.style.top = "5px", g.style.top = "5px", h.style.top = "5px"), SEQ.interactor.onWindowScroll()
    }

    function f() {
        w.participantOverlay = !w.participantOverlay, m();
        var a = SEQ.main.getParticipantCanvas();
        w.participantOverlay ? a.style.display = "block" : a.style.display = "none", SEQ.interactor.onWindowScroll()
    }

    function g() {
        var a = p();
        a.alertForUnsavedChanges = !a.alertForUnsavedChanges, n(a), m()
    }

    function h() {
        return p().alertForUnsavedChanges
    }

    function i() {
        var a = p();
        a.autosave = !a.autosave, n(a), m()
    }

    function j() {
        return p().autosave
    }

    function k() {
        var a = p();
        a.synchronizeFilenameWithTitle = !a.synchronizeFilenameWithTitle, n(a), m(), SEQ.saveAndOpen.synchronizeFileNameWithTitleIfEnabled()
    }

    function l() {
        return p().synchronizeFilenameWithTitle
    }

    function m() {
        function a(a, b) {
            var c, d;
            a.id.indexOf("Radio") != -1 ? (c = "◉", d = "○") : (c = "☑", d = "☐"), b ? a.innerHTML = c : a.innerHTML = d
        }
        a(document.getElementById("presentationModeCheckbox"), w.presentationMode), a(document.getElementById("participantOverlayCheckbox"), w.participantOverlay), a(document.getElementById("readOnlyPresentationModeCheckbox"), w.readOnlyPresentationMode);
        var b = p();
        a(document.getElementById("alertForUnsavedChangesCheckbox"), b.alertForUnsavedChanges), a(document.getElementById("autosaveCheckbox"), b.autosave), a(document.getElementById("synchronizeFilenameWithTitleCheckbox"), b.synchronizeFilenameWithTitle);
        var c = b.defaultStorage;
        a(document.getElementById("defaultStorageRadioGoogleDrive"), SEQ.saveAndOpen.StorageProvider.GOOGLE_DRIVE == c), a(document.getElementById("defaultStorageRadioGoogleDriveRootFolder"), SEQ.saveAndOpen.StorageProvider.GOOGLE_DRIVE_ROOT_FOLDER == c), a(document.getElementById("defaultStorageRadioOneDrive"), SEQ.saveAndOpen.StorageProvider.ONE_DRIVE == c), a(document.getElementById("defaultStorageRadioWebStorage"), SEQ.saveAndOpen.StorageProvider.WEB_STORAGE == c), a(document.getElementById("defaultStorageRadioLocalDisk"), SEQ.saveAndOpen.StorageProvider.LOCAL_DISK == c)
    }

    function n(a) {
        localStorage.setItem(u, JSON.stringify(a))
    }

    function o(a) {
        var b = p();
        b.defaultStorage = a, n(b), m()
    }

    function p() {
        var a = {
                defaultStorage: SEQ.saveAndOpen.StorageProvider.LOCAL_DISK,
                alertForUnsavedChanges: !0,
                autosave: !0,
                synchronizeFilenameWithTitle: !1
            },
            b = localStorage.getItem(u);
        return b && (a = JSON.parse(b)), a
    }

    function q() {
        var a = p();
        return a.defaultStorage
    }

    function r() {
        v && clearInterval(v);
        var a = document.getElementById("notification");
        a.style = "display: none;"
    }

    function s(a, b) {
        v && clearInterval(v);
        var c = 0,
            d = !0,
            e = document.getElementById("notification");
        b ? e.innerHTML = a + "&nbsp;&nbsp;&nbsp;<img src=assets/loader-white.gif>" : e.innerHTML = a;
        var f = a.length / 10;
        v = setInterval(function() {
            if (d) {
                c += .1, c > f && (d = !1, b && clearInterval(v));
                var a = c;
                c > 1 && (a = 1), e.style = "display: block; opacity: " + a
            } else c -= .1, c > 0 ? e.style = "display: block; opacity: " + c : (e.style = "display: none;", clearInterval(v))
        }, 40)
    }

    function t() {
        function a() {
            for (var a = document.getElementsByClassName("popupCloseIcon"), b = 0; b < a.length; b++) {
                var c = a[b];
                c.addEventListener("click", SEQ.main.closePopups)
            }
        }

        function b(a, b, c) {
            document.getElementById(a).addEventListener(b, c)
        }
        b("activeFileNameStatus", "click", SEQ.saveAndOpen.showActiveFileNameChange), b("menuViewPresentationMode", "click", SEQ.menu.togglePresentationMode), b("menuViewParticipantOverlay", "click", SEQ.menu.toggleParticipantOverlay), b("menuViewReadOnlyPresentationMode", "click", SEQ.menu.toggleReadOnlyPresentationMode), b("menuSettingsDefaultStorageGoogleDrive", "click", function() {
            SEQ.menu.writeDefaultStorageLocation(SEQ.saveAndOpen.StorageProvider.GOOGLE_DRIVE)
        }), b("menuSettingsDefaultStorageGoogleDriveRootFolder", "click", function() {
            SEQ.menu.writeDefaultStorageLocation(SEQ.saveAndOpen.StorageProvider.GOOGLE_DRIVE_ROOT_FOLDER)
        }), b("menuSettingsDefaultStorageOneDrive", "click", function() {
            SEQ.menu.writeDefaultStorageLocation(SEQ.saveAndOpen.StorageProvider.ONE_DRIVE)
        }), b("menuSettingsDefaultStorageWebStorage", "click", function() {
            SEQ.menu.writeDefaultStorageLocation(SEQ.saveAndOpen.StorageProvider.WEB_STORAGE)
        }), b("menuSettingsDefaultStorageLocalDisk", "click", function() {
            SEQ.menu.writeDefaultStorageLocation(SEQ.saveAndOpen.StorageProvider.LOCAL_DISK)
        }), b("menuSettingsAlertForUnsavedChanges", "click", SEQ.menu.writeAlertForUnsavedChanges), b("menuSettingsAutosave", "click", SEQ.menu.writeAutosave), b("menuSettingsSynchronizeFilenameWithTitle", "click", SEQ.menu.writeSynchronizeFilenameWithTitle), b("menuHelpAbout", "click", function() {
            SEQ.main.showPopup("infoPopup")
        }), b("menuHelpInstructionsModalPopup", "click", SEQ.main.showInstructionsPopup), b("newDiagram", "click", SEQ.saveAndOpen.newDiagram), b("openButton", "click", function() {
            SEQ.saveAndOpen.showOpenDialog(this)
        }), b("saveButton", "click", function() {
            SEQ.saveAndOpen.showSaveDialog(this)
        }), b("exportButton", "click", function() {
            SEQ.saveAndOpen.showExportDialog(this)
        }), b("addParticipant", "click", SEQ.interactor.prependParticipant), b("zoomIn", "click", function() {
            SEQ.main.changeFontSize(SEQ.main.FontChange.INCREASE)
        }), b("zoomOut", "click", function() {
            SEQ.main.changeFontSize(SEQ.main.FontChange.DECREASE)
        }), b("exportButtonCopyPaste", "click", SEQ.main.createCopyPasteDiagram), b("exportButtonUrl", "click", SEQ.main.createShareUrl), b("exportButtonSvg", "click", SEQ.saveAndOpen.saveSvg), b("exportButtonPng", "click", SEQ.saveAndOpen.savePngHq), b("entryEditorTop", "mousedown", function(a) {
            SEQ.interactor.entryEditorMouseDown(a)
        }), b("entryEditorCloseIcon", "click", SEQ.interactor.cancelAllInteraction), b("entryEditorTextArea", "keydown", function(a) {
            SEQ.interactor.onEntryEditorTextAreaKeyDown(a)
        }), b("participantAliasInput", "keydown", function(a) {
            SEQ.interactor.onEntryEditorTextAreaKeyDown(a)
        }), b("entryEditorCancel", "click", SEQ.interactor.cancelAllInteraction), b("entryEditorUpdate", "click", SEQ.interactor.saveEditEntryResult), b("cover", "click", SEQ.main.closePopups), b("openButtonGoogleDrive", "click", SEQ.saveAndOpen.openButtonGoogleDrive), b("openButtonOneDrive", "click", SEQ.saveAndOpen.openButtonOneDrive), b("openButtonWebStorage", "click", SEQ.saveAndOpen.openButtonWebStorage), b("openButtonLocalDisk", "change", function() {
            SEQ.saveAndOpen.openButtonLocalDisk(this)
        }), b("fileName", "keyup", function() {
            SEQ.saveAndOpen.clearDiagramSaveStateAndSetNewName(this.value)
        }), b("saveButtonGoogleDrive", "click", SEQ.saveAndOpen.saveButtonGoogleDrive), b("saveInRootButtonGoogleDrive", "click", SEQ.saveAndOpen.saveInRootButtonGoogleDrive), b("saveButtonOneDrive", "click", SEQ.saveAndOpen.saveButtonOneDrive), b("saveButtonWebStorage", "click", SEQ.saveAndOpen.saveButtonWebStorage), b("saveButtonLocalDisk", "click", SEQ.saveAndOpen.saveButtonLocalDisk), b("toggleWebStorageSelection", "click", function() {
            SEQ.webStorage.toggleWebStorageSelection(this)
        }), b("webStoragePopupCancel", "click", SEQ.main.closePopups), b("webStorageDelete", "click", SEQ.webStorage.deleteSelected), b("webStorageOpen", "click", SEQ.webStorage.openSelected), a()
    }
    const u = "USER_SETTINGS";
    var v, w = {
        presentationMode: !1,
        participantOverlay: !1,
        readOnlyPresentationMode: !1
    };
    return {
        init: function() {
            m(), t();
            var a = new Image;
            a.src = "assets/loader-white.gif"
        },
        togglePresentationMode: a,
        toggleParticipantOverlay: f,
        toggleReadOnlyPresentationMode: c,
        setReadOnlyPresentationMode: d,
        setPresentationMode: b,
        writeDefaultStorageLocation: o,
        readDefaultStorageLocation: q,
        writeAlertForUnsavedChanges: g,
        readAlertForUnsavedChanges: h,
        readAutosave: j,
        writeAutosave: i,
        writeSynchronizeFilenameWithTitle: k,
        readSynchronizeFilenameWithTitle: l,
        displayNotification: s,
        clearNotification: r,
        isParticipantOverlay: function() {
            return w.participantOverlay
        }
    }
}();
var SEQ = SEQ || {};
SEQ.main = function() {
    function a(a) {
        Ka = a
    }

    function b(a, b) {
        if (ia()) return a && b && (Qa = Oa ? Pa(a, b, "svg") : Pa(a, b)), Qa;
        var c = document.getElementById("diagramCanvas");
        return a && b && (c.width = a, c.height = b), c
    }

    function c() {
        return Ma || (Ma = ia() ? Pa() : document.createElement("canvas")), Ma
    }

    function d() {
        return c().getContext("2d")
    }

    function e() {
        return Ka ? Ka : b().getContext("2d")
    }

    function f() {
        return document.getElementById("interactionCanvas")
    }

    function g() {
        return f().getContext("2d")
    }

    function h() {
        return document.getElementById("participantCanvas")
    }

    function i() {
        return ia() ? Pa() : document.createElement("canvas")
    }

    function j() {
        if (!ia()) return rbush()
    }

    function k() {
        return h().getContext("2d")
    }

    function l(a) {
        var b = pa.getScrollInfo();
        pa.setValue(a), pa.scrollTo(b.left, b.top)
    }

    function m(a, b) {
        if (Ia.length > 0) var c = Ia[Ia.length - 1];
        a != c && (b || (Ja = []), Ia.push(a)), Ia.length >= 200 && Ia.shift()
    }

    function n(a) {
        if (Ja.length > 0) var b = Ja[Ja.length - 1];
        a != b && Ja.push(a), Ja.length >= 200 && Ja.shift()
    }

    function o() {
        if (Ia.length >= 2) {
            var a = Ia.pop();
            n(a);
            var b = Ia.pop();
            l(b), SEQ.parser.parse(!0)
        }
    }

    function p() {
        if (Ja.length > 0) {
            var a = Ja.pop();
            l(a), SEQ.parser.parse(!0)
        }
    }

    function q(a) {
        var b = SEQ.parser.diagram.fontFamily;
        return a + "pt " + b
    }

    function r(a) {
        return a + "pt monospace"
    }

    function s(a) {
        Ga.INCREASE === a ? Ba < 72 && (Ba++, SEQ.parser.parse()) : Ga.DECREASE === a && Ba > 4 && (Ba--, SEQ.parser.parse())
    }

    function t() {
        document.getElementById("cover").style.display = "none";
        for (var a = document.getElementsByClassName("popupDialog"), b = 0; b < a.length; b++) a[b].style.display = "none"
    }

    function u() {
        SEQ.saveAndOpen.hideAllOpenSaveMenus();
        var a, c = b(),
            d = v().imgtype,
            e = v().imgquality;
        a = d && e ? c.toDataURL(d, parseFloat(e.replace("#", ""))) : c.toDataURL();
        var f = document.getElementById("imageDiv"),
            g = document.getElementById("diagramImage");
        g && f.removeChild(g);
        var h = 800 / c.width,
            i = 600 / c.height,
            j = h < i ? h : i,
            k = document.createElement("img");
        k.src = a, k.style.width = j * c.width + "px", k.style.height = j * c.height + "px", k.id = "diagramImage", f.appendChild(k), document.getElementById("cover").style.display = "block", document.getElementById("imageSavePopup").style.display = "block"
    }

    function v() {
        var a = {};
        return window.location.href.replace(/[?&#]+([^=&#?]+)=([^&?#]*)/gi, function(b, c, d) {
            a[c] = d
        }), a
    }

    function w() {
        SEQ.saveAndOpen.hideAllOpenSaveMenus();
        var a = aa(),
            b = LZString.compressToEncodedURIComponent(a),
            c = encodeURIComponent(a),
            d = window.location.href;
        d.indexOf("index.html") > -1 && (d = d.substring(0, d.indexOf("index.html"))), d.indexOf("#") > -1 && (d = d.substring(0, d.indexOf("#"))), "/" !== d.substring(d.length - 1, d.length) && (d += "/");
        var e = d + "index.html#initialData=" + b,
            f = document.getElementById("titledLinkCompressed");
        f.innerHTML = SEQ.saveAndOpen.getDiagramNameForExport(), f.href = e;
        var g = document.getElementById("rawLinkCompressed");
        g.value = e, g.setSelectionRange(0, g.value.length), g.focus();
        var h = d + "index.html#initialData=" + c,
            i = document.getElementById("titledLinkUriEncoded");
        i.innerHTML = SEQ.saveAndOpen.getDiagramNameForExport(), i.href = h;
        var j = document.getElementById("rawLinkUriEncoded");
        j.value = h, j.setSelectionRange(0, j.value.length), j.focus();
        var k = d + "index.html?presentationMode=readOnly#initialData=" + b,
            l = document.getElementById("titledLinkPresentationModeReadOnlyCompressed");
        l.innerHTML = SEQ.saveAndOpen.getDiagramNameForExport(), l.href = k;
        var m = document.getElementById("rawLinkPresentationModeReadOnlyCompressed");
        m.value = k, m.setSelectionRange(0, m.value.length), m.focus(), document.getElementById("cover").style.display = "block", document.getElementById("shareUrlPopup").style.display = "block"
    }

    function x() {
        var a = aa(),
            b = LZString.compressToEncodedURIComponent(a),
            c = encodeURIComponent(a);
        return sa == b || sa == c
    }

    function y() {
        sa = v().initialData;
        var a = (v().format, v().presentationMode);
        if (!sa && window.location.hash) {
            var b = window.location.hash.substring(1);
            b.indexOf("initialData=") > -1 && (sa = b.replace("initialData=", ""))
        }
        if (sa) {
            if (sa.indexOf("%") > 0) {
                var c = decodeURIComponent(sa);
                SEQ.main.updateSource(c)
            } else {
                var d = LZString.decompressFromEncodedURIComponent(sa);
                SEQ.main.updateSource(d)
            }
            "readOnly" == a && (SEQ.main.getInteractionCanvas().style.cursor = "grab", SEQ.menu.setReadOnlyPresentationMode(!0), SEQ.menu.setPresentationMode(!0))
        } else SEQ.main.updateSource(z())
    }

    function z() {
        var a = "C4S2BsFMAIBUAsQGdrOgQ2qCkBQuBBcEAY0gFoA+AIQHsAjALgGFiSBrDAOwBNoeATugDmWWtBIDI6YDExSAjgFdISYNFoCAOl2ABPAA4wwqLlngwktJQLIYpmYOOAXoUAGbBCbSAB5y5HRMgiJi0AC2tABueFy0shoxAtBBADQAItb0UBJsnE7QkDwmsgAewCx55jAAVDUA-HWoJLRm7prQdSBcagJKJKCtSE3ovJ01kKXo4QZQwzW4QVQAFADMAJSZStkwJFUFRSWTFXFc5N1qo8CjkNYo4apIIpBAA";
        return LZString.decompressFromEncodedURIComponent(a)
    }

    function A() {
        return q(Ba)
    }

    function B() {
        return Ba + "pt sans-serif"
    }

    function C() {
        return q(Ba * Ca)
    }

    function D() {
        return q(Ba * Da)
    }

    function E() {
        return r(Ba)
    }

    function F() {
        return r(Ba * Ca)
    }

    function G() {
        return r(Ba * Da)
    }

    function H(a) {
        return r(Ba * (a / Aa))
    }

    function I(a) {
        return q(Ba * (a / Aa))
    }

    function J(a) {
        return SEQ.metrics.data.textLineHeight * (a / Aa)
    }

    function K() {
        return SEQ.metrics.data.textLineHeight * Ca
    }

    function L() {
        return SEQ.metrics.data.textLineHeight * Da
    }

    function M(a) {
        return SEQ.metrics.data.textStrokeWeight * a
    }

    function N(a) {
        return SEQ.metrics.data.participantBoxLineWeight * a
    }

    function O(a) {
        return SEQ.metrics.data.participantTypeLineWeight * a
    }

    function P() {
        return q(Ba * Ea)
    }

    function Q() {
        return Ba * Fa
    }

    function R() {
        return Q() + 'pt "FontAwesome"'
    }

    function S() {
        return Q() + 'pt "Material Design Icons"'
    }

    function T() {
        return "400 " + Q() + 'pt "Font Awesome 5 Brands"'
    }

    function U() {
        return "400 " + Q() + 'pt "Font Awesome 5 Free"'
    }

    function V() {
        return "900 " + Q() + 'pt "Font Awesome 5 Free"'
    }

    function W() {
        return Ba
    }

    function X(a) {
        if (SEQ.main.isRunningNode()) return SEQ.parser.parse(null, a);
        if (!SEQ.interactor.editEntryTextAreaActive()) {
            oa && clearTimeout(oa);
            var b = [];
            a = aa();
            for (var c = a.split("\n"), d = 0; d < c.length; d++) {
                var e, f = c[d];
                f.indexOf(SEQ.entityParticipant.Type.FONT_AWESOME_5_BRANDS) > -1 ? e = '400 10pt "Font Awesome 5 Brands"' : f.indexOf(SEQ.entityParticipant.Type.FONT_AWESOME_5_REGULAR) > -1 ? e = '400 10pt "Font Awesome 5 Free"' : f.indexOf(SEQ.entityParticipant.Type.FONT_AWESOME_5_SOLID) > -1 ? e = '900 10pt "Font Awesome 5 Free"' : f.indexOf(SEQ.entityParticipant.Type.FONT_AWESOME) > -1 ? e = '10pt "FontAwesome"' : f.indexOf(SEQ.entityParticipant.Type.MATERIAL_DESIGN_ICONS) > -1 && (e = '10pt "Material Design Icons"'), e && b.indexOf(e) == -1 && Ha.indexOf(e) == -1 && b.push(e)
            }
            if (b.length > 0) {
                var g = [];
                b.forEach(function(a) {
                    g.push(document.fonts.load(a))
                }), Promise.all(g).then(function() {
                    b.forEach(function(a) {
                        Ha.push(a)
                    }), oa = setTimeout(function() {
                        SEQ.main.parse(a)
                    }, 50)
                })
            } else oa = setTimeout(function() {
                SEQ.parser.parse(null, a)
            }, 50)
        }
    }

    function Y(a) {
        pa.clearGutter("errors");
        var b = [];
        a.forEach(function(a) {
            pa.setGutterMarker(a.lineNumber, "errors", Z()), b.push({
                from: {
                    line: a.lineNumber,
                    ch: 0
                },
                to: {
                    line: a.lineNumber,
                    ch: 0
                }
            })
        }), Ra.update(b)
    }

    function Z() {
        var a = document.createElement("div");
        return a.style.color = "red", a.innerHTML = "⊠", a
    }

    function $(a) {
        var b = pa.getValue() + a;
        l(b), X()
    }

    function _(a) {
        var b = a + pa.getValue();
        l(b), X()
    }

    function aa() {
        return pa.getValue()
    }

    function ba() {
        return pa.getInputField().blur()
    }

    function ca() {
        return pa.getInputField().focus()
    }

    function da(a, b, c) {
        pa.setSelection({
            line: a,
            ch: b
        }, {
            line: a,
            ch: c
        })
    }

    function ea(a) {
        La = "handleRight" == a.target.id, ta = a.clientX, ua = a.clientY, va = parseInt(qa.style.width, 10), wa = parseInt(qa.style.top, 10);
        var b = document.getElementsByClassName("CodeMirror")[0];
        xa = parseInt(b.style.width, 10), ya = parseInt(b.style.height, 10), document.addEventListener("mousemove", fa), document.addEventListener("mouseup", ga), a.preventDefault()
    }

    function fa(a) {
        var b = a.clientX - ta,
            c = a.clientY - ua;
        qa.style.width = va + b + "px", La ? pa.setSize(xa + b + "px", ya + "px") : (pa.setSize(xa + b + "px", ya + c + "px"), qa.style.top = wa + c + "px");
        var d = 60 + xa + b;
        document.getElementById("diagramCanvas").style.left = d + "px", document.getElementById("participantCanvas").style.left = d + "px", document.getElementById("interactionCanvasWrapper").style.left = d + "px", a.preventDefault()
    }

    function ga(a) {
        document.removeEventListener("mousemove", fa), document.removeEventListener("mouseup", ga), a.preventDefault()
    }

    function ha() {
        CodeMirror.commands.autocomplete = function(a) {
            a.showHint({
                hint: CodeMirror.hint.seqdiahint,
                completeSingle: !1
            })
        }, pa = CodeMirror(document.getElementById("source"), {
            value: "# Loading...",
            styleActiveLine: {
                nonEmpty: !0
            },
            lineNumbers: !0,
            lineWrapping: !0,
            extraKeys: {
                "Ctrl-Space": "autocomplete",
                "Ctrl-F": "findPersistent",
                "Cmd-F": "findPersistent"
            },
            gutters: ["CodeMirror-linenumbers", "errors"],
            undoDepth: 0
        }), Ra = pa.annotateScrollbar({
            className: "CodeMirror-error-scrollbar"
        }), pa.on("change", function(a, b) {
            X()
        }), pa.on("inputRead", function(a, b) {
            "cut" != b.origin && "paste" != b.origin && CodeMirror.commands.autocomplete(a)
        });
        var a = window.innerHeight - 130;
        pa.setSize("450px", a + "px"), qa = document.getElementById("handle"), qa.style.width = "450px", qa.style.top = a + "px", ra = document.getElementById("handleRight"), qa.addEventListener("mousedown", ea), ra.addEventListener("mousedown", ea)
    }

    function ia() {
        return Na
    }

    function ja(a) {
        var b = Aa * a;
        b < 2 && (b = 2), Ba = parseInt(b)
    }

    function ka() {
        Ba = Aa
    }

    function la(a) {
        document.getElementById(a).style.display = "block", document.getElementById("cover").style.display = "block"
    }

    function ma() {
        var a = document.getElementById("instructionsIFrame");
        a.src || (a.src = "instructions.html"), document.getElementById("instructionsPopup").style.display = "block", document.getElementById("cover").style.display = "block"
    }

    function na(a) {
        var b = [],
            c = JSON.stringify(a, function(a, c) {
                if ("object" == typeof c && null !== c) {
                    if (b.indexOf(c) > -1) try {
                        return JSON.parse(JSON.stringify(c))
                    } catch (a) {
                        return
                    }
                    b.push(c)
                }
                return c
            });
        return JSON.parse(c)
    }
    var oa, pa, qa, ra, sa, ta, ua, va, wa, xa, ya, za = !1,
        Aa = 11,
        Ba = Aa,
        Ca = .8,
        Da = 1.2,
        Ea = 1.5,
        Fa = 4,
        Ga = {
            INCREASE: "+",
            DECREASE: "-"
        },
        Ha = [],
        Ia = [],
        Ja = [],
        Ka = null,
        La = !1,
        Ma = null,
        Na = !1,
        Oa = !1,
        Pa = null,
        Qa = null,
        Ra = null;
    return {
        initBackend: function(a) {
            Na = !0, Pa = a
        },
        exportNodeDiagram: function(a, b, c, d, e) {
            switch (Qa = Pa(), b) {
                case "image/png":
                    Oa = !1, ja(c), X(a), Qa.toDataURL(b, e);
                    break;
                case "image/jpeg":
                    Oa = !1, ja(c), X(a), Qa.toDataURL(b, d, e);
                    break;
                case "image/svg+xml":
                    Oa = !0, ja(c), X(a), e(null, "data:image/svg+xml;base64," + Qa.toBuffer().toString("base64"));
                    break;
                default:
                    e("Unsupported MIME type: " + b)
            }
            ka()
        },
        init: function() {
            za = navigator.userAgent.toLowerCase().indexOf("firefox") > -1, SEQ.seqDiaHint.init(), SEQ.seqDiaMode.init(), ha(), SEQ.interactor.init(), SEQ.contextMenu.init(), SEQ.menu.init(), SEQ.webStorage.init(), SEQ.saveAndOpen.init(), y(), X()
        },
        parse: X,
        getDiagramContext: e,
        getDiagramCanvas: b,
        getSourceValue: aa,
        selectInSource: da,
        blurEditor: ba,
        focusEditor: ca,
        getInteractionCanvas: f,
        getInteractionContext: g,
        getMeasurementCanvas: c,
        getMeasurementContext: d,
        getMetricsCanvas: i,
        createRBush: j,
        getParticipantCanvas: h,
        getParticipantContext: k,
        FontChange: Ga,
        changeFontSize: s,
        createCopyPasteDiagram: u,
        closePopups: t,
        getFontSize: W,
        getFontSansSerifNormal: B,
        getFontNormal: A,
        getFontSmall: C,
        getFontBig: D,
        getFontMonoNormal: E,
        getFontMonoSmall: F,
        getFontMonoBig: G,
        getFontMonoNumeric: H,
        getFontNumeric: I,
        getLineHeightFontNumeric: J,
        getLineHeightFontSmall: K,
        getLineHeightFontBig: L,
        getFontTitle: P,
        getFontFontAwesome: R,
        getFontMaterialDesignIcons: S,
        getFontFontAwesome5Brands: T,
        getFontFontAwesome5Regular: U,
        getFontFontAwesome5Solid: V,
        getFontIconSize: Q,
        fontSizeTitleRatio: Ea,
        getTextStrokeWeight: M,
        getLineWeightParticipantBoxLineWeight: N,
        getLineWeightParticipantType: O,
        createShareUrl: w,
        updateSyntaxErrors: Y,
        updateSource: l,
        pushUndoChange: m,
        undoChange: o,
        redoChange: p,
        appendToSource: $,
        prependToSource: _,
        setCanvasToSvgContext: a,
        isRunningNode: ia,
        getDefaultData: z,
        currentDataIsSameAsInitialDataInUrl: x,
        getUrlVars: v,
        showPopup: la,
        showInstructionsPopup: ma,
        clone: na
    }
}();
var SEQ = SEQ || {};
SEQ.metrics = function() {
    function a(a) {
        return b(a, "Pp", SEQ.main.getFontSize())
    }

    function b(a, b, c) {
        function d() {
            for (var a = 0; a < g; a++)
                for (var b = 0; b < h; b++) {
                    var c = 4 * (a * h + b);
                    if (0 != j[c]) return a
                }
            return 0
        }

        function e() {
            for (var a = g - 1; a > 0; a--)
                for (var b = 0; b < h; b++) {
                    var c = 4 * (a * h + b);
                    if (0 != j[c]) return a
                }
            return g
        }
        var f = SEQ.main.getMetricsCanvas(),
            g = 2 * c,
            h = 2 * c;
        f.height = g, f.width = h;
        var i = f.getContext("2d");
        i.fillRect(0, 0, h, g), i.textBaseline = "top", i.fillStyle = "white", i.font = a, i.fillText(b, 0, 0);
        var j = i.getImageData(0, 0, h, g).data;
        return e() - d()
    }

    function c(a, b) {
        var c, d = SEQ.main.getDiagramContext();
        return b ? (d.save(), d.font = b, c = d.measureText(a), d.restore()) : c = d.measureText(a), c.width
    }

    function d() {
        var b = SEQ.main.getFontNormal(),
            c = 1.2565541 * a(b);
        if (!SEQ.main.isRunningNode()) {
            var d = SEQ.main.getInteractionContext();
            d.font = b
        }
        var g = SEQ.main.getDiagramContext();
        g.font = b, e.textLineHeight = c, e.textStrokeWeight = c / 4, e.textBackgroundPadding = .15 * c;
        var h = SEQ.main.getFontSansSerifNormal(),
            i = 1.2565541 * a(h);
        e.baseSpaceMetric = i, e.textTopBottomPadding = .3 * i, e.fragmentTextPosYOffset = .4 * i, e.entityMarginTop = i * f.spacingRation * SEQ.parser.diagram.entrySpacingRatio, e.textPadding = i / 2, e.boxBleed = .9 * i, e.entryMarginSide = i / 2, e.diagramMarginTop = i / 2, e.diagramMarginBottom = 3.5 * i, e.diagramLifeLineDashSize = i / 1.3, e.diagramLifeLineSpaceSize = i / 3, e.diagramLifeLineWeight = i / 12, e.diagramLineWeight = i / 12, e.participantMarginTop = i / 2, e.participantMarginSide = i / 2, e.participantMarginBottom = i / 2, e.participantPadding = i, e.participantTopBottomPadding = .7 * i, e.participantImageHeight = 4.5 * i, e.participantTypeLineWeight = .17 * i, e.participantBoxLineWeight = .16 * i, e.participantDestroySize = 1.8 * i, e.participantDestroyLineWeight = .16 * i, e.participantSpecialCollisionSpace = i, e.messageSelfRefHeight = 1.3 * i, e.messageSelfRefWidth = 4 * i, e.messageSelfRefSideMargin = i / 2, e.messageArrowWidth = i / 1.2, e.messageArrowLineNegativeMargin = .01 * i, e.messageLineDashWidth = i / 2.5, e.messageInteractionMargin = .15 * i, e.messageCreatorInteractionMargin = .1 * i, e.messageCreatorPosDiffThreshold = .2 * i, e.messageFailureSize = i, e.messageFailurePadding = i / 2, e.dragAndDropInteractionMargin = 3 * i, e.dividerMinimumLineWidth = i, e.dividerLineSpacing = i / 3, e.fragmentLineWeight = i / 7, e.fragmentBleed = 3.5 * i, e.fragmentMarginSide = i, e.fragmentOperandLineDashWidth = i / 4, e.fragmentLabelEdgeLength = .6 * i, e.fragmentLabelSmallHeight = .6 * i, e.fragmentLabelSidePadding = i, e.fragmentHeight = 1.2 * i, e.fragmentTextSideMargin = i, e.collisionBleed = i / 3, e.fragmentCollisionLineCompensation = i / 2, e.entryMoverXCollisionWidth = i, e.entryMoverThreshold = i / 3, e.activationSideWidth = i / 2, e.activationAfterHeight = .7 * i, e.participantGroupPadding = i / 2, e.frameMargin = 1.6 * i, e.frameMarginCanvas = i / 2, e.frameHeight = 1.4 * i, e.frameLabelSidePadding = i, e.frameLabelEdgeLength = .7 * i, e.frameLabelSmallHeight = .7 * i, e.frameTextPosYOffset = .45 * i
    }
    var e = {},
        f = {
            entrySpacingRatio: 1,
            spacingRation: 1.5
        };
    return {
        setupAllMetrics: d,
        calcWidth: c,
        calcHeight: b,
        data: e,
        constants: f
    }
}();
var SEQ = SEQ || {};
SEQ.parser = function() {
    function a(a, g) {
        function h(a) {
            for (var g = a; g < v.length; g++) {
                var l, w = v[g];
                (l = SEQ.entityTitle.parse(w)) ? (q.title = l, b(l)) : (l = SEQ.entityFontFamily.parse(w)) ? (q.fontFamily = l.fontFamily, SEQ.metrics.setupAllMetrics(), b(l)) : (l = SEQ.entityEntrySpacing.parse(w)) ? (q.entrySpacingRatio = l.entrySpacing, SEQ.metrics.setupAllMetrics(), b(l)) : (l = SEQ.entityParticipantSpacing.parse(w)) ? (q.participantSpacing = l.participantSpacing, b(l)) : (l = SEQ.entityFontSize.parse(w)) ? b(l): (l = SEQ.entityMessage.parse(w, t, i, r, s)) ? (b(l), i && r++, u && (l.type.indexOf("--") > -1 ? SEQ.entityActivation.deactivate(l.fromParticipantName) : SEQ.entityActivation.activate(l.toParticipantName))) : (l = SEQ.entityAutoNumber.parse(w)) ? (i = l.enabled, i && (isNaN(l.value) || (r = l.value)), b(l)) : (l = SEQ.entityAutoActivation.parse(w)) ? (u = l.enabled, b(l)) : (l = SEQ.entityLinear.parse(w)) ? (s = l.enabled, b(l)) : (l = SEQ.entityParallel.parse(w)) ? (t = l.enabled, b(l)) : (l = SEQ.entityNoteBoxLeftRight.parse(w, t)) ? b(l) : (l = SEQ.entityNoteBoxOver.parse(w, t)) ? b(l) : (l = SEQ.entityParticipant.parse(w, g, h)) ? b(l) : (l = SEQ.entityDivider.parse(w)) ? b(l) : (l = SEQ.entityFragment.parse(w, g)) ? b(l) : (l = SEQ.entityActivation.parse(w)) ? b(l) : (l = SEQ.entitySpace.parse(w)) ? b(l) : (l = SEQ.entityCreateDestroy.parse(w)) ? b(l) : (l = SEQ.entityActiveColor.parse(w)) ? b(l) : (l = SEQ.entityLifeLineStyle.parse(w)) ? b(l) : (l = SEQ.entityBottomParticipants.parse(w)) ? b(l) : (l = SEQ.entityParticipantGroup.parse(w)) ? b(l) : (l = SEQ.entityFrame.parse(w)) ? (q.frame = l, b(l)) : (b({
                    raw: w
                }), o.exec(w) || p.exec(w) || q.errors.push({
                    lineNumber: g
                }))
            }
            c(), d(), e(), f(), j(), k(), SEQ.main.isRunningNode() || (m(), q.ongoingFragments.forEach(function(a) {
                q.errors.push({
                    lineNumber: a.lineNumber
                })
            }), SEQ.main.updateSyntaxErrors(q.errors)), SEQ.main.isRunningNode() || SEQ.saveAndOpen.synchronizeFileNameWithTitleIfEnabled(), SEQ.painter.paint(), n.ongoing = !1
        }
        SEQ.main.isRunningNode() || SEQ.interactor.cancelAllInteraction(), q.entrySpacingRatio = SEQ.metrics.constants.entrySpacingRatio, q.fontFamily = "sans-serif", SEQ.metrics.setupAllMetrics(), n.ongoing = !0, q.entries = [], q.errors = [], q.participantsByName = {}, q.participants = [], q.ongoingFragments = [], q.fragments = [], q.ongoingActivations = {}, q.title = null, q.frame = null, q.createdParticipantNames = {}, q.ongoingParticipantGroups = [], q.participantGroups = [], q.participantSpacing = 0, q.participantMaxHeight = SEQ.metrics.data.textLineHeight + SEQ.metrics.data.textTopBottomPadding + 2 * SEQ.metrics.data.participantTopBottomPadding + SEQ.metrics.data.participantTypeLineWeight, q.participantActiveColor = null, q.participantLifeLineColor = null, q.participantLifeLineWeight = null, q.maxParticipantGroupHeight = 0, q.bottomParticipants = !1, q.collisionTypeAreas = SEQ.main.createRBush();
        var i = !1,
            r = 1,
            s = !1,
            t = !1,
            u = !1;
        SEQ.main.isRunningNode() || (g = SEQ.main.getSourceValue()), SEQ.main.pushUndoChange(g, a);
        var v = g.split("\n");
        l(v), h(0)
    }

    function b(a) {
        function b() {
            var a = {};
            for (var b in q.ongoingActivations) q.ongoingActivations.hasOwnProperty(b) && (a[b] = q.ongoingActivations[b].length);
            return a
        }
        a.type && a.type != SEQ.entityParticipant.Type.PARTICIPANT && (SEQ.entityFragment.populateEnclosingCollapsedFragment(a), a.enclosingCollapsedFragment || (a.fromParticipantName && SEQ.entityParticipant.storeParticipantWithDefinedWidths(null, a.fromParticipantName), a.toParticipantName && SEQ.entityParticipant.storeParticipantWithDefinedWidths(null, a.toParticipantName)), a.snapshot = {
            numberOfOngoingActivationsPerParticipant: b(),
            ongoingFragments: q.ongoingFragments.slice()
        }), q.entries.push(a)
    }

    function c() {
        if (q.participants.length > 0) {
            var a = q.participantsByName[SEQ.entityParticipant.specialParticipant.LEFT_PARTICIPANT];
            if (a) {
                var b = q.participants.indexOf(a);
                q.participants.splice(b, 1), q.participants.unshift(a)
            }
            var c = q.participantsByName[SEQ.entityParticipant.specialParticipant.RIGHT_PARTICIPANT];
            c && (q.participants.splice(q.participants.indexOf(c), 1), q.participants.push(c))
        }
    }

    function d() {
        var a = [];
        q.entries.forEach(function(b) {
            b.type && b.type != SEQ.entityParticipant.Type.PARTICIPANT && a.push(b)
        });
        var b, c;
        a.forEach(function(d, e) {
            e > 0 && !a[e - 1].activation && (b = a[e - 1]), c = e < a.length - 1 ? a[e + 1] : null, d.updateParticipantWidths && !d.enclosingCollapsedFragment && d.updateParticipantWidths(d), d.updateActivationPosDiff && d.updateActivationPosDiff(d, null, c), d.updateEnclosingFragments && d.updateEnclosingFragments(d), d.enclosingCollapsedFragment || b && d.type === SEQ.entityActivation.Type.ACTIVATE && b.message && (d.fromParticipantName == b.fromParticipantName || d.fromParticipantName == b.toParticipantName) && (b.updateActivationPosDiff && b.updateActivationPosDiff(b, d, c), b.updateEnclosingFragments && b.updateEnclosingFragments(b), b.updateParticipantWidths && b.updateParticipantWidths(b))
        })
    }

    function e() {
        q.participants.length > 0 ? (SEQ.entityFragment.updateParticipantWidths(), g()) : q.title || (q.title = SEQ.entityTitle.parse("title Empty diagram, click the ? icon for instructions and examples"))
    }

    function f() {
        q.entries.forEach(function(a) {
            a.reCalcTotalHeight && a.reCalcTotalHeight()
        })
    }

    function g() {
        var a = 0,
            b = q.participants;
        if (q.frame && (a += SEQ.metrics.data.frameMargin), q.participantSpacing == SEQ.entityParticipantSpacing.equal) {
            for (var c = 0, d = 0; d < b.length; d++) {
                var e = h(d);
                e.largestSideWidth > c && (c = e.largestSideWidth)
            }
            for (var f = 0; f < b.length; f++) f > 0 ? (a += c, b[f].posX = a) : (a += h(f).largestSideWidth, b[f].posX = a)
        } else
            for (var g = 0; g < b.length; g++) {
                var i = g > 0 ? b[g - 1] : null,
                    j = b[g],
                    k = h(g),
                    l = k.largestSideWidth,
                    m = k.participantsWidth - SEQ.metrics.data.participantMarginSide,
                    n = l - m;
                i && q.participantSpacing * SEQ.metrics.constants.spacingRation > n / SEQ.metrics.data.baseSpaceMetric && (l = q.participantSpacing * SEQ.metrics.data.baseSpaceMetric * SEQ.metrics.constants.spacingRation + m), a += l, j.posX = a
            }
        q.participants.forEach(function(a) {
            a.entry && (a.entry.posX = a.posX)
        })
    }

    function h(a) {
        var b = q.participants,
            c = a > 0 ? b[a - 1] : null,
            d = b[a],
            e = (c ? c.width / 2 + SEQ.metrics.data.participantMarginSide + c.outerRightWidth : 0) + d.width / 2 + SEQ.metrics.data.participantMarginSide + d.outerLeftWidth,
            f = 0;
        if (c && (c.outerRightWidth || d.outerLeftWidth)) {
            var g = c.entityRightWidth + d.width / 2 + d.outerLeftWidth,
                h = d.entityLeftWidth + c.width / 2 + c.outerRightWidth;
            f = g > h ? g : h
        } else f += c && c.entityRightWidth > d.entityLeftWidth ? c.entityRightWidth : d.entityLeftWidth, c && (f += c.timelineRightWidth), f += d.timelineLeftWidth;
        var i = Math.max(e, f);
        return {
            participantsWidth: e,
            entitiesWidth: f,
            largestSideWidth: i
        }
    }

    function i(a) {
        return a in SEQ.parser.diagram.participantsByName
    }

    function j() {
        for (var a, b = 0, c = [], d = q.entries.length - 1; d >= 0; d--) {
            var e = q.entries[d];
            if (e.type)
                if (e.fromParticipantName === e.toParticipantName ? e.totalHeight - SEQ.metrics.data.messageSelfRefHeight > b && (b = e.totalHeight - SEQ.metrics.data.messageSelfRefHeight) : e.totalHeight > b && (b = e.totalHeight), e.linearWithPrevious) c.push(e);
                else {
                    a && a.linearWithPrevious && c.push(e);
                    var f = {
                        maxHeight: b,
                        selfRefHeight: 0
                    };
                    c.length > 0 && c.forEach(function(a) {
                        a.fromParticipantName === a.toParticipantName && (f.selfRefHeight = SEQ.metrics.data.messageSelfRefHeight), a.linearData = f
                    }), b = 0, c = []
                } a = e
        }
    }

    function k() {
        function a(a, c) {
            a.type && a.type != SEQ.entityParticipant.Type.PARTICIPANT ? a.parallel && c && c.parallel ? a.position.posY = b : a.linearData ? (a.linearWithPrevious || (b += a.topMargin + a.linearData.maxHeight + a.linearData.selfRefHeight), a.fromParticipantName === a.toParticipantName ? a.position.posY = b : a.position.posY = b - a.linearData.selfRefHeight) : (b += a.topMargin + a.totalHeight, a.position.posY = b, c && (a.type === SEQ.entityActivation.Type.ACTIVATE && c.delayHeight && c.fromParticipantName === a.fromParticipantName && (a.position.posY -= c.delayHeight), a.type === SEQ.entityActivation.Type.ACTIVATE && c.participantToCreate && c.fromParticipantName === a.fromParticipantName && (a.position.posY -= c.participantToCreate.height / 2), a.type !== SEQ.entityActivation.Type.DEACTIVATE && a.type !== SEQ.entityActivation.Type.DEACTIVATE_AFTER || !c.delayHeight || c.fromParticipantName !== a.fromParticipantName || (a.position.posY -= c.delayHeight), a.type !== SEQ.entityActivation.Type.DEACTIVATE && a.type !== SEQ.entityActivation.Type.DEACTIVATE_AFTER || !c.participantToCreate || c.fromParticipantName !== a.fromParticipantName || (a.position.posY -= c.participantToCreate.height / 2), (a.type === SEQ.entityActivation.Type.DEACTIVATE || a.type === SEQ.entityActivation.Type.DEACTIVATE_AFTER) && SEQ.entityMessage.isType(c.type) && c.type.indexOf("--") > -1 && c.fromParticipantName === c.toParticipantName && (a.position.posY -= SEQ.metrics.data.messageSelfRefHeight))) : (a.position || (a.position = {}), a.position.posY = b)
        }
        var b = SEQ.metrics.data.diagramMarginTop + q.participantMaxHeight + SEQ.metrics.data.participantMarginTop,
            c = 0;
        q.participantGroups.forEach(function(a) {
            var b = a.calcHeight();
            b > c && (c = b)
        }), b += c, q.maxParticipantGroupHeight = c;
        var d;
        q.entries.forEach(function(b) {
            b.parallelEnabled === !1 && (d.parallel = !1), b.enclosingCollapsedFragment || a(b, d), b.type && !b.activation && (d = b)
        })
    }

    function l(a) {
        a.forEach(function(a) {
            var b = SEQ.entityCreateDestroy.createdParticipant(a);
            b ? q.createdParticipantNames[b] = !0 : (b = SEQ.entityMessage.createdParticipant(a), b && (q.createdParticipantNames[b] = !0))
        })
    }

    function m() {
        q.entries.forEach(function(a) {
            if (a.collisionTypeAreas && !a.enclosingCollapsedFragment && (!a.fragment || a.fragment && a.fragment.endPosition)) {
                var b = a.collisionTypeAreas();
                if (b) try {
                    q.collisionTypeAreas.load(b)
                } catch (a) {
                    console.log("Failed to load entry collision area", a)
                }
            }
        }), q.participants.forEach(function(a) {
            try {
                q.collisionTypeAreas.load(a.collisionTypeAreas())
            } catch (a) {
                console.log("Failed to load participant collision area", a)
            }
        })
    }
    var n = {
            ongoing: !1
        },
        o = new RegExp("^\\s*$"),
        p = new RegExp("^\\s*((:?#|//).*)$"),
        q = {};
    return {
        parse: a,
        diagram: q,
        participantExists: i,
        storeEntry: b,
        parsingState: n,
        regExpComment: p
    }
}();
var SEQ = SEQ || {};
SEQ.entityParticipant = function() {
    function a(a) {
        var b = B.exec(a);
        if (null != b && b.length > D.ALIAS) {
            var d = b[D.TYPE];
            d || (d = b[D.ICON_FONT_TYPE]);
            var e = b[D.ALIAS],
                f = b[D.LONG_NAME],
                g = b[D.LINE_COLOR_NAME],
                h = b[D.LINE_COLOR_HEX],
                i = b[D.LINE_WEIGHT],
                j = b[D.FILL_COLOR_NAME],
                k = b[D.FILL_COLOR_HEX],
                l = {
                    lineColor: g ? g : h,
                    lineWeight: i,
                    fillColor: j ? j : k
                },
                m = {
                    type: E.PARTICIPANT,
                    participantType: d,
                    fromParticipantName: e,
                    longName: f,
                    raw: a
                };
            if (f) var n = SEQ.textUtil.parseTextData(f);
            if (d != E.PARTICIPANT) {
                var o = b[D.ICON_UNICODE];
                c(!0, e, 0, 0, m, n, l, null, SEQ.participantTypes[d], o, f)
            } else c(!0, e, 0, 0, m, n, l, null, null, null, f);
            return m
        }
    }

    function b(a, b, c, d) {
        SEQ.parser.participantExists(b) || g(a, b);
        var e = SEQ.parser.diagram.participantsByName[b];
        e.timelineLeftWidth < c && (e.timelineLeftWidth = c), e.timelineRightWidth < d && (e.timelineRightWidth = d)
    }

    function c(a, b, c, d, e, f, h, i, j, l, m) {
        SEQ.parser.participantExists(b) || g(a, b, e, f, h, i, j, l, m);
        var n = SEQ.parser.diagram.participantsByName[b];
        return (c || d) && k(n, c, d), n
    }

    function d(a) {
        return C.LEFT_PARTICIPANT === a || C.RIGHT_PARTICIPANT === a
    }

    function e(a) {
        return C.LEFT_PARTICIPANT === a
    }

    function f(a) {
        return C.RIGHT_PARTICIPANT === a
    }

    function g(a, b, c, e, f, g, k, l, m) {
        var n, p;
        if (l) var q = String.fromCodePoint(parseInt(l, 16));
        if (g) n = SEQ.metrics.data.participantImageHeight / g.height * g.width, p = SEQ.metrics.data.participantImageHeight;
        else if (k) {
            var r, s = k.width(q);
            e ? (r = e.width, p = k.height(q) + e.height) : (r = SEQ.metrics.calcWidth(b), p = k.height(q) + SEQ.metrics.data.textLineHeight + SEQ.metrics.data.textTopBottomPadding), n = s > r ? s : r
        } else e ? (n = e.width + 2 * SEQ.metrics.data.participantPadding + SEQ.metrics.data.participantTypeLineWeight, p = e.height + 2 * SEQ.metrics.data.participantTopBottomPadding + SEQ.metrics.data.participantBoxLineWeight) : (n = d(b) ? 0 : i(b), p = j());
        var t = {
            type: SEQ.entityParticipant.Type.PARTICIPANT,
            name: b,
            font: SEQ.main.getFontNormal(),
            width: n,
            height: p,
            entityLeftWidth: 0,
            entityRightWidth: 0,
            timelineLeftWidth: 0,
            timelineRightWidth: 0,
            outerLeftWidth: 0,
            outerRightWidth: 0,
            longNameTextData: e,
            image: g,
            participantType: k,
            iconUnicode: q,
            iconUnicodeString: l,
            styling: f ? f : {},
            entry: c,
            createPositions: [],
            destroyPositions: [],
            collisionTypeAreas: u,
            originalLongName: m,
            declared: a,
            updatePos: h,
            paint: o
        };
        !SEQ.parser.diagram.createdParticipantNames[b] && p > SEQ.parser.diagram.participantMaxHeight && (SEQ.parser.diagram.participantMaxHeight = p), SEQ.parser.diagram.participantsByName[b] = t, SEQ.parser.diagram.participants.push(t), SEQ.parser.diagram.ongoingParticipantGroups.forEach(function(a) {
            a.enclosedParticipants.push(t)
        })
    }

    function h(a, b) {
        a.posX = b
    }

    function i(a) {
        return SEQ.metrics.calcWidth(a) + 2 * SEQ.metrics.data.participantPadding + SEQ.metrics.data.participantTypeLineWeight
    }

    function j() {
        return SEQ.metrics.data.textLineHeight + SEQ.metrics.data.textTopBottomPadding + 2 * SEQ.metrics.data.participantTopBottomPadding + SEQ.metrics.data.participantTypeLineWeight
    }

    function k(a, b, c) {
        a.entityLeftWidth < b && (a.entityLeftWidth = b), a.entityRightWidth < c && (a.entityRightWidth = c)
    }

    function l(a, b, c) {
        a.outerLeftWidth += b, a.outerRightWidth += c
    }

    function m(a, b, c, d) {
        SEQ.parser.participantExists(b) || g(a, b), SEQ.parser.participantExists(c) || g(a, c);
        var e, f = SEQ.parser.diagram.participantsByName[b],
            h = SEQ.parser.diagram.participantsByName[c],
            i = SEQ.parser.diagram.participants.indexOf(f),
            j = SEQ.parser.diagram.participants.indexOf(h),
            l = Math.abs(i - j);
        if (l > 2) {
            var m = n(i, j, SEQ.parser.diagram.participants),
                o = d - m;
            e = o / 2
        } else e = 2 === l ? d / 2 : d;
        e > 0 && (i < j ? (k(f, 0, e), k(h, e, 0)) : (k(f, e, 0), k(h, 0, e)))
    }

    function n(a, b) {
        for (var c = a < b ? {
                low: a,
                high: b
            } : {
                low: b,
                high: a
            }, d = 0, e = c.low + 1; e <= c.high; e++) {
            var f = SEQ.parser.diagram.participants[e - 1],
                g = SEQ.parser.diagram.participants[e];
            if (e != c.low + 1 && e != c.high) {
                var h = (f ? f.width / 2 + SEQ.metrics.data.participantMarginSide : 0) + g.width / 2 + SEQ.metrics.data.participantMarginSide,
                    i = f && f.entityRightWidth > g.entityLeftWidth ? f.entityRightWidth : g.entityLeftWidth;
                d += Math.max(h, i)
            }
        }
        return d
    }

    function o(a, b) {
        p(a, b, !1, !1)
    }

    function p(a, b, c, d, e) {
        if (!a.createPositions.length || e) {
            var f = SEQ.metrics.data.participantMarginTop;
            c || (SEQ.parser.diagram.title && (f += SEQ.parser.diagram.title.totalHeight), SEQ.parser.diagram.frame && (f += SEQ.parser.diagram.frame.totalHeight), f += SEQ.parser.diagram.maxParticipantGroupHeight), q(a, b, f, d, e)
        }
    }

    function q(a, b, c, d, e) {
        if (a.image) {
            c += SEQ.parser.diagram.participantMaxHeight - SEQ.metrics.data.participantImageHeight;
            var f = a.posX - a.width / 2;
            b.beginPath(), b.save(), b.rect(f, c, a.width, a.height), b.fillStyle = "white", b.fill(), b.restore(), b.drawImage(a.image, f, c, a.width, a.height)
        } else a.participantType ? (a.participantType.paint(b, a, SEQ.parser.diagram.participantMaxHeight, c, e), e += a.longNameTextData ? a.longNameTextData.height : SEQ.metrics.data.textLineHeight + SEQ.metrics.data.textTopBottomPadding, r(a, b, SEQ.parser.diagram.participantMaxHeight, c, d, e)) : SEQ.entityParticipant.isSpecialParticipantName(a.name) || (s(a, b, SEQ.parser.diagram.participantMaxHeight, c, e), c -= SEQ.metrics.data.participantTopBottomPadding, e += a.height - SEQ.metrics.data.participantTypeLineWeight - SEQ.metrics.data.participantTopBottomPadding, r(a, b, SEQ.parser.diagram.participantMaxHeight, c, d, e))
    }

    function r(a, b, c, d, e, f) {
        var g;
        if (b.save(), a.longNameTextData) g = f ? f - a.longNameTextData.height : d + c - a.longNameTextData.height, SEQ.textUtil.fillTextParticipant(b, e, a.longNameTextData.parsedLines, a.posX, g);
        else {
            var h = SEQ.metrics.calcWidth(a.name, a.font);
            b.font = a.font, g = f ? f - SEQ.metrics.data.textTopBottomPadding : d + c - SEQ.metrics.data.textTopBottomPadding, b.fillText(a.name, a.posX - h / 2, g)
        }
        b.restore()
    }

    function s(a, b, c, d, e) {
        var f;
        f = e ? e : d + c - a.height + SEQ.metrics.data.participantTypeLineWeight;
        var g = a.width;
        b.beginPath(), b.save(), b.rect(a.posX - g / 2, f, g, a.height - SEQ.metrics.data.participantTypeLineWeight), a.styling.fillColor ? b.fillStyle = a.styling.fillColor : b.fillStyle = "white", b.fill(), a.styling.lineWeight ? b.lineWidth = SEQ.main.getLineWeightParticipantBoxLineWeight(a.styling.lineWeight) : b.lineWidth = SEQ.metrics.data.participantBoxLineWeight, a.styling.lineColor && (b.strokeStyle = a.styling.lineColor), 0 != a.styling.lineWeight && b.stroke(), b.restore()
    }

    function t(a, b) {
        for (var c = SEQ.parser.diagram.participants, d = 0; d < c.length; d++) {
            var e = c[d],
                f = [];
            SEQ.parser.diagram.entries.forEach(function(a) {
                a.activation && a.fromParticipantName === e.name && a.position.posY <= b && (a.endPosY >= b || !a.endPosY) && f.push(a)
            });
            var g, h = f.length ? SEQ.metrics.data.activationSideWidth : 0,
                i = f.length ? SEQ.entityActivation.calcActivationCenterDiff(f.length) + SEQ.metrics.data.activationSideWidth : 0;
            g = SEQ.entityParticipant.isSpecialParticipantName(e.name) ? SEQ.metrics.data.participantSpecialCollisionSpace : e.width / 2;
            var j = SEQ.parser.diagram.title ? SEQ.parser.diagram.title.totalHeight : 0,
                k = SEQ.parser.diagram.frame ? SEQ.parser.diagram.frame.totalHeight : 0,
                l = j + k + SEQ.metrics.data.participantMarginTop + SEQ.parser.diagram.participantMaxHeight + SEQ.parser.diagram.maxParticipantGroupHeight,
                m = e.posX - g - h,
                n = e.posX + g + i,
                o = l - e.height;
            if (a > m && a < n && (!b || b > o)) return e
        }
    }

    function u() {
        var a = SEQ.parser.diagram.title ? SEQ.parser.diagram.title.totalHeight : 0,
            b = SEQ.parser.diagram.frame ? SEQ.parser.diagram.frame.totalHeight : 0,
            c = a + b + SEQ.metrics.data.participantMarginTop + SEQ.parser.diagram.participantMaxHeight + SEQ.parser.diagram.maxParticipantGroupHeight,
            d = [];
        return d.push({
            minX: this.posX - this.width / 2,
            maxX: this.posX + this.width / 2,
            minY: c - this.height,
            maxY: c,
            type: "move"
        }), d
    }

    function v(a, b, c, d, e) {
        var f = a;
        return e && (f += " " + e), d && (d.lineColor ? (f += " " + w(d.lineColor), d.lineWeight && (f += ":" + d.lineWeight)) : d.lineWeight && (f += " :" + d.lineWeight)), c && (f += ' "' + c + '" as'), f += " " + b, d && d.fillColor && (f += " " + w(d.fillColor)), f
    }

    function w(a) {
        return a.indexOf("#") == -1 ? "#" + a : a
    }

    function x(a) {
        return E.PARTICIPANT === a
    }
    var y = "((?:[^\\*#<>\\-:\\,\\=\\s]+?)|(?:[^\\*#<>\\-:\\,\\=\\s]+?[^#<>\\,:]*?[^\\*#<>\\-:\\,\\=\\s]+?))",
        z = "(?:\\s?(#[a-fA-F0-9]{6})|(?:\\s?#)([a-zA-Z]{3,20}))",
        A = z + "?",
        B = new RegExp("^\\s*(?:(participant|actor|boundary|control|entity|database)" + A + '(?:\\s?:([0-9]+(?:\\.[0-9]+)?))?|(fontawesome|materialdesignicons|fontawesome5brands|fontawesome5regular|fontawesome5solid)\\s([a-fA-F0-9]{4}))\\s(?:(")(.+)(")\\s(as)\\s)?' + y + A + "$"),
        C = {
            LEFT_PARTICIPANT: "[",
            RIGHT_PARTICIPANT: "]"
        },
        D = {
            TYPE: 1,
            LINE_COLOR_HEX: 2,
            LINE_COLOR_NAME: 3,
            LINE_WEIGHT: 4,
            ICON_FONT_TYPE: 5,
            ICON_UNICODE: 6,
            QUOTE_1: 7,
            LONG_NAME: 8,
            QUOTE_2: 9,
            AS: 10,
            ALIAS: 11,
            FILL_COLOR_HEX: 12,
            FILL_COLOR_NAME: 13
        },
        E = {
            PARTICIPANT: "participant",
            ACTOR: "actor",
            BOUNDARY: "boundary",
            CONTROL: "control",
            ENTITY: "entity",
            DATABASE: "database",
            FONT_AWESOME: "fontawesome",
            MATERIAL_DESIGN_ICONS: "materialdesignicons",
            FONT_AWESOME_5_BRANDS: "fontawesome5brands",
            FONT_AWESOME_5_REGULAR: "fontawesome5regular",
            FONT_AWESOME_5_SOLID: "fontawesome5solid"
        };
    return {
        parse: a,
        paint: p,
        paintParticipant: q,
        findParticipantXCollision: t,
        storeParticipantWithDefinedWidths: c,
        storeParticipantWithTimelineWidths: b,
        storeParticipantsAndCalcWidths: m,
        updateParticipantEntityWidths: k,
        updateParticipantOuterWidths: l,
        isType: x,
        isSpecialParticipantName: d,
        isSpecialParticipantLeftName: e,
        isSpecialParticipantRightName: f,
        calcBasicParticipantWidth: i,
        calcBasicParticipantHeight: j,
        build: v,
        Type: E,
        nameGroup: y,
        colorGroup: A,
        colorGroupMandatory: z,
        regExp: B,
        groups: D,
        specialParticipant: C
    }
}();
var SEQ = SEQ || {};
SEQ.entityDivider = function() {
    function a(a) {
        var f = h.exec(a);
        if (null != f && f.length > i.TEXT) {
            var g = SEQ.textUtil.parseTextData(f[i.TEXT]),
                k = f[i.COLOR_NAME],
                l = f[i.COLOR_HEX],
                m = k ? k : l;
            return {
                type: j.DIVIDER,
                textData: g,
                color: m,
                totalHeight: g.height + 2 * SEQ.metrics.data.textPadding,
                totalWidth: g.width + 2 * SEQ.metrics.data.textPadding + 2 * SEQ.metrics.data.dividerMinimumLineWidth + 2 * SEQ.metrics.data.entryMarginSide + 2 * SEQ.metrics.data.boxBleed,
                topMargin: SEQ.metrics.data.entityMarginTop,
                position: {},
                raw: a,
                paint: c,
                updatePos: b,
                collision: d,
                collisionTypeAreas: e
            }
        }
    }

    function b(a, b) {
        a.position.posY = b
    }

    function c(a, b, c, d) {
        function e() {
            return 1 === a.textData.lines.length && "" === a.textData.lines[0]
        }
        var f = SEQ.metrics.data.entryMarginSide,
            g = SEQ.main.getDiagramCanvas().width,
            h = g - SEQ.metrics.data.entryMarginSide,
            i = SEQ.metrics.data.dividerLineSpacing,
            j = a.position.posY - a.totalHeight / 2;
        if (b.beginPath(), b.moveTo(f, j - i), b.lineTo(h, j - i), b.moveTo(f, j), b.lineTo(h, j), b.moveTo(f, j + i), b.lineTo(h, j + i), b.stroke(), !e()) {
            var k = a.totalWidth - 2 * SEQ.metrics.data.dividerMinimumLineWidth - 2 * SEQ.metrics.data.entryMarginSide,
                l = a.position.posY - a.totalHeight,
                m = g / 2 - k / 2;
            b.beginPath(), b.moveTo(m, l), b.lineTo(m + k, l), b.lineTo(m + k, l + a.totalHeight), b.lineTo(m, l + a.totalHeight), b.closePath();
            var n = b.fillStyle;
            a.color ? b.fillStyle = a.color : b.fillStyle = "white", b.fill(), b.fillStyle = n, b.stroke();
            var o = g / 2 - a.textData.width / 2;
            SEQ.textUtil.fillText(b, c, a.textData.parsedLines, o, a.position.posY - a.totalHeight / 2 - a.textData.height / 2)
        }
    }

    function d(a) {
        return {
            main: {
                startX: 0,
                endX: Number.MAX_VALUE,
                startY: a.position.posY,
                endY: a.position.posY - a.totalHeight
            }
        }
    }

    function e() {
        var a = this.collision(this).main;
        return [{
            minX: a.startX,
            maxX: a.endX,
            minY: a.endY,
            maxY: a.startY,
            type: "move"
        }]
    }

    function f(a) {
        return j.DIVIDER + a.replace(/\n/g, "\\n") + j.DIVIDER
    }

    function g(a) {
        return j.DIVIDER === a
    }
    var h = new RegExp("^\\s*(==)(.*)(==)" + SEQ.entityParticipant.colorGroup),
        i = {
            EQUALS_1: 1,
            TEXT: 2,
            EQUALS_2: 3,
            COLOR_HEX: 4,
            COLOR_NAME: 5
        },
        j = {
            DIVIDER: "=="
        };
    return {
        parse: a,
        paint: c,
        collision: d,
        build: f,
        isType: g,
        Type: j,
        groups: i,
        regExp: h
    }
}();
var SEQ = SEQ || {};
SEQ.entityTitle = function() {
    function a(a) {
        var b = d.exec(a);
        if (null != b && b.length > e.VALUE) return {
            type: f.TITLE,
            title: b[e.VALUE],
            totalHeight: SEQ.metrics.data.textLineHeight * SEQ.main.fontSizeTitleRatio + SEQ.metrics.data.baseSpaceMetric,
            topMargin: 0,
            position: {},
            font: SEQ.main.getFontTitle(),
            raw: a
        }
    }

    function b(a) {
        var b = SEQ.parser.diagram,
            c = SEQ.main.getDiagramContext();
        c.font = b.title.font, c.fillStyle = "black";
        var d = SEQ.metrics.calcWidth(b.title.title),
            e = b.title.topMargin + b.title.totalHeight - SEQ.metrics.data.baseSpaceMetric;
        b.frame && (e += b.frame.totalHeight), c.fillText(b.title.title, a.width / 2 - d / 2, e)
    }

    function c(a) {
        return a === f.TITLE
    }
    var d = new RegExp("^\\s*(title) (.+)", "i"),
        e = {
            TITLE: 1,
            VALUE: 2
        },
        f = {
            TITLE: "title"
        };
    return {
        parse: a,
        paint: b,
        isType: c,
        Type: f,
        regExp: d,
        groups: e
    }
}();
var SEQ = SEQ || {};
SEQ.entityFontFamily = function() {
    function a(a) {
        var d = b.exec(a);
        if (null != d && d.length > c.NAME) {
            var e = d[c.NAME];
            return {
                raw: a,
                fontFamily: e
            }
        }
    }
    var b = new RegExp("^\\s*(fontfamily)\\s(.+)"),
        c = {
            FONT_FAMILY: 1,
            NAME: 2
        },
        d = {
            FONT_FAMILY: "fontfamily"
        };
    return {
        parse: a,
        regExp: b,
        groups: c,
        Type: d
    }
}();
var SEQ = SEQ || {};
SEQ.entityMessage = function() {
    function a(a, c, l, m, n) {
        var o = D.exec(a);
        if (null != o && o.length > G.TEXT) {
            var r, t, u = h([o[G.TYPE_RIGHT], o[G.TYPE_LEFT], o[G.TYPE_DUAL]]);
            if (o[G.CREATE_DUAL_LEFT] && o[G.CREATE_DUAL_RIGHT]) return;
            w(u) && !o[G.CREATE_DUAL_LEFT] ? (r = o[G.PARTICIPANT_1], t = o[G.PARTICIPANT_2]) : (r = o[G.PARTICIPANT_2], t = o[G.PARTICIPANT_1]);
            var v, y = h([o[G.COLOR_HEX_1], o[G.COLOR_NAME_1], o[G.COLOR_HEX_2], o[G.COLOR_NAME_2], o[G.COLOR_HEX_3], o[G.COLOR_NAME_3]]),
                z = h([o[G.WEIGHT_1], o[G.WEIGHT_2], o[G.WEIGHT_3]]),
                A = l ? m : null,
                B = SEQ.textUtil.parseTextData(o[G.TEXT], A),
                C = B.height,
                E = o[G.DELAY_LEFT] ? o[G.DELAY_LEFT] : o[G.DELAY_RIGHT];
            E && (v = SEQ.metrics.data.baseSpaceMetric * E, C += v);
            var F;
            if (r === t) {
                F = B.width + SEQ.metrics.data.messageArrowWidth + SEQ.metrics.data.textPadding + SEQ.metrics.data.messageSelfRefSideMargin;
                var H = SEQ.metrics.data.messageSelfRefWidth,
                    I = SEQ.metrics.data.messageSelfRefSideMargin;
                F = F > H + I ? F : H + I, C += SEQ.metrics.data.messageSelfRefHeight
            } else F = B.width + 2 * SEQ.metrics.data.messageArrowWidth + 2 * SEQ.metrics.data.textPadding, u.indexOf("x") > -1 && (F += SEQ.metrics.data.messageFailureSize / 2 + SEQ.metrics.data.messageFailurePadding);
            if (n) var J = i(u, r, t);
            var K = {};
            if (x(o)) {
                var L = SEQ.parser.diagram.participantsByName[t];
                if (L) {
                    var M = L.height / 2,
                        N = C - M;
                    C = L.height, N > 0 && (C += N), L.createPositions.push(K), F += L.width / 2
                } else {
                    var O = SEQ.entityParticipant.calcBasicParticipantHeight() / 2,
                        P = C - O;
                    C = SEQ.entityParticipant.calcBasicParticipantHeight(), P > 0 && (C += P), F += SEQ.entityParticipant.calcBasicParticipantWidth(t) / 2
                }
            }
            var Q = SEQ.parser.diagram.ongoingFragments;
            if (Q.length) var R = Q[Q.length - 1],
                S = R.backgroundColor;
            return {
                type: u,
                fromParticipantName: r,
                toParticipantName: t,
                participantToCreate: L,
                textData: B,
                color: y,
                enclosingFragmentColor: S,
                totalHeight: C,
                delayHeight: v,
                totalWidth: F,
                weight: z,
                topMargin: SEQ.metrics.data.entityMarginTop,
                position: K,
                autoNumber: A,
                parallel: c,
                linearWithPrevious: J,
                linearEnabled: n,
                create: x(o),
                match: o,
                raw: a,
                message: !0,
                paint: k,
                updatePos: d,
                reCalcTotalHeight: b,
                collision: p,
                collisionTypeAreas: q,
                buildRaw: s,
                calcPosX: j,
                updateActivationPosDiff: g,
                updateEnclosingFragments: f,
                updateParticipantWidths: e
            }
        }
    }

    function b() {
        if (this.delayHeight && this.fromParticipantName != this.toParticipantName) {
            var a = c(this).availableHeight,
                b = this.textData.height - a;
            b < 0 ? this.totalHeight -= this.textData.height : this.totalHeight -= a
        }
    }

    function c(a) {
        var b;
        if (a.fromParticipantName === a.toParticipantName) b = SEQ.metrics.data.messageSelfRefWidth;
        else {
            var c = j(a);
            b = Math.abs(c.toX - c.fromX)
        }
        var d = Math.atan2(a.delayHeight, b),
            e = (b - a.textData.width) / 2,
            f = e * Math.tan(d);
        return {
            angle: d,
            availableHeight: f
        }
    }

    function d(a, b, c, d) {
        a.position.posY = b, a.fromPosX = c, a.toPosX = d
    }

    function e(a) {
        if (a.create && !a.participantToCreate) {
            var b = SEQ.entityParticipant.storeParticipantWithDefinedWidths(null, a.toParticipantName, 0, 0);
            b.createPositions.push(a.position), a.participantToCreate = b
        }
        if (a.fromParticipantName === a.toParticipantName) SEQ.entityParticipant.storeParticipantWithDefinedWidths(null, a.fromParticipantName, 0, a.totalWidth);
        else {
            var c = SEQ.parser.diagram.participants.indexOf(SEQ.parser.diagram.participantsByName[a.fromParticipantName]),
                d = SEQ.parser.diagram.participants.indexOf(SEQ.parser.diagram.participantsByName[a.toParticipantName]);
            c < d ? SEQ.entityParticipant.storeParticipantsAndCalcWidths(null, a.fromParticipantName, a.toParticipantName, a.totalWidth) : SEQ.entityParticipant.storeParticipantsAndCalcWidths(null, a.fromParticipantName, a.toParticipantName, a.totalWidth)
        }
    }

    function f(a) {
        if (a.fromParticipantName === a.toParticipantName) SEQ.entityFragment.storeEnclosedEntriesData(a.fromParticipantName, 0, a.totalWidth, 0, a.fromActivationXDiff, a.snapshot.ongoingFragments);
        else {
            var b = SEQ.parser.diagram.participants.indexOf(SEQ.parser.diagram.participantsByName[a.fromParticipantName]),
                c = SEQ.parser.diagram.participants.indexOf(SEQ.parser.diagram.participantsByName[a.toParticipantName]),
                d = 0;
            a.participantToCreate && (d = a.participantToCreate.width / 2 + SEQ.metrics.data.entryMarginSide), b < c ? (SEQ.entityFragment.storeEnclosedEntriesData(a.fromParticipantName, 0, 0, 0, 0, a.snapshot.ongoingFragments), SEQ.entityFragment.storeEnclosedEntriesData(a.toParticipantName, d, d, 0, a.toActivationXDiff, a.snapshot.ongoingFragments)) : (SEQ.entityFragment.storeEnclosedEntriesData(a.fromParticipantName, 0, 0, 0, 0, a.snapshot.ongoingFragments), SEQ.entityFragment.storeEnclosedEntriesData(a.toParticipantName, d, d, a.toActivationXDiff, 0, a.snapshot.ongoingFragments))
        }
    }

    function g(a, b, c) {
        var d;
        d = b ? b.snapshot.numberOfOngoingActivationsPerParticipant : a.snapshot.numberOfOngoingActivationsPerParticipant;
        var e = SEQ.parser.diagram.participants.indexOf(SEQ.parser.diagram.participantsByName[a.fromParticipantName]),
            f = SEQ.parser.diagram.participants.indexOf(SEQ.parser.diagram.participantsByName[a.toParticipantName]),
            g = 0,
            h = 0,
            i = d[a.fromParticipantName] || 0,
            j = d[a.toParticipantName] || 0;
        a.fromParticipantName === a.toParticipantName ? (i && (g += SEQ.entityActivation.calcActivationCenterDiff(i) + SEQ.metrics.data.activationSideWidth, h += SEQ.entityActivation.calcActivationCenterDiff(j) + SEQ.metrics.data.activationSideWidth, a.type.indexOf("--") > -1 && j > 0 && c && c.activation && (c.type === SEQ.entityActivation.Type.DEACTIVATE || c.type === SEQ.entityActivation.Type.DEACTIVATE_AFTER) && (a.deactivateResponse = !0)), "undefined" == typeof a.fromActivationXDiffOriginal && (a.fromActivationXDiffOriginal = a.fromActivationXDiff)) : e < f ? (i && (g += SEQ.entityActivation.calcActivationCenterDiff(i) + SEQ.metrics.data.activationSideWidth), j && (h += SEQ.entityActivation.calcActivationCenterDiff(j) - SEQ.metrics.data.activationSideWidth)) : (i && (g += SEQ.entityActivation.calcActivationCenterDiff(i) - SEQ.metrics.data.activationSideWidth), j && (h += SEQ.entityActivation.calcActivationCenterDiff(j) + SEQ.metrics.data.activationSideWidth)), b ? (b.fromParticipantName === a.fromParticipantName && (a.fromActivationXDiff = g), b.fromParticipantName === a.toParticipantName && (a.toActivationXDiff = h)) : (a.fromActivationXDiff = g, a.toActivationXDiff = h)
    }

    function h(a) {
        for (var b = 0; b < a.length; b++) {
            var c = a[b];
            if (c) return c
        }
    }

    function i(a, b, c) {
        var d, e, f = SEQ.parser.diagram;
        if (f.entries.length > 0)
            for (var g = f.entries.length - 1; g >= 0; g--) {
                var h = f.entries[g];
                if (h && h.type) {
                    d = h, e = d.type.trim().replace(E, "");
                    break
                }
            }
        var i = a.trim().replace(E, "");
        if (d && d.linearEnabled && C.exec(e) && e === i && d.toParticipantName === b) {
            var j = f.participantsByName,
                k = f.participants,
                l = j[d.fromParticipantName],
                m = j[d.toParticipantName],
                n = j[b],
                o = j[c],
                p = k.indexOf(l),
                q = k.indexOf(m),
                r = k.indexOf(n),
                s = k.indexOf(o);
            if (p < q && (r <= s || !o) || p > q && r >= s) return !0
        }
        return !1
    }

    function j(a) {
        var b = SEQ.parser.diagram.participantsByName[a.fromParticipantName].posX,
            c = SEQ.parser.diagram.participantsByName[a.toParticipantName].posX;
        return a.fromParticipantName === a.toParticipantName ? b += "undefined" == typeof a.fromActivationXDiffOriginal ? a.fromActivationXDiff : a.fromActivationXDiffOriginal : (b += a.fromActivationXDiff, a.type.indexOf("x") > -1 && (c > b ? c -= SEQ.metrics.data.messageFailurePadding : c += SEQ.metrics.data.messageFailurePadding)), a.participantToCreate ? c > b ? c -= a.participantToCreate.width / 2 : c += a.participantToCreate.width / 2 : c += a.toActivationXDiff, {
            fromX: b,
            toX: c
        }
    }

    function k(a, b, d, e) {
        var f, g;
        if (e) f = a.fromPosX, g = a.toPosX;
        else {
            var h = j(a);
            f = h.fromX, g = h.toX
        }
        var i, k, l, n, o = f > g ? g : f,
            p = a.fromParticipantName === a.toParticipantName && Math.abs(f - g) < SEQ.metrics.data.messageCreatorInteractionMargin + a.fromActivationXDiff;
        if (p) {
            if (i = g + SEQ.metrics.data.messageArrowWidth + SEQ.metrics.data.textPadding, k = a.position.posY - a.totalHeight, l = a.position.posY, a.delayHeight) {
                var q = c(a);
                n = q.angle
            }
        } else {
            var r = Math.abs(f - g);
            if (a.participantToCreate) {
                l = a.position.posY - a.participantToCreate.height / 2, k = a.delayHeight ? a.position.posY - a.totalHeight + SEQ.metrics.data.participantBoxLineWeight / 2 : l - a.textData.height;
                var s = l - SEQ.parser.diagram.participantMaxHeight + a.participantToCreate.height / 2 - SEQ.metrics.data.participantTypeLineWeight / 2;
                SEQ.entityParticipant.paintParticipant(a.participantToCreate, b, s)
            } else k = a.position.posY - a.totalHeight, l = a.position.posY;
            if (a.delayHeight) {
                var t = c(a);
                n = t.angle, t.availableHeight > a.textData.height && (k += t.availableHeight - a.textData.height)
            }
            i = o + r / 2 - a.textData.width / 2
        }
        var u = "white";
        SEQ.parser.diagram.participantGroups.length ? u = !!a.enclosingFragmentColor && (a.enclosingFragmentColor ? a.enclosingFragmentColor : "white") : a.enclosingFragmentColor ? u = a.enclosingFragmentColor ? a.enclosingFragmentColor : "white" : SEQ.parser.diagram.frame && SEQ.parser.diagram.frame.backgroundColor && (u = SEQ.parser.diagram.frame.backgroundColor), SEQ.textUtil.fillText(b, d, a.textData.parsedLines, i, k, a.autoNumber, a.textData.autoNumberWidth, u), SEQ.parser.diagram.frame && (SEQ.entityParticipant.isSpecialParticipantLeftName(a.fromParticipantName) && (f -= SEQ.metrics.data.frameMargin), SEQ.entityParticipant.isSpecialParticipantLeftName(a.toParticipantName) && (g -= SEQ.metrics.data.frameMargin), SEQ.entityParticipant.isSpecialParticipantRightName(a.toParticipantName) && (g += SEQ.metrics.data.frameMargin), SEQ.entityParticipant.isSpecialParticipantRightName(a.fromParticipantName) && (f += SEQ.metrics.data.frameMargin)), d ? m(b, a.type, l, f, g, p, a.deactivateResponse, a.delayHeight, n, a.weight) : m(b, a.type, l, f, g, p, a.deactivateResponse, a.delayHeight, n, a.weight, a.color)
    }

    function l(a) {
        return a.indexOf(">") > -1 && a.indexOf("<") > -1
    }

    function m(a, b, c, d, e, f, g, h, i, j, k) {
        a.save(), k && (a.strokeStyle = k, a.fillStyle = k), j || (j = 1), a.lineWidth = SEQ.metrics.data.diagramLineWeight * j, a.beginPath(), b.indexOf("--") > -1 && void 0 !== a.setLineDash && a.setLineDash([SEQ.metrics.data.messageLineDashWidth]);
        var m, p = d < e && !f,
            q = b.indexOf("x") > -1,
            r = b.indexOf(">>") > -1 || b.indexOf("<<") > -1;
        if (m = r ? 1.5 * a.lineWidth : SEQ.metrics.data.messageArrowWidth - SEQ.metrics.data.messageArrowLineNegativeMargin, i && (m = Math.cos(i) * m), f) {
            var s = SEQ.metrics.data.messageSelfRefHeight,
                t = SEQ.metrics.data.messageSelfRefWidth + Math.abs(d - e),
                u = c - s,
                v = 0;
            i && (v = h), a.moveTo(d, u - v), a.lineTo(d + t, u - v), a.lineTo(d + t, c - v);
            var w = c;
            g && (e -= SEQ.metrics.data.activationSideWidth), q ? a.lineTo(e + SEQ.metrics.data.messageFailureSize / 2 + SEQ.metrics.data.messageFailurePadding, w) : (i && (w -= m * Math.tan(i)), a.lineTo(e + m, w)), a.stroke()
        } else {
            var x = d;
            l(b) && (x = e > d ? d + m : d - m);
            var y = c;
            i ? (a.moveTo(x, c - h), q || (y -= m * Math.tan(i))) : a.moveTo(x, c), q ? p ? a.lineTo(e - SEQ.metrics.data.messageFailureSize / 2, y) : a.lineTo(e + SEQ.metrics.data.messageFailureSize / 2, y) : p ? a.lineTo(e - m, y) : a.lineTo(e + m, y), a.stroke()
        }
        q ? n(c, e, a, f, p) : (o(c, p, e, a, r, i, j), l(b) && o(c, e < d, d, a, r, i, j)), a.restore()
    }

    function n(a, b, c, d, e) {
        c.setLineDash([]);
        var f = SEQ.metrics.data.messageFailureSize / 2;
        d ? b += SEQ.metrics.data.messageFailureSize / 2 + SEQ.metrics.data.messageFailurePadding : e ? b -= SEQ.metrics.data.messageFailureSize / 2 : b += SEQ.metrics.data.messageFailureSize / 2, c.beginPath(), c.moveTo(b - f, a - f), c.lineTo(b + f, a + f), c.moveTo(b - f, a + f), c.lineTo(b + f, a - f), c.stroke()
    }

    function o(a, b, c, d, e, f) {
        d.setLineDash([]);
        var g = SEQ.metrics.data.messageArrowWidth,
            h = c;
        d.translate(h, a), f && (b || (f = -f), d.rotate(f)), d.translate(-h, -a), d.beginPath();
        var i = 0,
            j = 0;
        e && (i = -Math.cos(F) * d.lineWidth * 2, j = Math.tan(F) * (i / 4)), b ? (d.moveTo(c - g - i / 4, a - g / 2 - j), d.lineTo(c - i, a), d.lineTo(c - g - i / 4, a + g / 2 + j)) : (d.moveTo(c + g + i / 4, a - g / 2 - j), d.lineTo(c + i, a), d.lineTo(c + g + i / 4, a + g / 2 + j)), e ? d.stroke() : (d.closePath(), d.fill()), f && d.rotate(-f)
    }

    function p(a) {
        var b, c, d, e, f = j(a),
            g = f.fromX,
            h = f.toX;
        if (a.participantToCreate) {
            var i, k;
            return g < h ? (i = h, k = h + a.participantToCreate.width, h += a.participantToCreate.width, g += SEQ.metrics.data.messageInteractionMargin) : (i = h - a.participantToCreate.width, k = h, h -= a.participantToCreate.width, g -= SEQ.metrics.data.messageInteractionMargin), g < h ? (b = g, c = h) : (b = h, c = g), d = a.position.posY, e = a.position.posY - a.totalHeight, {
                main: {
                    startX: b,
                    endX: c,
                    startY: d,
                    endY: e
                },
                participantToCreate: {
                    startX: i,
                    endX: k,
                    startY: d,
                    endY: e
                }
            }
        }
        return a.fromParticipantName === a.toParticipantName ? (b = g, c = h + a.totalWidth - SEQ.metrics.data.messageSelfRefSideMargin) : g < h ? (b = g, c = h) : (b = h, c = g), b += SEQ.metrics.data.messageInteractionMargin, c -= SEQ.metrics.data.messageInteractionMargin, d = a.position.posY + SEQ.metrics.data.collisionBleed, e = a.position.posY - a.totalHeight, {
            main: {
                startX: b,
                endX: c,
                startY: d,
                endY: e
            }
        }
    }

    function q() {
        var a = this.collision(this).main,
            b = [];
        if (this.collision(this).participantToCreate) {
            var c = j(this);
            c.fromX < c.toX ? b.push({
                minX: a.startX,
                maxX: a.startX + SEQ.metrics.data.entryMoverXCollisionWidth - SEQ.metrics.data.messageInteractionMargin,
                minY: a.endY,
                maxY: a.startY,
                type: "ew-resize"
            }, {
                minX: a.startX + SEQ.metrics.data.entryMoverXCollisionWidth - SEQ.metrics.data.messageInteractionMargin,
                maxX: a.endX,
                minY: a.endY,
                maxY: a.startY,
                type: "move"
            }) : b.push({
                minX: a.endX - SEQ.metrics.data.entryMoverXCollisionWidth + SEQ.metrics.data.messageInteractionMargin,
                maxX: a.endX,
                minY: a.endY,
                maxY: a.startY,
                type: "ew-resize"
            }, {
                minX: a.startX,
                maxX: a.endX - SEQ.metrics.data.entryMoverXCollisionWidth + SEQ.metrics.data.messageInteractionMargin,
                minY: a.endY,
                maxY: a.startY,
                type: "move"
            })
        } else b.push({
            minX: a.startX,
            maxX: a.startX + SEQ.metrics.data.entryMoverXCollisionWidth - SEQ.metrics.data.messageInteractionMargin,
            minY: a.endY,
            maxY: a.startY,
            type: "ew-resize"
        }, {
            minX: a.endX - SEQ.metrics.data.entryMoverXCollisionWidth + SEQ.metrics.data.messageInteractionMargin,
            maxX: a.endX,
            minY: a.endY,
            maxY: a.startY,
            type: "ew-resize"
        }, {
            minX: a.startX + SEQ.metrics.data.entryMoverXCollisionWidth - SEQ.metrics.data.messageInteractionMargin,
            maxX: a.endX - SEQ.metrics.data.entryMoverXCollisionWidth + SEQ.metrics.data.messageInteractionMargin,
            minY: a.endY,
            maxY: a.startY,
            type: "move"
        });
        return b
    }

    function r(a, b, c, d) {
        return w(a) ? b + a + c + ":" + d.replace(/\n/g, "\\n") : c + a + b + ":" + d.replace(/\n/g, "\\n")
    }

    function s(a) {
        var b = t(a.match, G.DELAY_RIGHT);
        b = b ? "(" + b + ")" : b;
        var c = t(a.match, G.CREATE_RIGHT),
            d = t(a.match, G.CREATE_LEFT),
            e = t(a.match, G.DELAY_LEFT);
        e = e ? "(" + e + ")" : e;
        var f = t(a.match, G.CREATE_DUAL_LEFT),
            g = t(a.match, G.CREATE_DUAL_LEFT);
        return w(a.type) && !f ? a.fromParticipantName + a.type + b + c + g + a.toParticipantName + ":" + SEQ.textUtil.buildSourceText(a.textData) : a.toParticipantName + f + d + e + a.type + a.fromParticipantName + ":" + SEQ.textUtil.buildSourceText(a.textData)
    }

    function t(a, b) {
        return a[b] ? a[b] : ""
    }

    function u(a) {
        return null != C.exec(a)
    }

    function v(a) {
        var b = D.exec(a);
        if (null != b && x(b)) return y(b).indexOf(">") > -1 ? b[G.PARTICIPANT_2] : b[G.PARTICIPANT_1]
    }

    function w(a) {
        return />|-.*x/.exec(a)
    }

    function x(a) {
        return a[G.CREATE_LEFT] || a[G.CREATE_RIGHT] || a[G.CREATE_DUAL_LEFT] || a[G.CREATE_DUAL_RIGHT]
    }

    function y(a) {
        return h([a[G.TYPE_RIGHT], a[G.TYPE_LEFT], a[G.TYPE_DUAL]])
    }
    var z = "(?:\\(([0-9]+)\\))?",
        A = "(?::([0-9]+(?:\\.[0-9]+)?))?",
        B = "(?:\\s*(--?" + SEQ.entityParticipant.colorGroup + A + "(?:>?>|x))" + z + "\\s*(\\*?)\\s*|\\s*(\\*?)\\s*" + z + "((?:x|<<?)" + SEQ.entityParticipant.colorGroup + A + "-?-)\\s*|\\s*(\\*?)\\s*(<<?-?-" + SEQ.entityParticipant.colorGroup + A + ">?>)\\s*(\\*?)\\s*)",
        C = new RegExp(B),
        D = new RegExp("^\\s*" + SEQ.entityParticipant.nameGroup + B + SEQ.entityParticipant.nameGroup + "\\s?:\\s?(.*)"),
        E = new RegExp(SEQ.entityParticipant.colorGroupMandatory);
    const F = 46.15;
    var G = {
            PARTICIPANT_1: 1,
            TYPE_RIGHT: 2,
            COLOR_HEX_1: 3,
            COLOR_NAME_1: 4,
            WEIGHT_1: 5,
            DELAY_RIGHT: 6,
            CREATE_RIGHT: 7,
            CREATE_LEFT: 8,
            DELAY_LEFT: 9,
            TYPE_LEFT: 10,
            COLOR_HEX_2: 11,
            COLOR_NAME_2: 12,
            WEIGHT_2: 13,
            CREATE_DUAL_LEFT: 14,
            TYPE_DUAL: 15,
            COLOR_HEX_3: 16,
            COLOR_NAME_3: 17,
            WEIGHT_3: 18,
            CREATE_DUAL_RIGHT: 19,
            PARTICIPANT_2: 20,
            TEXT: 21
        },
        H = {
            REQ_FORWARD_SYNC: "->",
            RESP_FORWARD_SYNC: "-->",
            REQ_FORWARD_ASYNC: "->>",
            RESP_FORWARD_ASYNC: "-->>",
            REQ_BACKWARD_SYNC: "<-",
            RESP_BACKWARD_SYNC: "<--",
            REQ_BACKWARD_ASYNC: "<<-",
            RESP_BACKWARD_ASYNC: "<<--"
        };
    return {
        parse: a,
        paint: k,
        collision: p,
        build: r,
        paintArrowHead: o,
        isType: u,
        createdParticipant: v,
        lineWeightGroup: A,
        Type: H,
        regExpArrow: C,
        regExp: D,
        groups: G
    }
}();
var SEQ = SEQ || {};
SEQ.entityNoteBoxLeftRight = function() {
    function a(a, j) {
        var l = m.exec(a);
        if (null != l && l.length > n.TEXT) {
            var o = SEQ.textUtil.parseTextData(l[n.TEXT]),
                p = l[n.TYPE],
                q = l[n.PARTICIPANT_FROM],
                r = l[n.COLOR_NAME],
                s = l[n.COLOR_HEX],
                t = r ? r : s,
                u = o.width + 2 * SEQ.metrics.data.textPadding + 2 * SEQ.metrics.data.boxBleed + 2 * SEQ.metrics.data.entryMarginSide,
                v = l[n.SIDE];
            return {
                type: p,
                fromParticipantName: q,
                side: v,
                textData: o,
                color: t,
                parallel: j,
                totalHeight: o.height + 2 * SEQ.metrics.data.textPadding,
                totalWidth: u,
                topMargin: SEQ.metrics.data.entityMarginTop,
                position: {},
                raw: a,
                paint: g,
                updatePos: b,
                collision: h,
                collisionTypeAreas: i,
                buildRaw: k,
                calcPosX: f,
                updateActivationPosDiff: e,
                updateEnclosingFragments: d,
                updateParticipantWidths: c
            }
        }
    }

    function b(a, b, c) {
        a.position.posY = b, a.fromPosX = c
    }

    function c(a) {
        p.LEFT === a.side ? SEQ.entityParticipant.storeParticipantWithDefinedWidths(null, a.fromParticipantName, a.totalWidth, 0) : SEQ.entityParticipant.storeParticipantWithDefinedWidths(null, a.fromParticipantName, 0, a.totalWidth)
    }

    function d(a) {
        p.LEFT === a.side ? SEQ.entityFragment.storeEnclosedEntriesData(a.fromParticipantName, a.totalWidth, 0, Math.abs(a.fromActivationXDiff), 0, a.snapshot.ongoingFragments) : SEQ.entityFragment.storeEnclosedEntriesData(a.fromParticipantName, 0, a.totalWidth, 0, a.fromActivationXDiff, a.snapshot.ongoingFragments)
    }

    function e(a) {
        var b = a.snapshot.numberOfOngoingActivationsPerParticipant,
            c = 0,
            d = b[a.fromParticipantName] || 0;
        a.side === SEQ.entityNoteBoxLeftRight.NotePosition.LEFT && d ? c -= SEQ.metrics.data.activationSideWidth : a.side === SEQ.entityNoteBoxLeftRight.NotePosition.RIGHT && d && (c += SEQ.entityActivation.calcActivationCenterDiff(d) + SEQ.metrics.data.activationSideWidth), a.fromActivationXDiff = c
    }

    function f(a) {
        var b = SEQ.parser.diagram.participantsByName[a.fromParticipantName].posX;
        return a.fromActivationXDiff && (b += a.fromActivationXDiff), {
            fromX: b
        }
    }

    function g(a, b, c, d) {
        var e;
        if (d) e = a.fromPosX;
        else {
            var g = f(a);
            e = g.fromX
        }
        b.beginPath();
        var h, i = SEQ.metrics.data.entryMarginSide;
        a.side === SEQ.entityNoteBoxLeftRight.NotePosition.LEFT ? (h = e - a.totalWidth + i, b.moveTo(e, a.position.posY - a.totalHeight / 2), b.lineTo(e - i, a.position.posY - a.totalHeight / 2)) : a.side === SEQ.entityNoteBoxLeftRight.NotePosition.RIGHT && (h = e + i, b.moveTo(e, a.position.posY - a.totalHeight / 2), b.lineTo(e + i, a.position.posY - a.totalHeight / 2)), SEQ.entityNoteBoxOver.paintNoteOrBox(a, b, h, a.totalWidth - 2 * i);
        var j = h - i + a.totalWidth / 2 - a.textData.width / 2,
            k = a.position.posY - a.totalHeight / 2 - a.textData.height / 2;
        SEQ.textUtil.fillText(b, c, a.textData.parsedLines, j, k)
    }

    function h(a) {
        var b, c, d = f(a),
            e = d.fromX,
            g = SEQ.metrics.data.entryMarginSide;
        return a.side === SEQ.entityNoteBoxLeftRight.NotePosition.LEFT ? (b = e - a.totalWidth, c = e) : a.side === SEQ.entityNoteBoxLeftRight.NotePosition.RIGHT && (b = e, c = e + a.totalWidth), b += g, c -= g, {
            main: {
                startX: b,
                endX: c,
                startY: a.position.posY,
                endY: a.position.posY - a.totalHeight
            }
        }
    }

    function i() {
        var a = this.collision(this).main,
            b = [];
        return b.push({
            minX: a.startX,
            maxX: a.endX,
            minY: a.endY,
            maxY: a.startY,
            type: "move"
        }), b
    }

    function j(a, b, c, d) {
        return a + " " + b + " " + c + ":" + d.replace(/\n/g, "\\n")
    }

    function k(a) {
        var b = "";
        return a.color && (b = a.color.indexOf("#") > -1 ? " " + a.color : " #" + a.color), a.type + " " + a.side + " " + a.fromParticipantName + b + ":" + SEQ.textUtil.buildSourceText(a.textData)
    }

    function l(a) {
        return o.NOTE === a || o.BOX === a || o.ABOX === a || o.RBOX === a || o.ABOX_LEFT === a || o.ABOX_RIGHT === a || SEQ.entityNoteBoxOver.Type.REF === a
    }
    var m = new RegExp("^\\s*(note|box|rbox|abox|aboxleft|aboxright)\\s(left\\sof|right\\sof)\\s" + SEQ.entityParticipant.nameGroup + "\\s?" + SEQ.entityParticipant.colorGroup + "\\s?:\\s?(.*)"),
        n = {
            TYPE: 1,
            SIDE: 2,
            PARTICIPANT_FROM: 3,
            COLOR_HEX: 4,
            COLOR_NAME: 5,
            TEXT: 6
        },
        o = {
            NOTE: "note",
            BOX: "box",
            RBOX: "rbox",
            ABOX: "abox",
            ABOX_LEFT: "aboxleft",
            ABOX_RIGHT: "aboxright"
        },
        p = {
            LEFT: "left of",
            RIGHT: "right of"
        };
    return {
        parse: a,
        paint: g,
        collision: h,
        build: j,
        regExp: m,
        Type: o,
        isType: l,
        NotePosition: p,
        groups: n
    }
}();
var SEQ = SEQ || {};
SEQ.entityNoteBoxOver = function() {
    function a(a, g) {
        var h = r.exec(a);
        if (null != h && h.length > s.TEXT) {
            var i, j = SEQ.textUtil.parseTextData(h[s.TEXT]),
                k = h[s.TYPE],
                l = h[s.PARTICIPANT_TO],
                m = h[s.PARTICIPANT_FROM],
                p = h[s.COLOR_NAME],
                v = h[s.COLOR_HEX],
                w = p ? p : v;
            i = l ? j.width + 2 * SEQ.metrics.data.textPadding : j.width + 2 * SEQ.metrics.data.textPadding + 2 * SEQ.metrics.data.boxBleed + 2 * SEQ.metrics.data.entryMarginSide;
            var x = j.height + 2 * SEQ.metrics.data.textPadding;
            return t.REF === k && (x += SEQ.metrics.data.fragmentHeight), {
                type: k,
                notePosition: u.OVER,
                fromParticipantName: m,
                toParticipantName: l,
                side: h[s.SIDE],
                textData: j,
                color: w,
                parallel: g,
                totalHeight: x,
                totalWidth: i,
                topMargin: SEQ.metrics.data.entityMarginTop,
                position: {},
                raw: a,
                paint: f,
                updatePos: b,
                collision: n,
                collisionTypeAreas: o,
                buildRaw: q,
                calcPosX: e,
                updateEnclosingFragments: d,
                updateParticipantWidths: c
            }
        }
    }

    function b(a, b, c, d) {
        a.position.posY = b, a.fromPosX = c, a.toPosX = d
    }

    function c(a) {
        if (a.toParticipantName) SEQ.entityParticipant.storeParticipantsAndCalcWidths(null, a.fromParticipantName, a.toParticipantName, a.totalWidth);
        else {
            var b = a.totalWidth / 2;
            SEQ.entityParticipant.storeParticipantWithDefinedWidths(null, a.fromParticipantName, b, b)
        }
    }

    function d(a) {
        if (a.toParticipantName) SEQ.entityFragment.storeEnclosedEntriesData(a.fromParticipantName, 0, 0, 0, 0, a.snapshot.ongoingFragments), SEQ.entityFragment.storeEnclosedEntriesData(a.toParticipantName, 0, 0, 0, 0, a.snapshot.ongoingFragments);
        else {
            var b = a.totalWidth / 2;
            SEQ.entityFragment.storeEnclosedEntriesData(a.fromParticipantName, b, b, 0, 0, a.snapshot.ongoingFragments)
        }
    }

    function e(a) {
        var b = SEQ.parser.diagram.participantsByName[a.fromParticipantName].posX,
            c = null;
        return a.toParticipantName && (c = SEQ.parser.diagram.participantsByName[a.toParticipantName].posX), {
            fromX: b,
            toX: c
        }
    }

    function f(a, b, c, d) {
        var f, h;
        if (d) f = a.fromPosX, a.toParticipantName && (h = a.toPosX);
        else {
            var i = e(a);
            f = i.fromX, h = i.toX
        }
        b.beginPath();
        var j, k, l, m, n = SEQ.metrics.data.boxBleed;
        if (h) {
            var o = h > f ? f : h;
            j = o - n, m = Math.abs(f - h) + 2 * n, k = j + m / 2 - a.textData.width / 2, l = a.position.posY - a.totalHeight / 2 - a.textData.height / 2
        } else j = f - a.totalWidth / 2 + SEQ.metrics.data.entryMarginSide, m = a.totalWidth - 2 * SEQ.metrics.data.entryMarginSide, k = f - a.textData.width / 2, l = a.position.posY - a.totalHeight / 2 - a.textData.height / 2;
        t.REF === a.type ? (b.save(), b.lineWidth = SEQ.metrics.data.fragmentLineWeight, b.font = "bold " + SEQ.main.getFontSmall(), SEQ.entityFragment.paintFragment(b, b.font, j, a.position.posY - a.totalHeight, SEQ.metrics.data.fragmentHeight, a.position.posY, j + m, a.type, a.color, null, !0), b.restore(), l += SEQ.metrics.data.fragmentHeight / 2 - SEQ.metrics.data.fragmentLineWeight / 2) : g(a, b, j, m), SEQ.textUtil.fillText(b, c, a.textData.parsedLines, k, l)
    }

    function g(a, b, c, d) {
        t.NOTE == a.type ? h(b, c, a.position.posY, a.totalHeight, d, a.color) : t.BOX == a.type ? i(b, c, a.position.posY, a.totalHeight, d, a.color) : t.RBOX == a.type ? j(b, c, a.position.posY, a.totalHeight, d, a.color) : t.ABOX == a.type ? k(b, c, a.position.posY, a.totalHeight, d, a.color) : t.ABOX_LEFT == a.type ? l(b, c, a.position.posY, a.totalHeight, d, a.color) : t.ABOX_RIGHT == a.type && m(b, c, a.position.posY, a.totalHeight, d, a.color)
    }

    function h(a, b, c, d, e, f) {
        var g = SEQ.metrics.data.boxBleed;
        a.moveTo(b, c - d), a.lineTo(b + e - g, c - d), a.lineTo(b + e, c - d + g), a.lineTo(b + e, c), a.lineTo(b, c), a.lineTo(b, c - d);
        var h = a.fillStyle;
        f ? a.fillStyle = f : a.fillStyle = "white", a.fill(), a.moveTo(b + e - g, c - d), a.lineTo(b + e - g, c - d + g), a.lineTo(b + e, c - d + g), a.fillStyle = h, a.stroke()
    }

    function i(a, b, c, d, e, f) {
        a.moveTo(b, c - d), a.lineTo(b + e, c - d), a.lineTo(b + e, c), a.lineTo(b, c), a.lineTo(b, c - d);
        var g = a.fillStyle;
        f ? a.fillStyle = f : a.fillStyle = "white", a.fill(), a.fillStyle = g, a.stroke()
    }

    function j(a, b, c, d, e, f) {
        var g = SEQ.metrics.data.boxBleed;
        a.moveTo(b, c - d + g), a.arc(b + g, c - d + g, g, Math.PI, -Math.PI / 2), a.lineTo(b + e - g, c - d), a.arc(b + e - g, c - d + g, g, -Math.PI / 2, 0), a.lineTo(b + e, c - g), a.arc(b + e - g, c - g, g, 0, Math.PI / 2), a.lineTo(b + g, c), a.arc(b + g, c - g, g, Math.PI / 2, Math.PI), a.lineTo(b, c - d + g);
        var h = a.fillStyle;
        f ? a.fillStyle = f : a.fillStyle = "white", a.fill(), a.fillStyle = h, a.stroke()
    }

    function k(a, b, c, d, e, f) {
        var g = SEQ.metrics.data.boxBleed;
        a.moveTo(b + g, c - d), a.lineTo(b + e - g, c - d), a.lineTo(b + e, c - d / 2), a.lineTo(b + e - g, c), a.lineTo(b + g, c), a.lineTo(b, c - d / 2), a.lineTo(b + g, c - d);
        var h = a.fillStyle;
        f ? a.fillStyle = f : a.fillStyle = "white", a.fill(), a.fillStyle = h, a.stroke()
    }

    function l(a, b, c, d, e, f) {
        var g = SEQ.metrics.data.boxBleed;
        a.moveTo(b + g, c - d), a.lineTo(b + e, c - d), a.lineTo(b + e, c), a.lineTo(b + g, c), a.lineTo(b, c - d / 2), a.lineTo(b + g, c - d);
        var h = a.fillStyle;
        f ? a.fillStyle = f : a.fillStyle = "white", a.fill(), a.fillStyle = h, a.stroke()
    }

    function m(a, b, c, d, e, f) {
        var g = SEQ.metrics.data.boxBleed;
        a.moveTo(b, c - d), a.lineTo(b + e - g, c - d), a.lineTo(b + e, c - d / 2), a.lineTo(b + e - g, c), a.lineTo(b, c), a.lineTo(b, c - d);
        var h = a.fillStyle;
        f ? a.fillStyle = f : a.fillStyle = "white", a.fill(), a.fillStyle = h, a.stroke()
    }

    function n(a) {
        var b, c, d = e(a),
            f = d.fromX,
            g = d.toX;
        return g ? (f < g ? (b = f, c = g) : (b = g, c = f), b -= SEQ.metrics.data.boxBleed, c += SEQ.metrics.data.boxBleed) : (b = f - a.totalWidth / 2 + SEQ.metrics.data.entryMarginSide, c = f + a.totalWidth / 2 - SEQ.metrics.data.entryMarginSide), {
            main: {
                startX: b,
                endX: c,
                startY: a.position.posY,
                endY: a.position.posY - a.totalHeight
            }
        }
    }

    function o() {
        var a = this.collision(this).main,
            b = [];
        return this.toParticipantName ? b.push({
            minX: a.startX,
            maxX: a.startX + SEQ.metrics.data.entryMoverXCollisionWidth + SEQ.metrics.data.boxBleed,
            minY: a.endY,
            maxY: a.startY,
            type: "ew-resize"
        }, {
            minX: a.endX - SEQ.metrics.data.entryMoverXCollisionWidth - SEQ.metrics.data.boxBleed,
            maxX: a.endX,
            minY: a.endY,
            maxY: a.startY,
            type: "ew-resize"
        }, {
            minX: a.startX + SEQ.metrics.data.entryMoverXCollisionWidth + SEQ.metrics.data.boxBleed,
            maxX: a.endX - SEQ.metrics.data.entryMoverXCollisionWidth - SEQ.metrics.data.boxBleed,
            minY: a.endY,
            maxY: a.startY,
            type: "move"
        }) : b.push({
            minX: a.startX,
            maxX: a.startX + SEQ.metrics.data.entryMoverXCollisionWidth,
            minY: a.endY,
            maxY: a.startY,
            type: "ew-resize"
        }, {
            minX: a.endX - SEQ.metrics.data.entryMoverXCollisionWidth,
            maxX: a.endX,
            minY: a.endY,
            maxY: a.startY,
            type: "ew-resize"
        }, {
            minX: a.startX + SEQ.metrics.data.entryMoverXCollisionWidth,
            maxX: a.endX - SEQ.metrics.data.entryMoverXCollisionWidth,
            minY: a.endY,
            maxY: a.startY,
            type: "move"
        }), b
    }

    function p(a, b, c) {
        return a + " " + u.OVER + " " + b + ":" + c.replace(/\n/g, "\\n")
    }

    function q(a) {
        var b = "";
        a.color && (b = a.color.indexOf("#") > -1 ? " " + a.color : " #" + a.color);
        var c = a.toParticipantName ? "," + a.toParticipantName : "";
        return a.type + " " + a.side + " " + a.fromParticipantName + c + b + ":" + SEQ.textUtil.buildSourceText(a.textData)
    }
    var r = new RegExp("^\\s*(note|box|rbox|abox|ref|aboxleft|aboxright)\\s(over)\\s" + SEQ.entityParticipant.nameGroup + "(?:,\\s?" + SEQ.entityParticipant.nameGroup + ")?\\s?" + SEQ.entityParticipant.colorGroup + "\\s?:\\s?(.*)"),
        s = {
            TYPE: 1,
            SIDE: 2,
            PARTICIPANT_FROM: 3,
            PARTICIPANT_TO: 4,
            COLOR_HEX: 5,
            COLOR_NAME: 6,
            TEXT: 7
        },
        t = {
            NOTE: "note",
            BOX: "box",
            RBOX: "rbox",
            ABOX: "abox",
            ABOX_LEFT: "aboxleft",
            ABOX_RIGHT: "aboxright",
            REF: "ref"
        },
        u = {
            OVER: "over"
        };
    return {
        parse: a,
        paint: f,
        collision: n,
        build: p,
        paintNoteOrBox: g,
        Type: t,
        NotePosition: u,
        regExp: r,
        groups: s
    }
}();
var SEQ = SEQ || {};
SEQ.entityAutoNumber = function() {
    function a(a) {
        var d = b.exec(a);
        if (null != d && d.length > c.STATUS) {
            var e, f = d[c.STATUS];
            if ("on" === f) var g = !0;
            else "off" === f ? g = !1 : isNaN(f) ? g = !0 : (g = !0, e = f);
            return {
                raw: a,
                enabled: g,
                value: e
            }
        }
    }
    var b = new RegExp("^\\s*(autonumber)\\s?(on|off|[0-9]+)?"),
        c = {
            AUTO_NUMBER: 1,
            STATUS: 2
        },
        d = {
            AUTO_NUMBER: "autonumber"
        };
    return {
        parse: a,
        regExp: b,
        groups: c,
        Type: d
    }
}();
var SEQ = SEQ || {};
SEQ.entityLinear = function() {
    function a(a) {
        var d = b.exec(a);
        if (null != d && d.length > c.STATUS) {
            var e = d[c.STATUS];
            if ("on" === e) var f = !0;
            else f = "off" !== e && "end" !== e;
            return {
                raw: a,
                enabled: f
            }
        }
    }
    var b = new RegExp("^\\s*(linear)\\s?(on|off|end)?"),
        c = {
            LINEAR: 1,
            STATUS: 2
        },
        d = {
            LINEAR: "linear"
        };
    return {
        parse: a,
        regExp: b,
        groups: c,
        Type: d
    }
}();
var SEQ = SEQ || {};
SEQ.entityFragment = function() {
    function a(a, b) {
        return a ? a : b
    }

    function b(b, e) {
        var f = SEQ.parser.diagram.ongoingFragments,
            g = C.exec(b);
        if (null != g && g.length > D.OPERATOR) {
            var h = g[D.TEXT],
                i = g[D.OPERATOR],
                j = g[D.GROUP_LABEL];
            j && (j = j.trim(), i = E.GROUP, h = g[D.GROUP_CONDITION]);
            var k = a(g[D.COLOR_NAME_FRAGMENT], g[D.COLOR_HEX_FRAGMENT]);
            k || (k = a(g[D.COLOR_NAME_FRAGMENT_GROUP], g[D.COLOR_HEX_FRAGMENT_GROUP]));
            var l = a(g[D.COLOR_NAME_LABEL], g[D.COLOR_HEX_LABEL]);
            if (l || (l = a(g[D.COLOR_NAME_LABEL_GROUP], g[D.COLOR_HEX_LABEL_GROUP])), E.END !== i) {
                if (E.ELSE === i) {
                    for (var m = {}, q = !1, r = f.length - 1; r >= 0; r--) {
                        var s = f[r];
                        if (s.type == E.ALT) {
                            var w = {
                                position: m,
                                totalHeight: SEQ.metrics.data.fragmentHeight,
                                text: h
                            };
                            s.elseGuards.push(w), q = !0;
                            break
                        }
                    }
                    return q ? {
                        type: i,
                        fragment: s,
                        elseGuard: w,
                        totalHeight: SEQ.metrics.data.fragmentHeight,
                        topMargin: SEQ.metrics.data.entityMarginTop,
                        position: m,
                        raw: b,
                        paint: o,
                        updatePos: function(a, b) {
                            a.elseGuard.position.posY = b
                        },
                        collision: t,
                        collisionTypeAreas: u
                    } : {
                        raw: b
                    }
                }
                if (E.THREAD === i) {
                    for (var y = {}, z = !1, A = f.length - 1; A >= 0; A--) {
                        var B = f[A];
                        if (B.type == E.PAR) {
                            var F = {
                                position: y,
                                totalHeight: SEQ.metrics.data.fragmentHeight,
                                text: h
                            };
                            B.threads.push(F), z = !0;
                            break
                        }
                    }
                    return z ? {
                        type: i,
                        fragment: B,
                        thread: F,
                        totalHeight: SEQ.metrics.data.fragmentHeight,
                        topMargin: SEQ.metrics.data.entityMarginTop,
                        position: y,
                        raw: b,
                        paint: o,
                        updatePos: function(a, b) {
                            a.thread.position.posY = b
                        },
                        collision: t,
                        collisionTypeAreas: u
                    } : {
                        raw: b
                    }
                }
                if (k) {
                    var G = SEQ.main.getMeasurementContext(),
                        H = G.fillStyle;
                    G.fillStyle = k;
                    var I = d(G.fillStyle),
                        J = c(I, .8);
                    G.fillStyle = H
                }
                for (var K = {}, L = {
                        type: i,
                        groupLabel: j,
                        text: h,
                        colorFragment: k,
                        colorLabel: l,
                        backgroundColor: J,
                        font: "bold " + SEQ.main.getFontSmall(),
                        enclosedEntitiesData: [],
                        subFragments: [],
                        elseGuards: [],
                        threads: [],
                        lineNumber: e,
                        leftWidth: 0,
                        rightWidth: 0,
                        topMargin: SEQ.metrics.data.entityMarginTop,
                        startPosition: K,
                        totalHeight: SEQ.metrics.data.fragmentHeight,
                        raw: b
                    }, M = 0; M < f.length; M++) {
                    var N = f[M];
                    N.subFragments.push(L)
                }
                if (f.push(L), E.EXPANDABLE_PLUS === i) {
                    h || (h = "");
                    var O = SEQ.textUtil.parseTextData(h),
                        P = {
                            type: i,
                            fragment: L,
                            textData: O,
                            totalHeight: O.height + 2 * SEQ.metrics.data.textPadding + SEQ.metrics.data.fragmentHeight,
                            topMargin: SEQ.metrics.data.entityMarginTop,
                            position: K,
                            raw: b,
                            collision: x,
                            collisionTypeAreas: v,
                            paint: n
                        };
                    return L.startEntry = P, P
                }
                return {
                    type: i,
                    fragment: L,
                    totalHeight: L.totalHeight,
                    topMargin: L.topMargin,
                    position: K,
                    raw: b,
                    paint: o,
                    paintLayer2: p,
                    updatePos: function(a, b) {
                        a.fragment.startPosition.posY = b
                    },
                    collision: t,
                    collisionTypeAreas: u
                }
            }
            if (f.length > 0) {
                var Q = f.pop();
                SEQ.parser.diagram.fragments.push(Q);
                var R = {};
                return Q.endPosition = R, Q.type === SEQ.entityFragment.Type.EXPANDABLE_PLUS ? {
                    type: i,
                    fragment: Q,
                    totalHeight: 0,
                    topMargin: 0,
                    position: R,
                    raw: b
                } : {
                    type: i,
                    fragment: Q,
                    totalHeight: 0,
                    topMargin: SEQ.metrics.data.entityMarginTop,
                    position: R,
                    raw: b,
                    paint: o,
                    updatePos: function(a, b) {
                        a.fragment.endPosition.posY = b
                    },
                    collision: t,
                    collisionTypeAreas: u
                }
            }
        }
    }

    function c(a, b) {
        var c = b < 0 ? 0 : 255,
            d = b < 0 ? b * -1 : b,
            e = parseInt(a[0]),
            f = parseInt(a[1]),
            g = parseInt(a[2]);
        return "rgb(" + (Math.round((c - e) * d) + e) + "," + (Math.round((c - f) * d) + f) + "," + (Math.round((c - g) * d) + g) + ")"
    }

    function d(a) {
        var b = parseInt(a.substring(1), 16),
            c = (16711680 & b) >> 16,
            d = (65280 & b) >> 8,
            e = 255 & b;
        return [c, d, e]
    }

    function e(a) {
        for (var b = SEQ.parser.diagram.ongoingFragments, c = 0; c < b.length; c++) {
            var d = b[c];
            d.type === SEQ.entityFragment.Type.EXPANDABLE_PLUS && a.fragment != d && (a.enclosingCollapsedFragment = d)
        }
    }

    function f() {
        for (var a = SEQ.parser.diagram.ongoingFragments, b = 0; b < a.length; b++) {
            var c = a[b];
            if (c.type === SEQ.entityFragment.Type.EXPANDABLE_PLUS) return !0
        }
        return !1
    }

    function g(a, b, c, d, e, f) {
        function g(a) {
            for (var b = 0; b < i.enclosedEntitiesData.length; b++) {
                var c = i.enclosedEntitiesData[b];
                if (a == c.participantName) return c
            }
        }
        for (var h = 0; h < f.length; h++) {
            var i = f[h],
                j = g(a);
            j ? (b > j.entityLeftWidth && (j.entityLeftWidth = b), c > j.entityRightWidth && (j.entityRightWidth = c), d > j.timelineLeftWidth && (j.timelineLeftWidth = d), e > j.timelineRightWidth && (j.timelineRightWidth = e)) : i.enclosedEntitiesData.push({
                participantName: a,
                entityLeftWidth: b,
                entityRightWidth: c,
                timelineLeftWidth: d,
                timelineRightWidth: e
            })
        }
    }

    function h(a) {
        if (a.toParticipantName) SEQ.entityParticipant.storeParticipantsAndCalcWidths(null, a.fromParticipantName, a.toParticipantName, a.totalWidth);
        else {
            var b = a.totalWidth / 2;
            SEQ.entityParticipant.storeParticipantWithDefinedWidths(null, a.fromParticipantName, b, b)
        }
    }

    function i() {
        for (var a = k(), b = SEQ.parser.diagram.fragments, c = 0; c < b.length; c++) {
            for (var d = b[c], e = Number.POSITIVE_INFINITY, f = Number.NEGATIVE_INFINITY, g = null, i = null, l = 0; l < d.enclosedEntitiesData.length; l++) {
                var m = d.enclosedEntitiesData[l],
                    n = a[m.participantName];
                n < e && (e = n, g = m), n > f && (f = n, i = m)
            }
            if (!g) {
                var o = SEQ.parser.diagram.participants[0];
                g = {
                    participantName: o.name,
                    entityLeftWidth: o.entityLeftWidth,
                    entityRightWidth: o.entityRightWidth,
                    timelineLeftWidth: o.timelineLeftWidth,
                    timelineRightWidth: o.timelineRightWidth
                }
            }
            if (!i) {
                var p = SEQ.parser.diagram.participants[SEQ.parser.diagram.participants.length - 1];
                i = {
                    participantName: p.name,
                    entityLeftWidth: p.entityLeftWidth,
                    entityRightWidth: p.entityRightWidth,
                    timelineLeftWidth: o.timelineLeftWidth,
                    timelineRightWidth: o.timelineRightWidth
                }
            }
            if (d.participantDataMin = g, d.participantDataMax = i, d.type === SEQ.entityFragment.Type.EXPANDABLE_PLUS) {
                var q = d.startEntry.textData.width,
                    r = SEQ.metrics.calcWidth(d.type, d.font);
                r > q && (q = r), g.participantName != i.participantName ? (d.startEntry.totalWidth = q + 2 * SEQ.metrics.data.textPadding, d.startEntry.fromParticipantName = g.participantName, d.startEntry.toParticipantName = i.participantName) : (d.startEntry.totalWidth = q + 2 * SEQ.metrics.data.textPadding + 2 * SEQ.metrics.data.boxBleed + 2 * SEQ.metrics.data.entryMarginSide, d.startEntry.fromParticipantName = g.participantName), h(d.startEntry)
            }
            var s = j(d.subFragments, g, i),
                t = SEQ.metrics.data.fragmentBleed,
                u = SEQ.metrics.data.fragmentBleed;
            SEQ.entityParticipant.isSpecialParticipantLeftName(g.participantName) && (t = 0);
            var v = Math.max(t, g.entityLeftWidth);
            s.leftWidth > v && (v = s.leftWidth), SEQ.entityParticipant.isSpecialParticipantRightName(i.participantName) && (u = 0);
            var w = Math.max(u, i.entityRightWidth);
            s.rightWidth > w && (w = s.rightWidth), d.leftWidth = v, d.rightWidth = w;
            var x = SEQ.parser.diagram.participantsByName[g.participantName],
                y = SEQ.parser.diagram.participantsByName[i.participantName];
            SEQ.entityParticipant.updateParticipantEntityWidths(x, v + SEQ.metrics.data.fragmentMarginSide, 0), SEQ.entityParticipant.updateParticipantEntityWidths(y, 0, w + SEQ.metrics.data.fragmentMarginSide)
        }
    }

    function j(a, b, c) {
        for (var d = 0, e = 0, f = 0; f < a.length; f++) {
            var g, h, i = a[f];
            i.type === SEQ.entityFragment.Type.EXPANDABLE_PLUS ? i.startEntry.toParticipantName ? (g = 0, h = 0) : (g = i.startEntry.totalWidth / 2, h = i.startEntry.totalWidth / 2) : (g = i.leftWidth, h = i.rightWidth), i.participantDataMin.participantName == b.participantName && g > d && (d = g), i.participantDataMax.participantName == c.participantName && h > e && (e = h)
        }
        return {
            leftWidth: d + SEQ.metrics.data.fragmentMarginSide,
            rightWidth: e + SEQ.metrics.data.fragmentMarginSide
        }
    }

    function k() {
        for (var a = SEQ.parser.diagram.participants, b = [], c = 0; c < a.length; c++) b[a[c].name] = c;
        return b
    }

    function l(a, b) {
        return a + 2 * SEQ.metrics.data.fragmentLabelSidePadding + b + SEQ.metrics.data.fragmentLabelEdgeLength
    }

    function m(a) {
        var b = SEQ.parser.diagram.participantsByName[a.fromParticipantName].posX,
            c = null;
        return a.toParticipantName && (c = SEQ.parser.diagram.participantsByName[a.toParticipantName].posX), {
            fromX: b,
            toX: c
        }
    }

    function n(a, b, c) {
        if (a.fragment.endPosition) {
            var d, e, f, g = m(a),
                h = g.fromX,
                i = g.toX,
                j = SEQ.metrics.data.boxBleed,
                k = a.position.posY - a.totalHeight / 2 - a.textData.height / 2 - SEQ.metrics.data.fragmentLineWeight / 2;
            if (i) {
                var l = i > h ? h : i;
                d = l - j, f = Math.abs(h - i) + 2 * j, e = d + f / 2 - a.textData.width / 2
            } else d = h - a.totalWidth / 2 + SEQ.metrics.data.entryMarginSide, f = a.totalWidth - 2 * SEQ.metrics.data.entryMarginSide, e = h - a.textData.width / 2;
            b.save(), b.lineWidth = SEQ.metrics.data.fragmentLineWeight, b.font = "bold " + SEQ.main.getFontSmall(), q(b, b.font, d, a.position.posY - a.totalHeight, SEQ.metrics.data.fragmentHeight, a.position.posY, d + f, a.type, a.fragment.colorFragment, a.fragment.backgroundColor, !0, a.fragment.colorLabel), b.restore(), k += SEQ.metrics.data.fragmentHeight / 2, SEQ.textUtil.fillText(b, c, a.textData.parsedLines, e, k)
        }
    }

    function o(a, b, c, d) {
        function e(a) {
            if (b.save(), b.setLineDash([SEQ.metrics.data.fragmentOperandLineDashWidth]), b.beginPath(), b.moveTo(h, a.position.posY - a.totalHeight), b.lineTo(i, a.position.posY - a.totalHeight), b.stroke(), b.restore(), a.text) {
                var c = l(h, SEQ.metrics.calcWidth(f.type, f.font));
                b.fillText("[" + a.text + "]", c + SEQ.metrics.data.fragmentTextSideMargin, a.position.posY - SEQ.metrics.data.fragmentTextPosYOffset)
            }
        }
        var f = a.fragment;
        if (a.type != E.END && f.endPosition || c || d) {
            var g = w(f),
                h = g.minX,
                i = g.maxX,
                j = f.startPosition.posY - f.totalHeight;
            if (b.save(), b.lineWidth = SEQ.metrics.data.fragmentLineWeight, b.font = f.font, E.ELSE == a.type)(c || d) && e(a.elseGuard);
            else if (E.THREAD == a.type)(c || d) && e(a.thread);
            else {
                var k = f.type;
                f.groupLabel && (k = f.groupLabel), q(b, f.font, h, j, f.totalHeight, f.endPosition.posY, i, k, f.colorFragment, null, !1, f.text, f.colorLabel), f.elseGuards.forEach(function(a) {
                    e(a)
                }), f.threads.forEach(function(a) {
                    e(a)
                })
            }
            b.restore()
        }
    }

    function p(a, b) {
        if (a.fragment.backgroundColor && a.type != E.END && a.type != E.ELSE && a.type != E.THREAD) {
            var c = a.fragment,
                d = w(c),
                e = d.minX,
                f = d.maxX,
                g = c.startPosition.posY - c.totalHeight,
                h = b.fillStyle;
            b.fillStyle = a.fragment.backgroundColor, b.fillRect(e, g, f - e, c.endPosition.posY - g), b.fillStyle = h
        }
    }

    function q(a, b, c, d, e, f, g, h, i, j, k, m, n) {
        var o = SEQ.metrics.calcWidth(h, b),
            p = l(c, o),
            q = a.fillStyle;
        if (i ? a.fillStyle = i : a.fillStyle = "white", a.beginPath(), a.rect(c, d, g - c, f - d), k) {
            var r = a.fillStyle;
            j && (a.fillStyle = j), a.fill(), a.fillStyle = r
        }
        a.stroke(), a.beginPath(), a.moveTo(c, d), a.lineTo(c, d + e), a.lineTo(c + 2 * SEQ.metrics.data.fragmentLabelSidePadding + o, d + e), a.lineTo(p, d + SEQ.metrics.data.fragmentLabelSmallHeight), a.lineTo(p, d), a.lineTo(c, d), a.fill(), a.stroke(), n ? a.fillStyle = n : a.fillStyle = q, a.fillText(h, c + SEQ.metrics.data.fragmentLabelSidePadding, d + e - SEQ.metrics.data.fragmentTextPosYOffset), a.fillStyle = q, m && a.fillText("[" + m + "]", p + SEQ.metrics.data.fragmentTextSideMargin, d + e - SEQ.metrics.data.fragmentTextPosYOffset)
    }

    function r(a, b) {
        for (var c = SEQ.parser.diagram.fragments, d = 0; d < c.length; d++) {
            var e = c[d];
            if (b == e.type) {
                var f = w(e);
                if (a.y > e.startPosition.posY - e.totalHeight && a.y < e.endPosition.posY + e.topMargin && a.x > f.minX && a.x < f.maxX) return !0
            }
        }
    }

    function s(a) {
        return a.indexOf("expandable") > -1
    }

    function t(a, b, c) {
        var d = a.fragment;
        if (!d.participantDataMin || !d.participantDataMax) return {
            main: {
                startX: 0,
                endX: 0,
                startY: 0,
                endY: 0
            }
        };
        if (s(a.type) && z(a, b, c, !1)) return F.TOGGLE;
        var e = w(d);
        return a.type === E.END ? {
            main: {
                startX: e.minX,
                endX: e.maxX,
                startY: a.position.posY + SEQ.metrics.data.collisionBleed / 2,
                endY: a.position.posY - SEQ.metrics.data.collisionBleed / 2
            }
        } : {
            main: {
                startX: e.minX,
                endX: e.maxX,
                startY: a.position.posY,
                endY: a.position.posY - a.totalHeight
            }
        }
    }

    function u() {
        var a = this.collision(this).main,
            b = [];
        if (s(this.type)) {
            var c = y(this, !1);
            b.push({
                minX: c.startX,
                maxX: c.endX,
                minY: c.endY,
                maxY: c.startY,
                type: "zoom-out"
            }, {
                minX: c.endX,
                maxX: a.endX,
                minY: a.endY,
                maxY: a.startY,
                type: "move"
            })
        } else {
            var d;
            d = this.type === E.END ? "ns-resize" : "pointer", b.push({
                minX: a.startX,
                maxX: a.endX,
                minY: a.endY,
                maxY: a.startY,
                type: d
            })
        }
        return b
    }

    function v() {
        if (this.fromParticipantName) {
            var a = this.collision(this).main,
                b = y(this, !0),
                c = [];
            return c.push({
                minX: b.startX,
                maxX: b.endX,
                minY: b.endY,
                maxY: b.startY,
                type: "zoom-in"
            }, {
                minX: a.startX,
                maxX: b.endX,
                minY: b.startY,
                maxY: a.startY,
                type: "move"
            }, {
                minX: b.endX,
                maxX: a.endX,
                minY: a.endY,
                maxY: a.startY,
                type: "move"
            }), c
        }
    }

    function w(a) {
        var b = SEQ.parser.diagram.participantsByName,
            c = b[a.participantDataMin.participantName],
            d = c.posX - a.leftWidth - a.participantDataMin.timelineLeftWidth,
            e = b[a.participantDataMax.participantName],
            f = e.posX + a.rightWidth + a.participantDataMax.timelineRightWidth;
        return {
            minX: d,
            maxX: f
        }
    }

    function x(a, b, c) {
        if (s(a.type) && z(a, b, c, !0)) return F.TOGGLE;
        var d, e, f = m(a),
            g = f.fromX,
            h = f.toX;
        return h ? (g < h ? (d = g, e = h) : (d = h, e = g), d -= SEQ.metrics.data.boxBleed, e += SEQ.metrics.data.boxBleed) : (d = g - a.totalWidth / 2 + SEQ.metrics.data.entryMarginSide, e = g + a.totalWidth / 2 - SEQ.metrics.data.entryMarginSide), {
            main: {
                startX: d,
                endX: e,
                startY: a.position.posY,
                endY: a.position.posY - a.totalHeight
            }
        }
    }

    function y(a, b) {
        var c, d = a.fragment,
            e = SEQ.metrics.calcWidth(d.type, d.font);
        if (b) {
            var f = m(a),
                g = f.fromX,
                h = f.toX;
            if (h) {
                var i = h > g ? g : h;
                c = i - SEQ.metrics.data.boxBleed
            } else c = g - a.totalWidth / 2 + SEQ.metrics.data.entryMarginSide
        } else c = w(d).minX;
        var j = l(c, e),
            k = a.position.posY - a.totalHeight;
        return {
            startX: c,
            endX: j,
            startY: k + SEQ.metrics.data.fragmentHeight,
            endY: k
        }
    }

    function z(a, b, c, d) {
        var e = y(a, d);
        if (c < e.startY && c > e.endY && b > e.startX && b < e.endX) return !0
    }

    function A(a, b) {
        var c = a + " " + b;
        return E.ELSE != a && E.THREAD != a && (c += "\nend"), c
    }

    function B(a) {
        return null != C.exec(a) || a === E.GROUP
    }
    var C = new RegExp("^\\s*(alt|else|thread|opt|loop|par|break|critical|seq|strict|neg|ignore|consider|assert|region|end|expandable\\-|expandable\\−|expandable\\+)" + SEQ.entityParticipant.colorGroup + SEQ.entityParticipant.colorGroup + "(?:$|\\s(.*))|\\s*(?:\\s|^)(group)" + SEQ.entityParticipant.colorGroup + "\\s?([^\\[#]+)" + SEQ.entityParticipant.colorGroup + "\\s?(?:(\\[)(.*)(\\]))?"),
        D = {
            OPERATOR: 1,
            COLOR_HEX_FRAGMENT: 2,
            COLOR_NAME_FRAGMENT: 3,
            COLOR_HEX_LABEL: 4,
            COLOR_NAME_LABEL: 5,
            TEXT: 6,
            GROUP: 7,
            COLOR_HEX_FRAGMENT_GROUP: 8,
            COLOR_NAME_FRAGMENT_GROUP: 9,
            GROUP_LABEL: 10,
            COLOR_HEX_LABEL_GROUP: 11,
            COLOR_NAME_LABEL_GROUP: 12,
            GROUP_CONDITION_LEFT_BRACKET: 13,
            GROUP_CONDITION: 14,
            GROUP_CONDITION_RIGHT_BRACKET: 15
        },
        E = {
            ALT: "alt",
            ELSE: "else",
            THREAD: "thread",
            OPT: "opt",
            LOOP: "loop",
            PAR: "par",
            BREAK: "break",
            CRITICAL: "critical",
            EXPANDABLE_DASH: "expandable-",
            EXPANDABLE_MINUS: "expandable−",
            EXPANDABLE_PLUS: "expandable+",
            SEQ: "seq",
            STRICT: "strict",
            NEG: "neg",
            IGNORE: "ignore",
            CONSIDER: "consider",
            ASSERT: "assert",
            END: "end",
            GROUP: "group"
        },
        F = {
            TOGGLE: "toggle"
        };
    return {
        parse: b,
        paint: o,
        regExp: C,
        build: A,
        storeEnclosedEntriesData: g,
        updateParticipantWidths: i,
        populateEnclosingCollapsedFragment: e,
        isOngoingCollapsedFragment: f,
        collision: t,
        insideFragmentType: r,
        paintFragment: q,
        isType: B,
        Type: E,
        CollisionType: F,
        groups: D
    }
}();
var SEQ = SEQ || {};
SEQ.entityEntrySpacing = function() {
    function a(a) {
        var b = c.exec(a);
        if (null != b && b.length > d.SPACING) {
            var e = b[d.SPACING];
            return {
                raw: a,
                entrySpacing: parseFloat(e)
            }
        }
    }

    function b(a) {
        return a < 0 && (a = 0), "entryspacing " + a.toFixed(1)
    }
    var c = new RegExp("^\\s*(entryspacing)\\s?([0-9]+(?:\\.[0-9]+)?$)"),
        d = {
            ENTRY_SPACING: 1,
            SPACING: 2
        },
        e = {
            ENTRY_SPACING: "entryspacing"
        };
    return {
        parse: a,
        build: b,
        regExp: c,
        groups: d,
        Type: e
    }
}();
var SEQ = SEQ || {};
SEQ.entityParticipantSpacing = function() {
    function a(a) {
        var b = c.exec(a);
        if (null != b && b.length > d.SPACING) {
            var e = b[d.SPACING];
            return {
                raw: a,
                participantSpacing: e
            }
        }
    }
    var b = "equal",
        c = new RegExp("^\\s*(participantspacing)\\s?([0-9]+(?:\\.[0-9]+)?|" + b + ")$"),
        d = {
            PARTICIPANT_SPACING: 1,
            SPACING: 2
        },
        e = {
            PARTICIPANT_SPACING: "participantspacing"
        };
    return {
        parse: a,
        equal: b,
        regExp: c,
        groups: d,
        Type: e
    }
}();
var SEQ = SEQ || {};
SEQ.entityFontSize = function() {
    function a(a) {
        var d = b.exec(a);
        if (null != d && d.length > c.SIZE) {
            var e = d[c.SIZE];
            return {
                raw: a,
                fontSize: e
            }
        }
    }
    var b = new RegExp("^\\s*(fontsize)\\s?([0-9]+)"),
        c = {
            FONT_SIZE: 1,
            SIZE: 2
        },
        d = {
            FONT_SIZE: "fontsize"
        };
    return {
        parse: a,
        regExp: b,
        groups: c,
        Type: d
    }
}();
var SEQ = SEQ || {};
SEQ.entityParallel = function() {
    function a(a) {
        var d = b.exec(a);
        if (null != d && d.length > c.STATUS) {
            var e = d[c.STATUS];
            if ("on" === e) var f = !0;
            else f = "off" !== e && "end" !== e;
            return {
                raw: a,
                enabled: f,
                parallelEnabled: f
            }
        }
    }
    var b = new RegExp("^\\s*(parallel)\\s?(on|off|end)?"),
        c = {
            PARALLEL: 1,
            STATUS: 2
        },
        d = {
            PARALLEL: "parallel"
        };
    return {
        parse: a,
        regExp: b,
        groups: c,
        Type: d
    }
}();
var SEQ = SEQ || {};
SEQ.entityActivation = function() {
    function a(a) {
        var b = i.exec(a);
        if (null != b && b.length > j.PARTICIPANT) {
            var c = b[j.TYPE],
                e = b[j.PARTICIPANT],
                h = b[j.COLOR_NAME],
                l = b[j.COLOR_HEX],
                m = h ? h : l,
                n = SEQ.parser.diagram.ongoingActivations[e];
            if (c.indexOf(k.DEACTIVATE) > -1) {
                if (n && n.length) {
                    var o = n.pop(),
                        p = {
                            type: c,
                            fromParticipantName: e,
                            totalHeight: 0,
                            totalWidth: 0,
                            topMargin: 0,
                            position: {},
                            activation: !0,
                            raw: a
                        };
                    return o.deactivate = p, p
                }
            } else if (c.indexOf(k.ACTIVATE) > -1) {
                n || (SEQ.parser.diagram.ongoingActivations[e] = [], n = SEQ.parser.diagram.ongoingActivations[e]);
                var q = {
                    type: c,
                    fromParticipantName: e,
                    centerDiff: f(e),
                    totalHeight: 0,
                    totalWidth: 0,
                    topMargin: 0,
                    position: {},
                    color: m,
                    activation: !0,
                    raw: a,
                    paint: d
                };
                if (n.push(q), SEQ.entityParticipant.storeParticipantWithTimelineWidths(null, e, SEQ.metrics.data.activationSideWidth, g(n.length) + SEQ.metrics.data.activationSideWidth), !q.color) {
                    var r = SEQ.parser.diagram.participantsByName[e];
                    q.color = r.activeColor ? r.activeColor : SEQ.parser.diagram.participantActiveColor
                }
                return q
            }
        }
    }

    function b(a) {
        var b = SEQ.parser.diagram.ongoingActivations[a];
        b || (SEQ.parser.diagram.ongoingActivations[a] = [], b = SEQ.parser.diagram.ongoingActivations[a]);
        var c = SEQ.parser.diagram.participantsByName[a],
            e = {
                type: k.ACTIVATE,
                fromParticipantName: a,
                centerDiff: f(a),
                totalHeight: 0,
                totalWidth: 0,
                topMargin: 0,
                position: {},
                activation: !0,
                color: c.activeColor ? c.activeColor : SEQ.parser.diagram.participantActiveColor,
                paint: d
            };
        b.push(e), SEQ.entityParticipant.storeParticipantWithTimelineWidths(null, a, SEQ.metrics.data.activationSideWidth, g(b.length) + SEQ.metrics.data.activationSideWidth), SEQ.parser.storeEntry(e)
    }

    function c(a) {
        var b = SEQ.parser.diagram.ongoingActivations[a];
        if (b && b.length) {
            var c = b.pop();
            c.deactivate = {
                type: k.DEACTIVATE,
                fromParticipantName: a,
                totalHeight: 0,
                totalWidth: 0,
                topMargin: 0,
                position: {},
                activation: !0
            }, SEQ.parser.storeEntry(c.deactivate)
        }
    }

    function d(a, b) {
        var c, d = SEQ.parser.diagram.participantsByName,
            e = d[a.fromParticipantName].posX + a.centerDiff;
        a.deactivate ? (c = a.deactivate.position.posY, k.DEACTIVATE_AFTER === a.deactivate.type && (c += SEQ.metrics.data.activationAfterHeight)) : c = SEQ.parser.diagram.entries[SEQ.parser.diagram.entries.length - 1].position.posY + SEQ.metrics.data.diagramMarginBottom - SEQ.metrics.data.baseSpaceMetric;
        var f = SEQ.metrics.data.activationSideWidth,
            g = a.position.posY;
        b.beginPath(), b.moveTo(e - f, g), b.lineTo(e + f, g), b.lineTo(e + f, c), b.lineTo(e - f, c), b.lineTo(e - f, g);
        var h = b.fillStyle;
        a.color ? b.fillStyle = a.color : b.fillStyle = "white", b.fill(), b.stroke(), b.fillStyle = h
    }

    function e(a, b) {
        return a + " " + b
    }

    function f(a) {
        var b = SEQ.parser.diagram.ongoingActivations[a];
        return b ? 0 === b.length ? 0 : b.length >= 1 ? b.length * SEQ.metrics.data.activationSideWidth : void 0 : 0
    }

    function g(a) {
        return a <= 1 ? 0 : (a - 1) * SEQ.metrics.data.activationSideWidth
    }

    function h(a) {
        return k.ACTIVATE === a || k.DEACTIVATE === a || k.DEACTIVATE_AFTER === a
    }
    var i = new RegExp("^\\s*(activate|deactivate|deactivateafter)\\s" + SEQ.entityParticipant.nameGroup + "\\s?" + SEQ.entityParticipant.colorGroup + "$"),
        j = {
            TYPE: 1,
            PARTICIPANT: 2,
            COLOR_NAME: 3,
            COLOR_HEX: 4
        },
        k = {
            ACTIVATE: "activate",
            DEACTIVATE: "deactivate",
            DEACTIVATE_AFTER: "deactivateafter"
        };
    return {
        parse: a,
        paint: d,
        build: e,
        calcActivationCenterDiff: g,
        isType: h,
        activate: b,
        deactivate: c,
        Type: k,
        regExp: i,
        groups: j
    }
}();
var SEQ = SEQ || {};
SEQ.entitySpace = function() {
    function a(a) {
        var f = h.exec(a);
        if (null != f && f.length >= i.VALUE) {
            var g = f[i.VALUE];
            return g || (g = 1), {
                type: j.SPACE,
                totalHeight: SEQ.metrics.data.baseSpaceMetric * g,
                topMargin: SEQ.metrics.data.entityMarginTop,
                position: {},
                paint: c,
                collision: d,
                collisionTypeAreas: e,
                updatePos: b,
                raw: a
            }
        }
    }

    function b(a, b) {
        a.position.posY = b
    }

    function c(a, b, c, e) {
        if (c || e) {
            var f = d(a).main;
            b.beginPath(), b.moveTo(f.startX, f.endY), b.lineTo(f.endX, f.endY), b.lineTo(f.endX, f.startY), b.lineTo(f.startX, f.startY), b.lineTo(f.startX, f.endY), b.stroke()
        }
    }

    function d(a) {
        var b = SEQ.parser.diagram.participants,
            c = b[b.length - 1],
            d = SEQ.metrics.data.entryMarginSide,
            e = c.width > c.entityRightWidth - SEQ.metrics.data.entryMarginSide ? c.width / 2 : c.entityRightWidth - SEQ.metrics.data.entryMarginSide,
            f = c.posX + c.timelineRightWidth + e;
        return {
            main: {
                startX: d,
                endX: f,
                startY: a.position.posY,
                endY: a.position.posY - a.totalHeight
            }
        }
    }

    function e() {
        var a = this.collision(this).main,
            b = [];
        return b.push({
            minX: a.startX,
            maxX: a.endX,
            minY: a.endY,
            maxY: a.startY,
            type: "ns-resize"
        }), b
    }

    function f(a) {
        return a
    }

    function g(a) {
        return j.SPACE === a
    }
    var h = new RegExp("^\\s*(space)\\s?(\\-?[0-9]+(?:\\.[0-9]+)?)?$"),
        i = {
            SPACE: 1,
            VALUE: 2
        },
        j = {
            SPACE: "space"
        };
    return {
        parse: a,
        build: f,
        isType: g,
        Type: j,
        regExp: h,
        groups: i
    }
}();
var SEQ = SEQ || {};
SEQ.entityCreateDestroy = function() {
    function a(a) {
        var f = n.exec(a);
        if (null != f && f.length > o.PARTICIPANT) {
            var m = f[o.TYPE],
                q = f[o.PARTICIPANT];
            if (m === p.CREATE) {
                var r = SEQ.parser.diagram.participantsByName[q];
                r || (SEQ.entityParticipant.storeParticipantWithDefinedWidths(null, q), r = SEQ.parser.diagram.participantsByName[q]);
                var s = {};
                return r.createPositions.push(s), {
                    type: p.CREATE,
                    fromParticipantName: q,
                    participantToCreate: r,
                    totalHeight: r.height,
                    totalWidth: r.width,
                    topMargin: SEQ.metrics.data.entityMarginTop,
                    position: s,
                    lockedPosX: !0,
                    updateEnclosingFragments: b,
                    paint: g,
                    updatePos: c,
                    collision: i,
                    collisionTypeAreas: k,
                    raw: a
                }
            }
            if (m === p.DESTROY || m === p.DESTROY_SILENT) {
                var t = SEQ.parser.diagram.participantsByName[q];
                t || (t = SEQ.entityParticipant.storeParticipantWithDefinedWidths(null, q));
                var u = {};
                return t.destroyPositions.push(u), {
                    type: m,
                    fromParticipantName: q,
                    participantToDestroy: t,
                    totalHeight: 0,
                    totalWidth: SEQ.metrics.data.participantDestroySize,
                    topMargin: 0,
                    position: u,
                    lockedPosX: !0,
                    paint: h,
                    updatePos: c,
                    collision: j,
                    collisionTypeAreas: l,
                    updateEnclosingFragments: e,
                    updateParticipantWidths: d,
                    raw: a
                }
            }
            if (m === p.DESTROY_AFTER) {
                var v = SEQ.parser.diagram.participantsByName[q];
                if (v) {
                    var w = SEQ.metrics.data.participantDestroySize,
                        x = {
                            lifeLinePosYDiff: SEQ.metrics.data.participantDestroySize / 2
                        };
                    return v.destroyPositions.push(x), {
                        type: m,
                        fromParticipantName: q,
                        participantToDestroy: v,
                        totalHeight: w,
                        totalWidth: SEQ.metrics.data.participantDestroySize,
                        topMargin: SEQ.metrics.data.entityMarginTop,
                        position: x,
                        lockedPosX: !0,
                        paint: h,
                        updatePos: c,
                        collision: j,
                        collisionTypeAreas: l,
                        updateEnclosingFragments: e,
                        updateParticipantWidths: d,
                        raw: a
                    }
                }
            }
        }
    }

    function b(a) {
        var b = a.totalWidth / 2 + SEQ.metrics.data.entryMarginSide;
        SEQ.entityFragment.storeEnclosedEntriesData(a.fromParticipantName, b, b, 0, 0, a.snapshot.ongoingFragments)
    }

    function c(a, b, c) {
        a.position.posY = b, a.fromPosX = c
    }

    function d(a) {
        var b = a.totalWidth / 2;
        SEQ.entityParticipant.storeParticipantWithDefinedWidths(null, a.fromParticipantName, b, b)
    }

    function e(a) {
        var b = a.totalWidth / 2;
        SEQ.entityFragment.storeEnclosedEntriesData(a.fromParticipantName, b, b, 0, 0, a.snapshot.ongoingFragments)
    }

    function f(a) {
        return {
            fromPosX: SEQ.parser.diagram.participantsByName[a.fromParticipantName].posX
        }
    }

    function g(a, b) {
        SEQ.entityParticipant.paintParticipant(a.participantToCreate, b, a.position.posY - SEQ.parser.diagram.participantMaxHeight)
    }

    function h(a, b) {
        if (a.type.indexOf("silent") === -1) {
            var c = f(a).fromPosX,
                d = a.position.posY;
            a.type === p.DESTROY_AFTER && (d -= SEQ.metrics.data.participantDestroySize / 2), b.save(), b.lineWidth = SEQ.metrics.data.participantDestroyLineWeight, b.beginPath();
            var e = SEQ.metrics.data.participantDestroySize / 2;
            b.moveTo(c - e, d - e), b.lineTo(c + e, d + e), b.moveTo(c + e, d - e), b.lineTo(c - e, d + e), b.stroke(), b.restore()
        }
    }

    function i(a) {
        var b = f(a).fromPosX;
        return {
            participantToCreate: {
                startX: b - a.participantToCreate.width / 2,
                endX: b + a.participantToCreate.width / 2,
                startY: a.position.posY,
                endY: a.position.posY - a.totalHeight
            }
        }
    }

    function j(a) {
        var b, c, d = f(a).fromPosX,
            e = SEQ.metrics.data.participantDestroySize / 2;
        return a.type === p.DESTROY_AFTER ? (b = a.position.posY, c = a.position.posY - SEQ.metrics.data.participantDestroySize) : (b = a.position.posY + e, c = a.position.posY - e), {
            main: {
                startX: d - a.totalWidth / 2,
                endX: d + a.totalWidth / 2,
                startY: b,
                endY: c
            }
        }
    }

    function k() {
        var a = this.collision(this).participantToCreate,
            b = [];
        return b.push({
            minX: a.startX,
            maxX: a.endX,
            minY: a.endY,
            maxY: a.startY,
            type: "move"
        }), b
    }

    function l() {
        var a = this.collision(this).main,
            b = [];
        return b.push({
            minX: a.startX,
            maxX: a.endX,
            minY: a.endY,
            maxY: a.startY,
            type: "move"
        }), b
    }

    function m(a) {
        var b = n.exec(a);
        if (null != b && b.length > o.PARTICIPANT && b[o.TYPE] === p.CREATE) return b[o.PARTICIPANT]
    }
    var n = new RegExp("^\\s*(create|destroy|destroyafter|destroysilent)\\s" + SEQ.entityParticipant.nameGroup + "$"),
        o = {
            TYPE: 1,
            PARTICIPANT: 2
        },
        p = {
            CREATE: "create",
            DESTROY: "destroy",
            DESTROY_AFTER: "destroyafter",
            DESTROY_SILENT: "destroysilent"
        };
    return {
        parse: a,
        paint: h,
        createdParticipant: m,
        Type: p,
        regExp: n,
        groups: o
    }
}();
var SEQ = SEQ || {};
SEQ.entityActiveColor = function() {
    function a(a) {
        var d = b.exec(a);
        if (null != d && d.length > c.COLOR_NAME) {
            var e = d[c.PARTICIPANT],
                f = d[c.COLOR_NAME],
                g = d[c.COLOR_HEX],
                h = f ? f : g;
            if (e) {
                var i = SEQ.parser.diagram.participantsByName[e];
                return i || (i = SEQ.entityParticipant.storeParticipantWithDefinedWidths(null, e)), i.activeColor = h, {
                    raw: a
                }
            }
            return SEQ.parser.diagram.participantActiveColor = h, {
                raw: a
            }
        }
    }
    var b = new RegExp("^\\s*(activecolor)\\s" + SEQ.entityParticipant.nameGroup + "?\\s?" + SEQ.entityParticipant.colorGroupMandatory + "$"),
        c = {
            ACTIVE_COLOR: 1,
            PARTICIPANT: 2,
            COLOR_NAME: 3,
            COLOR_HEX: 4
        },
        d = {
            ACTIVE_COLOR: "activecolor"
        };
    return {
        parse: a,
        regExp: b,
        groups: c,
        Type: d
    }
}();
var SEQ = SEQ || {};
SEQ.entityLifeLineStyle = function() {
    function a(a) {
        var d = b.exec(a);
        if (null != d && d.length > c.STYLE) {
            var e = d[c.PARTICIPANT],
                f = d[c.COLOR_NAME],
                g = d[c.COLOR_HEX],
                h = f ? f : g,
                i = d[c.WEIGHT],
                j = d[c.STYLE];
            if (e) {
                var k = SEQ.parser.diagram.participantsByName[e];
                return k || (k = SEQ.entityParticipant.storeParticipantWithDefinedWidths(null, e)), k.lifeLineColor = h, k.lifeLineWeight = i, k.lifeLineStyle = j, {
                    raw: a
                }
            }
            return SEQ.parser.diagram.participantLifeLineColor = h, SEQ.parser.diagram.participantLifeLineWeight = i, SEQ.parser.diagram.participantLifeLineStyle = j, {
                raw: a
            }
        }
    }
    var b = new RegExp("^\\s*(lifelinestyle)\\s" + SEQ.entityParticipant.nameGroup + "?\\s?" + SEQ.entityParticipant.colorGroup + SEQ.entityMessage.lineWeightGroup + "(?:::?(solid|dashed))?$"),
        c = {
            LIFE_LINE_COLOR: 1,
            PARTICIPANT: 2,
            COLOR_NAME: 3,
            COLOR_HEX: 4,
            WEIGHT: 5,
            STYLE: 6
        },
        d = {
            LIFE_LINE_COLOR: "lifelinestyle"
        };
    return {
        parse: a,
        regExp: b,
        groups: c,
        Type: d
    }
}();
var SEQ = SEQ || {};
SEQ.entityBottomParticipants = function() {
    function a(a) {
        var d = b.exec(a);
        if (null != d && d.length > c.BOTTOM_PARTICIPANTS) return SEQ.parser.diagram.bottomParticipants = !0, {
            raw: a
        }
    }
    var b = new RegExp("^\\s*(bottomparticipants)\\s?$"),
        c = {
            BOTTOM_PARTICIPANTS: 1
        },
        d = {
            BOTTOM_PARTICIPANTS: "bottomparticipants"
        };
    return {
        parse: a,
        regExp: b,
        groups: c,
        Type: d
    }
}();
var SEQ = SEQ || {};
SEQ.entityParticipantGroup = function() {
    function a(a) {
        var b = e.exec(a);
        if (null != b && b.length > f.PARTICIPANT_GROUP) {
            var c = b[f.PARTICIPANT_GROUP] ? b[f.PARTICIPANT_GROUP] : b[f.END],
                h = SEQ.parser.diagram.ongoingParticipantGroups;
            if (g.END === c) {
                if (h.length > 0) {
                    var i = h.pop(),
                        j = i.enclosedParticipants[0],
                        k = i.enclosedParticipants[i.enclosedParticipants.length - 1];
                    if (j && k) return SEQ.entityParticipant.updateParticipantOuterWidths(j, SEQ.metrics.data.participantMarginSide, 0), SEQ.entityParticipant.updateParticipantOuterWidths(k, 0, SEQ.metrics.data.participantMarginSide), i.ended = !0, i.outerLeftWidth = j.outerLeftWidth, i.outerRightWidth = k.outerRightWidth, SEQ.parser.diagram.participantGroups.push(i), {
                        type: c,
                        participantGroup: i,
                        totalHeight: 0,
                        totalWidth: 0,
                        topMargin: 0,
                        position: {},
                        raw: a
                    }
                }
            } else if (g.PARTICIPANT_GROUP === c) {
                var l = b[f.COLOR_NAME] ? b[f.COLOR_NAME] : b[f.COLOR_HEX];
                if (b[f.TITLE]) var m = SEQ.textUtil.parseTextData(b[f.TITLE]);
                var n = SEQ.metrics.data.participantGroupPadding;
                m && (n += m.height + SEQ.metrics.data.participantGroupPadding);
                var o = {
                    textData: m,
                    height: n,
                    color: l,
                    enclosedParticipants: [],
                    enclosedParticipantGroups: [],
                    raw: a,
                    calcHeight: function() {
                        var a = 0;
                        return this.enclosedParticipantGroups.forEach(function(b) {
                            var c = b.calcHeight();
                            c > a && (a = c)
                        }), this.height + a
                    }
                };
                return h.forEach(function(a) {
                    a.enclosedParticipantGroups.push(o)
                }), h.push(o), {
                    type: c,
                    participantGroup: o,
                    totalHeight: 0,
                    totalWidth: 0,
                    topMargin: 0,
                    position: {},
                    raw: a,
                    paintLayer1: d
                }
            }
        }
    }

    function b(a, b) {
        var c = a + " " + b;
        return g.ELSE != a && (c += "\nend"), c
    }

    function c(a) {
        return null != e.exec(a)
    }

    function d(a, b, c) {
        if (a.participantGroup.ended) {
            var d, e, f = c.height,
                g = 0;
            a.participantGroup.enclosedParticipants.forEach(function(a) {
                (!d || a.posX < d.posX) && (d = a), (!e || a.posX > e.posX) && (e = a), a.height > g && (g = a.height)
            });
            var h = a.participantGroup.color;
            b.save(), b.beginPath();
            var i = d.posX - d.width / 2 - a.participantGroup.outerLeftWidth,
                j = e.posX + e.width / 2 + a.participantGroup.outerRightWidth,
                k = SEQ.metrics.data.participantMarginTop;
            SEQ.parser.diagram.title && (k += SEQ.parser.diagram.title.totalHeight), SEQ.parser.diagram.frame && (k += SEQ.parser.diagram.frame.totalHeight), k += SEQ.metrics.data.participantTypeLineWeight / 2, k += SEQ.parser.diagram.maxParticipantGroupHeight, k -= a.participantGroup.calcHeight(), k += SEQ.parser.diagram.participantMaxHeight - g;
            var l = f;
            SEQ.parser.diagram.frame && (l -= SEQ.metrics.data.frameMargin + SEQ.metrics.data.frameMarginCanvas), b.moveTo(i, k), b.lineTo(j, k), b.lineTo(j, l), b.lineTo(i, l), b.lineTo(i, k);
            var m = b.fillStyle;
            if (h && (b.fillStyle = h, b.fill()), b.fillStyle = m, b.stroke(), b.restore(), a.participantGroup.textData) {
                var n = (i + j) / 2 - a.participantGroup.textData.width / 2,
                    o = k + SEQ.metrics.data.participantGroupPadding;
                SEQ.textUtil.fillText(b, !1, a.participantGroup.textData.parsedLines, n, o)
            }
        }
    }
    var e = new RegExp("^\\s*(participantgroup)" + SEQ.entityParticipant.colorGroup + "(?:$|\\s(.*))|^\\s*(end)"),
        f = {
            PARTICIPANT_GROUP: 1,
            COLOR_HEX: 2,
            COLOR_NAME: 3,
            TITLE: 4,
            END: 5
        },
        g = {
            PARTICIPANT_GROUP: "participantgroup",
            END: "end"
        };
    return {
        parse: a,
        paintLayer1: d,
        regExp: e,
        build: b,
        isType: c,
        Type: g,
        groups: f
    }
}();
var SEQ = SEQ || {};
SEQ.entityFrame = function() {
    function a(a) {
        var j = k.exec(a);
        if (null != j && j.length > l.TEXT) {
            var n = c(j[l.COLOR_NAME_FRAGMENT], j[l.COLOR_HEX_FRAGMENT]);
            n || (n = c(j[l.COLOR_NAME_FRAGMENT_GROUP], j[l.COLOR_HEX_FRAGMENT_GROUP]));
            var o = c(j[l.COLOR_NAME_LABEL], j[l.COLOR_HEX_LABEL]);
            if (o || (o = c(j[l.COLOR_NAME_LABEL_GROUP], j[l.COLOR_HEX_LABEL_GROUP])), n) {
                var p = SEQ.main.getMeasurementContext(),
                    q = p.fillStyle;
                p.fillStyle = n;
                var r = e(p.fillStyle),
                    s = d(r, .8);
                p.fillStyle = q
            }
            return {
                type: m.FRAME,
                text: j[l.TEXT],
                colorFragment: n,
                colorLabel: o,
                backgroundColor: s,
                sdFont: "bold " + SEQ.main.getFontNormal(),
                nameFont: SEQ.main.getFontNormal(),
                topMargin: 0,
                totalHeight: SEQ.metrics.data.frameHeight + SEQ.metrics.data.frameMargin,
                labelHeight: SEQ.metrics.data.frameHeight,
                position: {},
                paint: g,
                paintLayer0: f,
                collision: h,
                collisionTypeAreas: i,
                build: b,
                raw: a
            }
        }
    }

    function b(a, b) {
        return b + m.FRAME + " " + a
    }

    function c(a, b) {
        return a ? a : b
    }

    function d(a, b) {
        var c = b < 0 ? 0 : 255,
            d = b < 0 ? b * -1 : b,
            e = parseInt(a[0]),
            f = parseInt(a[1]),
            g = parseInt(a[2]);
        return "rgb(" + (Math.round((c - e) * d) + e) + "," + (Math.round((c - f) * d) + f) + "," + (Math.round((c - g) * d) + g) + ")"
    }

    function e(a) {
        var b = parseInt(a.substring(1), 16),
            c = (16711680 & b) >> 16,
            d = (65280 & b) >> 8,
            e = 255 & b;
        return [c, d, e]
    }

    function f(a, b, c) {
        if (a.backgroundColor) {
            var d = b.fillStyle;
            b.fillStyle = a.backgroundColor;
            var e = SEQ.metrics.data.frameMarginCanvas;
            b.fillRect(e, e, c.width - 2 * e, c.height - 2 * e), b.fillStyle = d
        }
    }

    function g(a, b, c, d, e) {
        var f = SEQ.metrics.data.frameMarginCanvas;
        b.save();
        var g = SEQ.metrics.calcWidth("sd ", a.sdFont),
            h = g + SEQ.metrics.calcWidth(a.text, a.nameFont),
            i = f + 2 * SEQ.metrics.data.frameLabelSidePadding + h + SEQ.metrics.data.frameLabelEdgeLength,
            j = b.fillStyle;
        a.colorFragment ? b.fillStyle = a.colorFragment : b.fillStyle = "white", b.beginPath(), b.rect(f, f, e.width - 2 * f, e.height - 2 * f), b.stroke(), b.beginPath(), b.moveTo(f, f), b.lineTo(f, f + a.labelHeight), b.lineTo(f + 2 * SEQ.metrics.data.frameLabelSidePadding + h, f + a.labelHeight), b.lineTo(i, f + SEQ.metrics.data.frameLabelSmallHeight), b.lineTo(i, f), b.lineTo(f, f), b.fill(), b.stroke(), a.colorLabel ? b.fillStyle = a.colorLabel : b.fillStyle = j, b.font = a.sdFont;
        var k = f + SEQ.metrics.data.frameLabelSidePadding,
            l = f + a.labelHeight - SEQ.metrics.data.frameTextPosYOffset;
        b.fillText("sd", k, l), b.font = a.nameFont, b.fillText(a.text, k + g, l), b.fillStyle = j, b.restore()
    }

    function h() {
        return {
            main: {
                startX: 0,
                endX: Number.MAX_VALUE,
                startY: SEQ.metrics.data.frameMarginCanvas + this.labelHeight,
                endY: SEQ.metrics.data.frameMarginCanvas
            }
        }
    }

    function i() {
        var a = this.collision().main,
            b = [],
            c = "pointer";
        return b.push({
            minX: a.startX,
            maxX: a.endX,
            minY: a.endY,
            maxY: a.startY,
            type: c
        }), b
    }

    function j(a) {
        return a === m.FRAME
    }
    var k = new RegExp("^\\s*(frame)" + SEQ.entityParticipant.colorGroup + SEQ.entityParticipant.colorGroup + "\\s(.*)"),
        l = {
            FRAME: 1,
            COLOR_HEX_FRAGMENT: 2,
            COLOR_NAME_FRAGMENT: 3,
            COLOR_HEX_LABEL: 4,
            COLOR_NAME_LABEL: 5,
            TEXT: 6
        },
        m = {
            FRAME: "frame"
        };
    return {
        parse: a,
        paint: g,
        isType: j,
        Type: m,
        regExp: k,
        groups: l
    }
}();
var SEQ = SEQ || {};
SEQ.entityAutoActivation = function() {
    function a(a) {
        var d = b.exec(a);
        if (null != d && d.length > c.STATUS) {
            var e = d[c.STATUS];
            if ("on" === e) var f = !0;
            else f = "off" !== e && (isNaN(e), !0);
            return {
                raw: a,
                enabled: f
            }
        }
    }
    var b = new RegExp("^\\s*(autoactivation)\\s?(on|off)?"),
        c = {
            AUTO_ACTIVATION: 1,
            STATUS: 2
        },
        d = {
            AUTO_ACTIVATION: "autoactivation"
        };
    return {
        parse: a,
        regExp: b,
        groups: c,
        Type: d
    }
}();
var SEQ = SEQ || {},
    canvasSize = null;
SEQ.painter = function() {
    function a() {
        var a = SEQ.parser.diagram;
        canvasSize = g(), f(canvasSize);
        var h = SEQ.main.getDiagramContext();
        h.save(), h.fillStyle = "white";
        var i = SEQ.main.getDiagramCanvas();
        if (h.fillRect(0, 0, i.width, i.height), h.restore(), a.title && (h.save(), SEQ.entityTitle.paint(canvasSize), h.restore()), a.participants.length > 0 && (h.save(), b(canvasSize), h.restore(), h.save(), e(canvasSize, h), h.restore(), h.save(), c(), h.restore(), h.save(), d(canvasSize), h.restore(), !SEQ.main.isRunningNode())) {
            var j = SEQ.main.getParticipantContext();
            a.participants.forEach(function(a) {
                SEQ.entityParticipant.paint(a, j, !0)
            })
        }
    }

    function b(a) {
        var b = SEQ.parser.diagram,
            c = SEQ.main.getDiagramContext(),
            d = [],
            e = [],
            f = [];
        b.entries.forEach(function(a) {
            a.enclosingCollapsedFragment || (a.paintLayer0 && d.push(a), a.paintLayer1 && e.push(a), a.paintLayer2 && f.push(a))
        }), d.forEach(function(b) {
            b.paintLayer0(b, c, a)
        }), e.forEach(function(b) {
            b.paintLayer1(b, c, a)
        }), f.forEach(function(b) {
            b.paintLayer2(b, c, a)
        })
    }

    function c() {
        var a = SEQ.parser.diagram,
            b = SEQ.main.getDiagramContext();
        a.participants.forEach(function(a) {
            SEQ.entityParticipant.paint(a, b)
        }), a.bottomParticipants && a.participants.forEach(function(c) {
            var d = canvasSize.height - canvasSize.heightBottomParticipant;
            a.frame && (d -= SEQ.metrics.data.frameMargin + SEQ.metrics.data.frameMarginCanvas), SEQ.entityParticipant.paint(c, b, null, null, d)
        })
    }

    function d(a) {
        var b = SEQ.parser.diagram,
            c = SEQ.main.getDiagramContext(),
            d = [],
            e = [],
            f = [];
        b.entries.forEach(function(a) {
            a.paint && !a.enclosingCollapsedFragment && (a.fragment ? f.push(a) : a.activation ? d.push(a) : e.push(a))
        }), d.forEach(function(b) {
            b.paint(b, c, !1, !1, a)
        }), e.forEach(function(b) {
            b.paint(b, c, !1, !1, a)
        }), f.forEach(function(b) {
            b.paint(b, c, !1, !1, a)
        })
    }

    function e(a, b) {
        var c = SEQ.parser.diagram;
        c.participants.forEach(function(d) {
            function e(a) {
                "solid" == a ? b.setLineDash([]) : "dashed" == a && b.setLineDash([SEQ.metrics.data.diagramLifeLineDashSize, SEQ.metrics.data.diagramLifeLineSpaceSize])
            }
            if (!SEQ.entityParticipant.isSpecialParticipantName(d.name)) {
                d.lifeLineWeight ? b.lineWidth = SEQ.metrics.data.diagramLifeLineWeight * d.lifeLineWeight : c.participantLifeLineWeight ? b.lineWidth = SEQ.metrics.data.diagramLifeLineWeight * c.participantLifeLineWeight : b.lineWidth = SEQ.metrics.data.diagramLifeLineWeight, d.lifeLineColor ? b.strokeStyle = d.lifeLineColor : c.participantLifeLineColor ? b.strokeStyle = c.participantLifeLineColor : b.strokeStyle = "black", void 0 !== b.setLineDash && (d.lifeLineStyle ? e(d.lifeLineStyle) : c.participantLifeLineStyle ? e(c.participantLifeLineStyle) : b.setLineDash([SEQ.metrics.data.diagramLifeLineDashSize, SEQ.metrics.data.diagramLifeLineSpaceSize]));
                var f, g, h = d.destroyPositions.slice();
                if (d.createPositions.length) d.createPositions.forEach(function(e) {
                    if (f = e.posY, h.length) {
                        var i = h.shift();
                        g = i.posY, i.lifeLinePosYDiff && (g -= i.lifeLinePosYDiff)
                    } else g = a.height, c.bottomParticipants && (g -= a.heightBottomParticipant), c.frame && (g -= SEQ.metrics.data.frameMargin + SEQ.metrics.data.frameMarginCanvas);
                    b.beginPath(), b.moveTo(d.posX, f), b.lineTo(d.posX, g), b.stroke()
                });
                else {
                    if (f = SEQ.metrics.data.participantMarginTop + c.participantMaxHeight, c.title && (f += SEQ.parser.diagram.title.totalHeight), c.frame && (f += SEQ.parser.diagram.frame.totalHeight), f += SEQ.parser.diagram.maxParticipantGroupHeight, d.destroyPositions.length) {
                        var i = d.destroyPositions.pop();
                        g = i.posY, i.lifeLinePosYDiff && (g -= i.lifeLinePosYDiff)
                    } else g = a.height, c.bottomParticipants && (g -= a.heightBottomParticipant), c.frame && (g -= SEQ.metrics.data.frameMargin + SEQ.metrics.data.frameMarginCanvas);
                    b.beginPath(), b.moveTo(d.posX, f), b.lineTo(d.posX, g), b.stroke()
                }
            }
        })
    }

    function f(a) {
        var b = a.width,
            c = a.height;
        SEQ.parser.diagram.participantGroups.length && !SEQ.parser.diagram.frame && (c += SEQ.metrics.data.participantGroupPadding);
        var d = a.heightParticipant;
        SEQ.main.getDiagramCanvas(b, c);
        var e = SEQ.main.getDiagramContext();
        if (e.font = SEQ.main.getFontNormal(), e.lineWidth = SEQ.metrics.data.diagramLineWeight, e.fillStyle = "black", e.strokeStyle = "black", !SEQ.main.isRunningNode()) {
            var f = SEQ.main.getInteractionCanvas();
            f.width = b, f.height = c;
            var g = SEQ.main.getInteractionContext();
            g.font = SEQ.main.getFontNormal(), g.lineWidth = SEQ.metrics.data.diagramLineWeight;
            var h = SEQ.main.getParticipantCanvas();
            h.width = b, h.height = d;
            var i = SEQ.main.getParticipantContext();
            i.font = SEQ.main.getFontNormal(), i.lineWidth = SEQ.metrics.data.diagramLineWeight, i.fillStyle = "black", i.strokeStyle = "black"
        }
    }

    function g() {
        var a = {
                width: 0,
                height: 0,
                heightParticipant: 0,
                heightBottomParticipant: 0
            },
            b = SEQ.parser.diagram;
        if (b.participants.length > 0) {
            var c = b.entries[b.entries.length - 1].position.posY;
            0 === c && (c = SEQ.parser.diagram.participantMaxHeight + SEQ.metrics.data.participantMarginTop), a.height = c + SEQ.metrics.data.diagramMarginBottom;
            var d = b.participants[b.participants.length - 1],
                e = Math.max(d.width / 2 + SEQ.metrics.data.participantMarginSide, d.entityRightWidth + d.timelineRightWidth),
                f = d.posX + e + d.outerRightWidth;
            if (b.entries.forEach(function(a) {
                    SEQ.entityDivider.isType(a.type) && a.totalWidth > f && (f = a.totalWidth)
                }), a.width = f, a.heightParticipant = SEQ.parser.diagram.participantMaxHeight + SEQ.metrics.data.participantMarginTop + SEQ.metrics.data.participantBoxLineWeight, b.frame && (a.height += SEQ.metrics.data.frameMargin, a.width += SEQ.metrics.data.frameMargin), b.bottomParticipants) {
                var g = SEQ.parser.diagram.participantMaxHeight;
                SEQ.parser.diagram.participants.forEach(function(a) {
                    a.height > g && (g = a.height)
                }), a.heightBottomParticipant = a.heightParticipant + g - SEQ.parser.diagram.participantMaxHeight, a.height += a.heightBottomParticipant
            }
        } else b.title && (a.height = b.title.totalHeight, a.width = SEQ.metrics.calcWidth(b.title.title, SEQ.main.getFontTitle()) + 2 * SEQ.metrics.data.textPadding);
        return a
    }
    return {
        paint: a,
        getCanvasSize: function() {
            return canvasSize
        }
    }
}();
var SEQ = SEQ || {};
SEQ.interactor = function() {
    function a(a) {
        M = a
    }

    function b(a) {
        var b = SEQ.main.getInteractionCanvas(),
            c = b.getBoundingClientRect(),
            d = a.clientX - c.left,
            e = a.clientY - c.top;
        return {
            x: d,
            y: e
        }
    }

    function c(a, b) {
        var c = document.getElementById("entryEditor");
        c.style.top = a.pageY + "px", c.style.left = a.pageX - 100 + "px", c.style.display = "block";
        var d = document.getElementById("entryEditorTextArea");
        b ? d.value = b : d.value = "info", d.setSelectionRange(0, d.value.length), d.focus()
    }

    function d(a, b, c) {
        var d = document.getElementById("entryEditor");
        d.style.top = a.pageY + "px", d.style.left = a.pageX - 100 + "px", d.style.display = "block", document.getElementById("participantEdit").style.display = "block";
        var e = document.getElementById("participantAliasInput");
        e.value = b;
        var f = document.getElementById("entryEditorTextArea");
        c ? (f.value = c, f.setSelectionRange(0, f.value.length), f.focus()) : f.value = null
    }

    function e(a, b, c) {
        c && (c = c.replace(/\n/g, "\\n"));
        var d = new RegExp("^" + SEQ.entityParticipant.nameGroup + "$");
        if (d.exec(b)) {
            var e = [];
            SEQ.parser.diagram.participants.forEach(function(a) {
                a.declared || e.push(a)
            });
            for (var f = !1, h = SEQ.parser.diagram.entries, i = "", j = 0; j < h.length; j++) {
                var k = h[j];
                !k.type || SEQ.entityTitle.isType(k.type) || SEQ.entityParticipant.isType(k.type) || f || (e.forEach(function(d) {
                    i += d.name == a.name ? SEQ.entityParticipant.build(SEQ.entityParticipant.Type.PARTICIPANT, b, c) + "\n" : SEQ.entityParticipant.build(SEQ.entityParticipant.Type.PARTICIPANT, d.name) + "\n"
                }), e.length > 0 && (i += "\n"), f = !0);
                var l;
                if (SEQ.entityParticipant.isType(k.type)) l = k.fromParticipantName == a.name ? SEQ.entityParticipant.build(k.participantType, b, c, a.styling, a.iconUnicodeString) : k.raw;
                else {
                    var m = a.name.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"),
                        n = new RegExp("(^|[^\\w\\d]|x)" + m + "([^\\w\\d]|x|$)", "g");
                    l = k.raw ? k.raw.replace(n, "$1" + b + "$2") : k.raw
                }
                i = I(j, h, i, l)
            }
            SEQ.main.updateSource(i)
        } else SEQ.menu.displayNotification("Illegal character in participant alias, use long name instead.");
        g(), SEQ.parser.parse()
    }

    function f() {
        document.getElementById("entryEditor").style.display = "none", document.getElementById("participantEdit").style.display = "none", M = null, N = null, O = null, G()
    }

    function g() {
        SEQ.main.isRunningNode() || (SEQ.contextMenu.cancel(), SEQ.messageCreator.cancel(), SEQ.entryMover.cancel(), SEQ.saveAndOpen.cancelActiveFileNameChange(), f())
    }

    function h() {
        N = null, O = null, G()
    }

    function i(a) {
        (a.ctrlKey || a.metaKey) && 13 == a.keyCode && (a.preventDefault(), j())
    }

    function j() {
        var a = document.getElementById("entryEditorTextArea").value,
            b = document.getElementById("participantAliasInput").value;
        if (document.getElementById("entryEditor").style.display = "none", N) {
            var c = N.raw,
                d = /^[\s]*/.exec(c)[0];
            if (N.type == SEQ.entityParticipant.Type.PARTICIPANT) e(N, b, a);
            else if (O) e(O, b, a);
            else if (SEQ.entityFragment.regExp.exec(N.type)) {
                var f = c.indexOf(" ");
                f > -1 ? N.raw = c.substring(0, c.indexOf(" ") + 1) + a.replace(/\n/g, "\\n") : N.raw = c + " " + a.replace(/\n/g, "\\n"), s()
            } else if (SEQ.entityDivider.Type.DIVIDER === N.type) N.raw = SEQ.entityDivider.build(a.replace(/\n/g, "\\n")), s();
            else if (SEQ.entityFrame.isType(N.type)) N.raw = N.build(a, d), s();
            else if (SEQ.entityMessage.isType(N.type)) {
                var g = C(N);
                N.raw = c.substring(0, g + 1) + a.replace(/\n/g, "\\n"), s()
            } else N.raw = c.substring(0, c.indexOf(":") + 1) + a.replace(/\n/g, "\\n"), s()
        } else M && (M.text = a, t(M))
    }

    function k(a) {
        if (!SEQ.parser.parsingState.ongoing) {
            var b = a.target.tagName;
            27 == a.keyCode && (g(), SEQ.main.closePopups()), m() || (46 == a.keyCode ? N && q(a, N) : 187 == a.keyCode || 171 == a.keyCode || 107 == a.keyCode ? "TEXTAREA" != b && "INPUT" != b && l(.1) : 189 == a.keyCode || 173 == a.keyCode || 109 == a.keyCode ? "TEXTAREA" != b && "INPUT" != b && l(-.1) : 90 == a.keyCode && (a.ctrlKey || a.metaKey) && a.shiftKey ? (a.preventDefault(), SEQ.main.redoChange()) : 90 == a.keyCode && (a.ctrlKey || a.metaKey) ? (a.preventDefault(), SEQ.main.undoChange()) : 89 == a.keyCode && (a.ctrlKey || a.metaKey) ? (a.preventDefault(), SEQ.main.redoChange()) : 83 == a.keyCode && (a.ctrlKey || a.metaKey) ? (a.preventDefault(), SEQ.saveAndOpen.saveDirectly()) : 79 == a.keyCode && (a.ctrlKey || a.metaKey) ? (a.preventDefault(), SEQ.saveAndOpen.showDefaultStorageOpen()) : 77 == a.keyCode && (a.ctrlKey || a.metaKey) && (a.preventDefault(), SEQ.menu.togglePresentationMode()))
        }
    }

    function l(a) {
        for (var b = !1, c = SEQ.parser.diagram.entries, d = "", e = 0; e < c.length; e++) {
            var f = c[e];
            null != f.entrySpacing && (b = !0, f.raw = SEQ.entityEntrySpacing.build(f.entrySpacing + a)), !b && f.type && f.type != SEQ.entityParticipant.Type.PARTICIPANT && f.type != SEQ.entityTitle.Type.TITLE && (d += SEQ.entityEntrySpacing.build(SEQ.metrics.constants.entrySpacingRatio + a) + "\n", b = !0), d = I(e, c, d, f.raw)
        }
        SEQ.main.updateSource(d), SEQ.parser.parse()
    }

    function m() {
        return "block" == document.getElementById("entryEditor").style.display
    }

    function n(a) {
        var b = document.getElementById("entryEditor");
        P = a.clientX, Q = a.clientY, S = parseInt(b.style.top, 10), R = parseInt(b.style.left, 10), document.addEventListener("mousemove", o), document.addEventListener("mouseup", p), a.preventDefault()
    }

    function o(a) {
        var b = document.getElementById("entryEditor"),
            c = a.clientX - P,
            d = a.clientY - Q;
        b.style.top = S + d + "px", b.style.left = R + c + "px", a.preventDefault()
    }

    function p(a) {
        document.removeEventListener("mousemove", o), document.removeEventListener("mouseup", p), a.preventDefault()
    }

    function q(a, b) {
        if (!m()) {
            a.preventDefault();
            var c, d = SEQ.parser.diagram.entries;
            c = SEQ.entityParticipant.isType(b.type) ? function(a, b) {
                return a.name === b.fromParticipantName || a.name === b.toParticipantName
            } : SEQ.entityFragment.isType(b.type) && SEQ.entityFragment.Type.ELSE != b.type ? b.fragment.type === SEQ.entityFragment.Type.EXPANDABLE_PLUS ? function(a, b) {
                return a.fragment == b.fragment || a.fragment == b.enclosingCollapsedFragment
            } : function(a, b) {
                return a.fragment == b.fragment
            } : function(a, b) {
                return a === b
            };
            for (var e = "", f = 0; f < d.length; f++) {
                var g = d[f];
                c(b, g) || (e = I(f, d, e, g.raw))
            }
            SEQ.main.updateSource(e), SEQ.parser.parse()
        }
    }

    function r() {
        var a = SEQ.parser.diagram.entries,
            b = !1,
            c = "";
        V++;
        for (var d = "participant ChangeMe" + V, e = 0; e < a.length; e++) {
            var f = a[e];
            !f.type || SEQ.entityTitle.isType(f.type) || SEQ.entityParticipant.isType(f.type) || b || (c += d + "\n", b = !0), c = I(e, a, c, f.raw)
        }
        b || (c += "\n" + d), SEQ.main.updateSource(c), SEQ.parser.parse()
    }

    function s() {
        for (var a = SEQ.parser.diagram.entries, b = "", c = 0; c < a.length; c++) {
            var d = a[c];
            b = I(c, a, b, d.raw)
        }
        SEQ.main.updateSource(b), SEQ.parser.parse()
    }

    function t(a) {
        function b() {
            return SEQ.entityMessage.regExpArrow.exec(a.type) ? SEQ.entityMessage.build(a.type, a.fromParticipantName, a.toParticipantName, a.text) : SEQ.entityNoteBoxLeftRight.isType(a.type) ? a.notePosition === SEQ.entityNoteBoxOver.NotePosition.OVER ? SEQ.entityNoteBoxOver.build(a.type, a.participants, a.text) : SEQ.entityNoteBoxLeftRight.build(a.type, a.notePosition, a.participants, a.text) : SEQ.entityDivider.isType(a.type) ? SEQ.entityDivider.build(a.text) : SEQ.entityFragment.isType(a.type) ? SEQ.entityFragment.build(a.type, a.text) : SEQ.entityActivation.isType(a.type) ? SEQ.entityActivation.build(a.type, a.participants) : SEQ.entitySpace.isType(a.type) ? SEQ.entitySpace.build(a.type) : void 0
        }
        for (var c = SEQ.parser.diagram.entries, d = !1, e = "", f = 0; f < c.length; f++) {
            var g = c[f];
            !d && g.type && a.posY < g.position.posY && (e += b() + "\n", d = !0), e = I(f, c, e, g.raw)
        }
        d || (e += "\n" + b()), a = null, SEQ.main.updateSource(e), SEQ.parser.parse()
    }

    function u(a) {
        return Y ? (a.preventDefault(), Z = !1, void w(a)) : (m() || X || (SEQ.messageCreator.finishMessage(a), SEQ.entryMover.finishMove(a)), void y(a))
    }

    function v(a) {
        function c(a) {
            return a.buttons ? 1 != a.buttons : !!a.which && 1 != a.which
        }
        if (Y) {
            a.preventDefault();
            var d = b(a),
                e = E(d.x, d.y);
            if (e != SEQ.entityFragment.CollisionType.TOGGLE) {
                SEQ.main.getInteractionCanvas().style.cursor = "grabbing";
                var f = document.documentElement;
                T = a.clientX + f.scrollLeft, U = a.clientY + f.scrollTop, Z = !0
            }
        } else if (m() && j(), X = c(a), !m() && !X) {
            SEQ.main.blurEditor();
            var g = (new Date).getTime();
            if (g - W < 400) {
                var h, i = b(a);
                if (z(i)) h = SEQ.entityParticipant.findParticipantXCollision(i.x, i.y);
                else {
                    var k = E(i.x, i.y);
                    k != SEQ.entityFragment.CollisionType.TOGGLE && (h = k)
                }
                N == h ? B(a) : (W = g, A(a))
            } else W = g, A(a);
            a.preventDefault()
        }
    }

    function w(a) {
        if (!a.buttons && SEQ.parser && SEQ.parser.diagram.collisionTypeAreas) {
            var b = SEQ.main.getInteractionCanvas().style,
                c = SEQ.interactor.getMousePosInCanvas(a),
                d = SEQ.parser.diagram.collisionTypeAreas.search({
                    minX: c.x,
                    maxX: c.x,
                    minY: c.y,
                    maxY: c.y
                });
            if (d.length) {
                var e;
                d.forEach(function(a) {
                    a.type.indexOf("zoom") > -1 && (e = a.type)
                }), e ? b.cursor = e : "grab" != b.cursor && (b.cursor = "grab")
            } else "grab" != b.cursor && (b.cursor = "grab")
        }
    }

    function x(a) {
        if (Y)
            if (Z && !a.buttons && (Z = !1, SEQ.main.getInteractionCanvas().style.cursor = "grab"), Z) {
                var b = document.documentElement;
                a.preventDefault();
                var c = T - (a.clientX + b.scrollLeft),
                    d = U - (a.clientY + b.scrollTop);
                b.scrollLeft += c, b.scrollTop += d
            } else w(a);
        else m() || X || (SEQ.messageCreator.paintMessage(a), SEQ.entryMover.continueMove(a)), y(a)
    }

    function y(a) {
        if (!a.buttons && SEQ.parser && SEQ.parser.diagram.collisionTypeAreas) {
            var b = SEQ.interactor.getMousePosInCanvas(a),
                c = SEQ.parser.diagram.collisionTypeAreas.search({
                    minX: b.x,
                    maxX: b.x,
                    minY: b.y,
                    maxY: b.y
                }),
                d = SEQ.main.getInteractionCanvas().style;
            if (c.length) {
                var e;
                c.forEach(function(a) {
                    "pointer" === a.type && (e = a.type)
                }), e ? d.cursor = e : d.cursor = c[0].type
            } else "auto" != d.cursor && (d.cursor = "auto")
        }
    }

    function z(a) {
        var b = K(),
            c = b + SEQ.metrics.data.participantMarginTop + SEQ.parser.diagram.maxParticipantGroupHeight;
        return a.y > c && a.y < c + SEQ.parser.diagram.participantMaxHeight
    }

    function A(a) {
        g();
        var c = SEQ.main.getInteractionContext();
        c.save(), c.fillStyle = "#ff0000", c.strokeStyle = "#ff0000";
        var d, e = b(a),
            f = SEQ.parser.diagram.collisionTypeAreas.search({
                minX: e.x,
                maxX: e.x,
                minY: e.y,
                maxY: e.y
            });
        if (f.forEach(function(a) {
                a.link && (d = a.link)
            }), d) window.open(d);
        else if (z(e)) {
            var h = SEQ.entityParticipant.findParticipantXCollision(e.x, e.y);
            h && (N = h, SEQ.entityParticipant.paint(h, c, !1, !0), N.entry && D(N.entry), h.updatePos && SEQ.entryMover.startParticipantMove(a, h))
        } else {
            var i = E(e.x, e.y);
            if (i && i != SEQ.entityFragment.CollisionType.TOGGLE) i.paint(i, c, !0, !1, SEQ.painter.getCanvasSize()), D(i), N = i, i.updatePos && SEQ.entryMover.startMove(a, i);
            else {
                var j = SEQ.entityParticipant.findParticipantXCollision(e.x, e.y);
                j && SEQ.messageCreator.startMessage(a, j)
            }
        }
        c.restore()
    }

    function B(a) {
        if (a.preventDefault(), N)
            if (N.type == SEQ.entityParticipant.Type.PARTICIPANT) d(a, N.name, N.originalLongName);
            else if (SEQ.entityFragment.regExp.exec(N.type)) SEQ.entityFragment.Type.END != N.type && (N.elseGuard ? c(a, N.elseGuard.text) : c(a, N.fragment.text));
        else if (O) d(a, O.name, O.originalLongName);
        else if (N.textData) {
            var b = SEQ.textUtil.buildInputBoxText(N.textData);
            c(a, b)
        } else N.text && c(a, N.text)
    }

    function C(a) {
        var b, c = a.raw.indexOf(a.toParticipantName),
            d = a.raw.indexOf(a.fromParticipantName, c + 1);
        return b = c > d ? c + a.toParticipantName.length : d + a.fromParticipantName.length
    }

    function D(a) {
        var b = SEQ.parser.diagram.entries,
            c = [];
        b.forEach(function(a) {
            "undefined" != typeof a.raw && c.push(a)
        });
        var d, e = c.indexOf(a),
            f = /^[\s]*/.exec(a.raw)[0].length;
        if (SEQ.entityDivider.isType(a.type)) d = {
            start: a.raw.indexOf("==") + 2,
            end: a.raw.length - 2
        };
        else if (SEQ.entityFragment.isType(a.type)) d = {
            start: a.type.length + f + 1,
            end: a.raw.length
        };
        else if (SEQ.entityParticipant.isType(a.type))
            if (a.longName) {
                var g = a.raw.indexOf('"') + 1,
                    h = a.raw.indexOf('"', g);
                d = {
                    start: g,
                    end: h
                }
            } else d = {
                start: 0,
                end: 0
            };
        else if (SEQ.entityFrame.isType(a.type)) d = {
            start: a.type.length + f + 1,
            end: a.raw.length
        };
        else if (SEQ.entityMessage.isType(a.type)) {
            var i = C(a);
            d = {
                start: i + 1,
                end: a.raw.length
            }
        } else d = {
            start: 0,
            end: a.raw.length
        };
        SEQ.main.selectInSource(e, d.start, d.end), SEQ.main.focusEditor()
    }

    function E(a, b) {
        function c(c) {
            return b < c.startY && b > c.endY && a > c.startX && a < c.endX
        }
        for (var d = SEQ.parser.diagram, e = d.entries, f = 0; f < e.length; f++) {
            var g = e[f];
            if (!g.enclosingCollapsedFragment) {
                var h;
                if (g.collision && (h = g.collision(g, a, b)), h) {
                    if (h === SEQ.entityFragment.CollisionType.TOGGLE) return F(g), SEQ.entityFragment.CollisionType.TOGGLE;
                    if (h.participantToCreate && c(h.participantToCreate) && (O = g.participantToCreate), h.main && c(h.main) || h.participantToCreate && c(h.participantToCreate)) return g
                }
            }
        }
    }

    function F(a) {
        for (var b = SEQ.parser.diagram.entries, c = "", d = 0; d < b.length; d++) {
            var e = b[d];
            if (e === a) {
                var f;
                f = e.raw.indexOf(SEQ.entityFragment.Type.EXPANDABLE_PLUS) > -1 ? e.raw.replace(SEQ.entityFragment.Type.EXPANDABLE_PLUS, SEQ.entityFragment.Type.EXPANDABLE_MINUS) : e.raw.indexOf(SEQ.entityFragment.Type.EXPANDABLE_MINUS) > -1 ? e.raw.replace(SEQ.entityFragment.Type.EXPANDABLE_MINUS, SEQ.entityFragment.Type.EXPANDABLE_PLUS) : e.raw.replace(SEQ.entityFragment.Type.EXPANDABLE_DASH, SEQ.entityFragment.Type.EXPANDABLE_PLUS), c = I(d, b, c, f)
            } else c = I(d, b, c, e.raw)
        }
        SEQ.main.updateSource(c), SEQ.parser.parse()
    }

    function G() {
        var a = SEQ.main.getInteractionContext();
        return a.clearRect(0, 0, a.canvas.width, a.canvas.height), a
    }

    function H(a) {
        var b = a.target;
        document.getElementById("interactionCanvas").contains(b) || (m() ? document.getElementById("entryEditor").contains(b) || j() : h());
        var c = document.getElementById("contextMenu");
        c && !c.contains(b) && g(), SEQ.saveAndOpen.onDocumentMouseDown(a)
    }

    function I(a, b, c, d) {
        if ("undefined" != typeof d) {
            for (var e = 0, f = a + 1; f < b.length; f++) "undefined" != typeof b[f].raw && e++;
            c += 0 === e ? d : d + "\n"
        }
        return c
    }

    function J() {
        var a;
        a = "none" == document.getElementById("top").style.display ? 5 : 79;
        var b = 0;
        b += K(), b += SEQ.parser.diagram.maxParticipantGroupHeight;
        var c = SEQ.main.getParticipantCanvas();
        window.pageYOffset > b && SEQ.menu.isParticipantOverlay() ? c.style.display = "block" : c.style.display = "none", c.style.top = window.pageYOffset + a + "px"
    }

    function K() {
        var a = SEQ.parser.diagram.frame ? SEQ.parser.diagram.frame.totalHeight : 0,
            b = SEQ.parser.diagram.title ? SEQ.parser.diagram.title.totalHeight : 0;
        return a + b
    }

    function L(a) {
        Y = a
    }
    var M, N, O, P, Q, R, S, T, U, V = 0,
        W = 0,
        X = !1,
        Y = !1,
        Z = !1;
    return {
        init: function() {
            var a = SEQ.main.getInteractionCanvas();
            a.addEventListener("mouseup", u, !1), a.addEventListener("mousedown", v, !1), a.addEventListener("mousemove", x, !1), document.addEventListener("keydown", k, !1), document.addEventListener("mousedown", H, !1), window.addEventListener("scroll", J, !1)
        },
        prependParticipant: r,
        cancelAllInteraction: g,
        editEntryTextAreaActive: m,
        getMousePosInCanvas: b,
        displayInputBox: c,
        setNewEntryData: a,
        createEntry: t,
        clearInteractionContext: G,
        onWindowScroll: J,
        onEntryEditorTextAreaKeyDown: i,
        saveEditEntryResult: j,
        entryEditorMouseDown: n,
        setReadOnly: L,
        appendEntry: I
    }
}();
var SEQ = SEQ || {};
SEQ.contextMenu = function() {
    function a(a) {
        if (!SEQ.interactor.editEntryTextAreaActive()) {
            SEQ.interactor.cancelAllInteraction(!0);
            var f = SEQ.interactor.getMousePosInCanvas(a),
                j = SEQ.entityParticipant.findParticipantXCollision(f.x, f.y);
            i = {
                event: a,
                posY: f.y
            }, h = document.createElement("div"), h.id = "contextMenu", document.body.appendChild(h);
            var k = document.createElement("ul");
            k.className = "contextMenuPart", k.style.width = "160px", k.style.top = Math.ceil(a.pageY) + 2 + "px", k.style.left = Math.ceil(a.pageX) + 2 + "px", k.onmouseup = g, h.appendChild(k), j && (e(k, "note", b(SEQ.entityNoteBoxOver.Type.NOTE, j)), e(k, "box", b(SEQ.entityNoteBoxOver.Type.BOX, j)), e(k, "round box", b(SEQ.entityNoteBoxOver.Type.RBOX, j)), e(k, "angular box", b(SEQ.entityNoteBoxOver.Type.ABOX, j)), e(k, "reference", b(SEQ.entityNoteBoxOver.Type.REF, j)), e(k, "activation", d(j))), e(k, "fragment", c(f)), e(k, "divider", null, SEQ.entityDivider.Type.DIVIDER), e(k, "space", null, SEQ.entitySpace.Type.SPACE)
        }
        return a.preventDefault(), !1
    }

    function b(a, b) {
        var c = document.createElement("ul");
        c.className = "contextMenuPart contextSubMenuPart", a !== SEQ.entityNoteBoxOver.Type.REF && (f(c, a, SEQ.entityNoteBoxLeftRight.NotePosition.LEFT, b.name), f(c, a, SEQ.entityNoteBoxLeftRight.NotePosition.RIGHT, b.name)), f(c, a, SEQ.entityNoteBoxOver.NotePosition.OVER, b.name);
        var d = SEQ.parser.diagram.participants;
        return d.forEach(function(d) {
            d.name !== b.name && f(c, a, SEQ.entityNoteBoxOver.NotePosition.OVER, b.name + "," + d.name)
        }), h.appendChild(c), c
    }

    function c(a) {
        var b = document.createElement("ul");
        return b.className = "contextMenuPart contextSubMenuPart", f(b, SEQ.entityFragment.Type.ALT), SEQ.entityFragment.insideFragmentType(a, SEQ.entityFragment.Type.ALT) && f(b, SEQ.entityFragment.Type.ELSE), f(b, SEQ.entityFragment.Type.OPT), f(b, SEQ.entityFragment.Type.LOOP), f(b, SEQ.entityFragment.Type.PAR), SEQ.entityFragment.insideFragmentType(a, SEQ.entityFragment.Type.PAR) && f(b, SEQ.entityFragment.Type.THREAD), f(b, SEQ.entityFragment.Type.GROUP), f(b, SEQ.entityFragment.Type.EXPANDABLE_MINUS), f(b, SEQ.entityFragment.Type.ASSERT), f(b, SEQ.entityFragment.Type.BREAK), f(b, SEQ.entityFragment.Type.CONSIDER), f(b, SEQ.entityFragment.Type.CRITICAL), f(b, SEQ.entityFragment.Type.IGNORE), f(b, SEQ.entityFragment.Type.NEG), f(b, SEQ.entityFragment.Type.SEQ), f(b, SEQ.entityFragment.Type.STRICT), h.appendChild(b), b
    }

    function d(a) {
        var b = document.createElement("ul");
        return b.className = "contextMenuPart contextSubMenuPart", f(b, SEQ.entityActivation.Type.ACTIVATE, null, a.name), f(b, SEQ.entityActivation.Type.DEACTIVATE, null, a.name), f(b, SEQ.entityActivation.Type.DEACTIVATE_AFTER, null, a.name), h.appendChild(b), b
    }

    function e(a, b, c, d) {
        var e = document.createElement("li");
        a.appendChild(e), e.className = "mainMenuListElement", c ? (e.innerHTML = '<span style="float: right">&gt;</span>' + b, c.style.top = Math.ceil(e.getBoundingClientRect().top + window.pageYOffset) - 2 + "px", c.style.left = Math.ceil(a.getBoundingClientRect().right + window.pageXOffset) - 2 + "px", c.onmouseup = g) : e.innerHTML = b, d && e.setAttribute("data-entry-type", d), e.onmouseover = function() {
            for (var a = document.getElementsByClassName("contextSubMenuPart"), b = 0; b < a.length; b++) a[b].style.display = "none";
            for (var d = document.getElementsByClassName("mainMenuListElement"), f = 0; f < d.length; f++) d[f].style.backgroundColor = "#ffffff";
            e.style.backgroundColor = "#eeeeee", c && (c.style.display = "block")
        }
    }

    function f(a, b, c, d, e) {
        var f = document.createElement("li");
        f.setAttribute("data-entry-type", b), d && f.setAttribute("data-entry-participants", d), c && f.setAttribute("data-entry-note-position", c), e ? f.innerHTML = e : c && d ? f.innerHTML = b + " " + c + " " + d : d ? f.innerHTML = b + " " + d : f.innerHTML = b, a.appendChild(f)
    }

    function g(a) {
        var b = a.target,
            c = b.getAttribute("data-entry-type"),
            d = b.getAttribute("data-entry-note-position"),
            e = b.getAttribute("data-entry-participants");
        if (c) {
            document.body.removeChild(h), h = null;
            var f = {
                participants: e,
                posY: i.posY,
                type: c,
                notePosition: d
            };
            SEQ.interactor.setNewEntryData(f), SEQ.entityActivation.isType(c) || SEQ.entitySpace.isType(c) ? SEQ.interactor.createEntry(f) : SEQ.interactor.displayInputBox(i.event), i = null
        }
    }
    var h, i;
    return {
        init: function() {
            var b = SEQ.main.getInteractionCanvas();
            b.addEventListener("contextmenu", a, !1)
        },
        active: function() {
            return null != h
        },
        cancel: function() {
            h && document.body.removeChild(h), i = null, h = null
        }
    }
}();
var SEQ = SEQ || {};
SEQ.messageCreator = function() {
    function a(a, b) {
        var c = SEQ.interactor.getMousePosInCanvas(a);
        e = {
            shift: a.shiftKey,
            ctrl: a.ctrlKey,
            x: c.x,
            y: c.y,
            participant: b
        }
    }

    function b(a) {
        var b = SEQ.interactor.getMousePosInCanvas(a);
        if (e) {
            var c = SEQ.entityParticipant.findParticipantXCollision(e.x, e.y),
                d = SEQ.entityParticipant.findParticipantXCollision(b.x, b.y);
            if (c && d && (Math.abs(b.y - e.y) > SEQ.metrics.data.messageCreatorPosDiffThreshold || Math.abs(b.x - e.x) > SEQ.metrics.data.messageCreatorInteractionMargin && c != d)) {
                var f;
                f = d.posX >= c.posX ? e.shift ? e.ctrl ? SEQ.entityMessage.Type.RESP_FORWARD_ASYNC : SEQ.entityMessage.Type.RESP_FORWARD_SYNC : e.ctrl ? SEQ.entityMessage.Type.REQ_FORWARD_ASYNC : SEQ.entityMessage.Type.REQ_FORWARD_SYNC : e.shift ? e.ctrl ? SEQ.entityMessage.Type.RESP_BACKWARD_ASYNC : SEQ.entityMessage.Type.RESP_BACKWARD_SYNC : e.ctrl ? SEQ.entityMessage.Type.REQ_BACKWARD_ASYNC : SEQ.entityMessage.Type.REQ_BACKWARD_SYNC;
                var g = (e.y + b.y) / 2,
                    h = {
                        fromParticipantName: c.name,
                        toParticipantName: d.name,
                        posY: g,
                        type: f
                    };
                return SEQ.interactor.setNewEntryData(h), SEQ.interactor.displayInputBox(a), !0
            }
            SEQ.interactor.cancelAllInteraction(), e = null
        }
    }

    function c(a) {
        e && (a.preventDefault(), d(a))
    }

    function d(a) {
        var b = SEQ.interactor.clearInteractionContext();
        if (e) {
            var c = SEQ.interactor.getMousePosInCanvas(a);
            b.save(), e.shift && void 0 !== b.setLineDash && b.setLineDash([SEQ.metrics.data.messageLineDashWidth]);
            var d;
            if (Math.abs(e.participant.posX - c.x) < SEQ.metrics.data.messageCreatorInteractionMargin && Math.abs(c.y - e.y) > SEQ.metrics.data.messageCreatorPosDiffThreshold) {
                d = !1, b.beginPath();
                var f = SEQ.metrics.data.messageSelfRefWidth,
                    g = e.participant.posX;
                b.moveTo(e.participant.posX, e.y), b.lineTo(g + f, e.y), b.lineTo(g + f, c.y), b.lineTo(c.x, c.y), b.stroke()
            } else {
                var h = e.participant.posX,
                    i = c.x > e.participant.posX ? -1 * SEQ.metrics.data.messageArrowWidth : SEQ.metrics.data.messageArrowWidth;
                d = e.participant.posX < c.x, b.beginPath(), b.moveTo(h, e.y), b.lineTo(c.x + i, c.y), b.stroke()
            }
            b.restore(), SEQ.entityMessage.paintArrowHead(c.y, d, c.x, b, e.ctrl)
        }
    }
    var e;
    return {
        init: function() {
            var a = SEQ.main.getInteractionCanvas();
            a.addEventListener("contextmenu", onCanvasContextMenu, !1)
        },
        cancel: function() {
            e = null
        },
        startMessage: a,
        finishMessage: b,
        paintMessage: c
    }
}();
var SEQ = SEQ || {};
SEQ.entryMover = function() {
    function a(a) {
        m && (w = 0, x = 0, a.clientY < 50 ? x = -20 : a.clientY > window.innerHeight - 50 && (x = 20), a.clientX < 50 ? w = -20 : a.clientX > window.innerWidth - 50 && (w = 20), 0 != w || 0 != x ? y || (y = !0, z()) : y = !1)
    }

    function b(a, b) {
        e(), u = !0;
        var c = SEQ.interactor.getMousePosInCanvas(a);
        n = b, q = n.posX - c.x, r = c
    }

    function c(a, b) {
        if (b.calcPosX) {
            var c = b.calcPosX(b);
            o = c.fromX, p = c.toX
        }
        e(), n = b;
        var d = SEQ.interactor.getMousePosInCanvas(a);
        b.toParticipantName ? (!b.participantToCreate && Math.abs(d.x - p) < SEQ.metrics.data.entryMoverXCollisionWidth && (t = !0), Math.abs(d.x - o) < SEQ.metrics.data.entryMoverXCollisionWidth && (s = !0), s && t && (Math.abs(d.x - p) > Math.abs(d.x - o) ? (t = !1, s = !0) : (t = !0, s = !1))) : b.notePosition === SEQ.entityNoteBoxOver.NotePosition.OVER ? Math.abs(d.x - o) > b.totalWidth / 2 - 1.5 * SEQ.metrics.data.entryMoverXCollisionWidth ? (p = o, v = !0, d.x > o ? t = !0 : s = !0) : s = !0 : b.fromParticipantName && !b.lockedPosX && (s = !0), q = n.position.posY - d.y, r = d
    }

    function d(a) {
        return Math.abs(r.y - a.y) > SEQ.metrics.data.entryMoverThreshold || Math.abs(r.x - a.x) > SEQ.metrics.data.entryMoverThreshold
    }

    function e() {
        n = null, m = null, s = !1, t = !1, u = !1, v = !1, y = !1, w = 0, x = 0, window.removeEventListener("mousemove", a, !1)
    }

    function f(a) {
        var b = SEQ.interactor.getMousePosInCanvas(a);
        if (m && d(b)) {
            var c;
            c = u ? g(b) : i(b), SEQ.main.updateSource(c), SEQ.parser.parse()
        }
        m && SEQ.interactor.clearInteractionContext(), e()
    }

    function g(a) {
        var b = SEQ.parser.diagram.participants,
            c = [];
        b.forEach(function(a) {
            a.declared || c.push(a)
        });
        for (var d = SEQ.parser.diagram.entries, e = "", f = !1, g = !1, i = 0; i < d.length; i++) {
            var k = d[i];
            SEQ.entityParticipant.isType(k.type) && a.x < k.posX && !g && (e += "\n" + h(m) + "\n", g = !0), !k.type || SEQ.entityTitle.isType(k.type) || SEQ.entityParticipant.isType(k.type) || SEQ.entityParticipantGroup.isType(k.type) || f || (c.forEach(function(b) {
                a.x < b.posX && !g && (e += "\n" + h(m) + "\n", g = !0), b.name != m.name && (e += "\n" + SEQ.entityParticipant.build(SEQ.entityParticipant.Type.PARTICIPANT, b.name))
            }), f = !0, g || (e += "\n" + h(m) + "\n"), c.length && (e += "\n")), SEQ.entityParticipant.isType(k.type) && k.fromParticipantName == m.name || (e = j(i, e, k.raw))
        }
        return e
    }

    function h(a) {
        return a.declared ? a.entry.raw : SEQ.entityParticipant.build(SEQ.entityParticipant.Type.PARTICIPANT, a.name)
    }

    function i(a) {
        var b = m.raw;
        if (s) {
            var c = SEQ.entityParticipant.findParticipantXCollision(a.x, a.y);
            c && (m.notePosition === SEQ.entityNoteBoxOver.NotePosition.OVER && m.toParticipantName === c.name ? (m.fromParticipantName = c.name, m.toParticipantName = null) : m.fromParticipantName = c.name, b = m.buildRaw(m))
        } else if (t) {
            var d = SEQ.entityParticipant.findParticipantXCollision(a.x, a.y);
            d && (m.notePosition === SEQ.entityNoteBoxOver.NotePosition.OVER && m.fromParticipantName === d.name ? (m.fromParticipantName = d.name, m.toParticipantName = null) : m.toParticipantName = d.name, b = m.buildRaw(m))
        }
        for (var e = SEQ.parser.diagram.entries, f = !1, g = "", h = 0; h < e.length; h++) {
            var i = e[h];
            !f && i.type && a.y + q < i.position.posY && (g = j(h, g, b), f = !0, 0 === h && (g += "\n")), i != n && (g = j(h, g, i.raw))
        }
        return f || (g += "\n" + b), g
    }

    function j(a, b, c) {
        return "undefined" != typeof c && (b += 0 === a ? c : "\n" + c), b
    }

    function k(b) {
        if (b.preventDefault(), n && !m) {
            var c = SEQ.interactor.getMousePosInCanvas(b);
            d(c) && (window.addEventListener("mousemove", a, !1), m = SEQ.main.clone(n), m.paint = n.paint, n.participantToCreate && (m.participantToCreate = n.participantToCreate), m.updatePos = n.updatePos, m.buildRaw = n.buildRaw, v && (m.toParticipantName = m.fromParticipantName), n.participantType && (m.participantType = n.participantType))
        } else m && l(b)
    }

    function l(a) {
        var b = SEQ.interactor.clearInteractionContext();
        if (m) {
            var c = SEQ.interactor.getMousePosInCanvas(a);
            b.save(), b.globalAlpha = .5, s ? m.updatePos(m, c.y + q, c.x, p) : t ? m.updatePos(m, c.y + q, o, c.x) : u ? m.updatePos(m, c.x) : m.updatePos(m, c.y + q, o, p), m.paint(m, b, !1, !0, SEQ.painter.getCanvasSize()), b.restore()
        }
    }
    var m, n, o, p, q, r, s, t, u, v, w, x, y = !1,
        z = function() {
            0 == w && 0 == x || !m || (window.scrollBy(w, x), setTimeout(z, 40))
        };
    return {
        cancel: function() {
            e()
        },
        startMove: c,
        finishMove: f,
        continueMove: k,
        startParticipantMove: b
    }
}();
var SEQ = SEQ || {};
SEQ.textUtil = function() {
    function a(a, b) {
        for (var c = a.replace(/\\\\(n|r|t)/g, "\0$1\0"), e = c.split("\\n"), f = 0; f < e.length; f++) e[f] = e[f].replace(/\x00(n|r|t)\x00/g, "\\\\$1");
        var g = 0,
            h = 0,
            i = !1,
            k = !1,
            v = [],
            w = "black",
            x = !1,
            y = null,
            z = null,
            A = !1,
            B = null,
            C = null,
            D = !1,
            E = [];
        e.forEach(function(a) {
            var b = 0;
            a = a.replace(/\\(\+|\-|\/|\*|\")/g, "=-=ssss=-=$1=-=eeee=-=");
            var c, e = a.split(/(\*\*|\/\/|\+\+|--|""|~~|<(?:color|link|align|size|stroke|background|difference)(?:\s|:)[^>]+>|<\/(?:color|link|align|size|stroke|background|difference)>)/),
                f = [],
                j = 0;
            e.forEach(function(a) {
                var g;
                if ("" === a && e.length > 1);
                else if ("**" === a) i = !i;
                else if ("~~" === a) A = !A;
                else if ("//" !== a || c && (c.indexOf("http:") > -1 || c.indexOf("https:") > -1 || c.indexOf("ftp:") > -1 || c.indexOf("gopher:") > -1 || c.indexOf("file:") > -1))
                    if ("--" === a) v[v.length - 1] === n.small ? v.pop() : v.push(n.small);
                    else if ("++" === a) v[v.length - 1] === n.big ? v.pop() : v.push(n.big);
                else if ('""' === a) x = x === !1;
                else if ((g = o.exec(a)) && g.length > 0) {
                    var h = p.exec(g[1]);
                    h && (h[1] ? w = h[1] : h[2] && (w = h[2]))
                } else if ("</color>" === a) w = "black";
                else if ((g = q.exec(a)) && g.length > 0) y = g[1];
                else if ("</link>" === a) y = null;
                else if ((g = r.exec(a)) && g.length > 0) z = g[1];
                else if ("</align>" === a) z = null;
                else if ((g = s.exec(a)) && g.length > 0) v.push(g[1]);
                else if ("</size>" === a) v.pop();
                else if ((g = t.exec(a)) && g.length > 0) B = {
                    weight: g[1],
                    color: g[2] ? g[2] : g[3]
                };
                else if ("</stroke>" === a) B = null;
                else if ((g = u.exec(a)) && g.length > 0) C = g[1] ? g[1] : g[2];
                else if ("</background>" === a) C = null;
                else if ("<difference>" === a) D = !0;
                else if ("</difference>" === a) D = !1;
                else {
                    var E, F, G = v[v.length - 1];
                    if (n.small == G) E = x ? SEQ.main.getFontMonoSmall() : SEQ.main.getFontSmall(), F = SEQ.main.getLineHeightFontSmall();
                    else if (n.big == G) E = x ? SEQ.main.getFontMonoBig() : SEQ.main.getFontBig(), F = SEQ.main.getLineHeightFontBig();
                    else if (G) {
                        var H = parseFloat(G);
                        E = x ? SEQ.main.getFontMonoNumeric(H) : SEQ.main.getFontNumeric(H), F = SEQ.main.getLineHeightFontNumeric(H)
                    } else E = x ? SEQ.main.getFontMonoNormal() : SEQ.main.getFontNormal(), F = SEQ.metrics.data.textLineHeight;
                    i && (E = l + E), k && (E = m + E), a = a.replace(/=-=ssss=-=(.)=-=eeee=-=/g, "$1");
                    var I = SEQ.metrics.calcWidth(d(a), E);
                    b += I, f.push({
                        part: a,
                        font: E,
                        color: w,
                        width: I,
                        height: F,
                        link: y,
                        align: z,
                        strikeThrough: A,
                        stroke: B,
                        background: C,
                        difference: D
                    }), F > j && (j = F)
                } else k = !k;
                c = a
            }), h += j, E.push({
                partsWithFonts: f,
                lineMaxHeight: j,
                lineWidth: b
            }), b > g && (g = b)
        });
        var F;
        return b && (F = SEQ.metrics.calcWidth(b + " ", "bold " + SEQ.main.getFontNormal()), g += F), {
            parsedLines: E,
            lines: e,
            width: g,
            height: h + E[E.length - 1].lineMaxHeight * j,
            autoNumberWidth: F
        }
    }

    function b(a, b, d, e, g, h, i, j) {
        a.save(), j && c(a, d, e, g, h, i, j), f(a, b, d, e, g, h, i), a.restore()
    }

    function c(a, b, c, d, e, f, g) {
        var h = d,
            i = !0;
        b.forEach(function(d) {
            var k, l;
            i && e && f ? (c += f, k = c - f - SEQ.metrics.data.textBackgroundPadding, l = d.lineWidth + 2 * SEQ.metrics.data.textBackgroundPadding + f, i = !1) : (k = c - SEQ.metrics.data.textBackgroundPadding, l = d.lineWidth + 2 * SEQ.metrics.data.textBackgroundPadding), a.save(), a.fillStyle = g, a.fillRect(k, h, l, d.lineMaxHeight + b[b.length - 1].lineMaxHeight * j), a.restore(), h += d.lineMaxHeight
        })
    }

    function d(a) {
        return a.replace(/\\\\n/g, "\\n").replace(/\\\\r/g, "\\r").replace(/\\\\t/g, "\\t")
    }

    function e(a, b, c, d, e) {
        var f = e;
        c.forEach(function(c) {
            var e = c.partsWithFonts;
            f += c.lineMaxHeight;
            var h = 0;
            e.forEach(function(b) {
                a.font = b.font, h += b.width
            });
            var i = d - h / 2;
            g(e, a, f, i, c, b)
        })
    }

    function f(a, b, c, d, e, f, h) {
        f && h && (d += h);
        var i = e - c[0].lineMaxHeight * k,
            j = 0;
        c.forEach(function(b) {
            var c = 0;
            b.partsWithFonts.forEach(function(b) {
                a.font = b.font, c += b.width
            }), c > j && (j = c)
        });
        var l = !0;
        c.forEach(function(c) {
            var e = c.partsWithFonts,
                k = null;
            e.length > 0 && e[0].align === e[e.length - 1].align && (k = e[0].align);
            var m = 0;
            e.forEach(function(b) {
                a.font = b.font, m += b.width
            }), i += c.lineMaxHeight;
            var n;
            if (n = "center" === k ? d + j / 2 - m / 2 : "right" === k ? d + j - m : d, g(e, a, i, n, c, b), f && l) {
                a.save(), a.font = "bold " + SEQ.main.getFontNormal();
                var o = f + " ";
                a.fillText(o, d - h, i), a.restore(), l = !1
            }
        })
    }

    function g(a, b, c, e, f, g) {
        a.forEach(function(a) {
            if (b.font = a.font, a.link)
                if (b.__root) b.__fontHref = a.link, b.__fontUnderline = "underline";
                else {
                    b.beginPath();
                    var h = c + b.lineWidth;
                    b.moveTo(e, h), b.lineTo(e + a.width, h), b.stroke(), SEQ.parser.diagram.collisionTypeAreas && SEQ.parser.diagram.collisionTypeAreas.insert({
                        minX: e,
                        maxX: e + a.width,
                        minY: c - .7 * f.lineMaxHeight,
                        maxY: c,
                        type: "pointer",
                        link: a.link
                    })
                } if (g || (b.fillStyle = a.color, b.strokeStyle = a.color), a.background) {
                var i = b.fillStyle;
                b.save(), b.fillStyle = a.background, b.fillRect(e, c - f.lineMaxHeight + .26 * f.lineMaxHeight, a.width, f.lineMaxHeight + .01 * f.lineMaxHeight), b.fillStyle = i
            }
            var j = d(a.part);
            if (a.stroke) {
                var k = b.miterLimit,
                    l = b.strokeStyle,
                    m = b.lineWidth;
                b.miterLimit = 2, b.strokeStyle = a.stroke.color, b.lineWidth = SEQ.main.getTextStrokeWeight(a.stroke.weight), b.strokeText(j, e, c), b.strokeStyle = l, b.lineWidth = m, b.miterLimit = k
            }
            if (a.difference) {
                var n = b.globalCompositeOperation;
                b.globalCompositeOperation = "difference"
            }
            if (b.fillText(j, e, c), a.link && b.__root && (b.__fontHref = null, b.__fontUnderline = null), a.strikeThrough) {
                b.beginPath();
                var o = c - .26 * a.height;
                b.moveTo(e, o), b.lineTo(e + a.width, o), b.stroke()
            }
            a.difference && (b.globalCompositeOperation = n), e += a.width
        })
    }

    function h(a) {
        var b = "",
            c = 0;
        return a.lines.forEach(function(d) {
            b += d, c < a.lines.length - 1 && (b += "\\n"), c++
        }), b
    }

    function i(a) {
        var b = "",
            c = 0;
        return a.lines.forEach(function(d) {
            b += d, c < a.lines.length - 1 && (b += "\n"), c++
        }), b
    }
    var j = .3,
        k = .1,
        l = "bold ",
        m = "italic ",
        n = {
            normal: "normal",
            small: "small",
            big: "big"
        },
        o = new RegExp("<color(?:\\s|:)(.+)>"),
        p = new RegExp("(?:\\s?(#[a-fA-F0-9]{6})|(?:\\s?#)([a-zA-Z]{3,20}))"),
        q = new RegExp("<link(?:\\s|:)(.+)>"),
        r = new RegExp("<align(?:\\s|:)(left|right|center)>"),
        s = new RegExp("<size(?:\\s|:)([0-9]+)>"),
        t = new RegExp("<stroke(?:\\s|:)([0-9]+(?:\\.[0-9]+)?)(?:\\s|:)(?:(#[a-fA-F0-9]{6})|#([a-zA-Z]{3,20}))>"),
        u = new RegExp("<background(?:\\s|:)(?:(#[a-fA-F0-9]{6})|#([a-zA-Z]{3,20}))>");
    return {
        parseTextData: a,
        buildInputBoxText: i,
        buildSourceText: h,
        fillText: b,
        fillTextParticipant: e
    }
}();
var SEQ = SEQ || {};
SEQ.participantTypes = function() {
    function a(a, b, c, d, e, f, g, h) {
        for (var i = g; i < h; i += .01) {
            var j = b - e * Math.sin(i) * Math.sin(f) + d * Math.cos(i) * Math.cos(f),
                k = c + d * Math.cos(i) * Math.sin(f) + e * Math.sin(i) * Math.cos(f);
            0 == i ? a.moveTo(j, k) : a.lineTo(j, k)
        }
    }

    function b(a, b) {
        a.styling && a.styling.fillColor ? b.fillStyle = a.styling.fillColor : b.fillStyle = "white", b.fill()
    }

    function c(a, b) {
        0 != a.styling.lineWeight && (a.styling.lineWeight ? b.lineWidth = SEQ.main.getLineWeightParticipantType(a.styling.lineWeight) : b.lineWidth = b.lineWidth = SEQ.metrics.data.participantTypeLineWeight, a.styling.lineColor && (b.strokeStyle = a.styling.lineColor), b.stroke())
    }

    function d() {
        return 3.14 * SEQ.metrics.data.baseSpaceMetric - SEQ.metrics.data.participantTypeLineWeight
    }
    return {
        fontawesome: {
            paint: function(a, b, c, d, e) {
                var f, g = b.longNameTextData ? b.longNameTextData.height : SEQ.metrics.data.textLineHeight + SEQ.metrics.data.textTopBottomPadding;
                if (e) {
                    var h = SEQ.metrics.calcHeight(SEQ.main.getFontFontAwesome(), b.iconUnicode, SEQ.main.getFontIconSize());
                    f = e + g + SEQ.metrics.data.baseSpaceMetric / 3 + h
                } else f = c + d - g - SEQ.metrics.data.baseSpaceMetric / 3;
                a.save(), a.font = SEQ.main.getFontFontAwesome();
                var i = SEQ.metrics.calcWidth(b.iconUnicode, SEQ.main.getFontFontAwesome());
                b.styling.fillColor && (a.fillStyle = b.styling.fillColor), a.fillText(b.iconUnicode, b.posX - i / 2, f), a.restore()
            },
            width: function(a) {
                return SEQ.metrics.calcWidth(a, SEQ.main.getFontFontAwesome())
            },
            height: function(a) {
                return SEQ.metrics.calcHeight(SEQ.main.getFontFontAwesome(), a, SEQ.main.getFontIconSize())
            }
        },
        materialdesignicons: {
            paint: function(a, b, c, d, e) {
                var f, g = b.longNameTextData ? b.longNameTextData.height : SEQ.metrics.data.textLineHeight + SEQ.metrics.data.textTopBottomPadding;
                if (e) {
                    var h = SEQ.metrics.calcHeight(SEQ.main.getFontFontAwesome(), b.iconUnicode, SEQ.main.getFontIconSize());
                    f = e + g + h
                } else f = c + d - g;
                a.save(), a.font = SEQ.main.getFontMaterialDesignIcons();
                var i = SEQ.metrics.calcWidth(b.iconUnicode, SEQ.main.getFontMaterialDesignIcons());
                b.styling.fillColor && (a.fillStyle = b.styling.fillColor), a.fillText(b.iconUnicode, b.posX - i / 2, f), a.restore()
            },
            width: function(a) {
                return SEQ.metrics.calcWidth(a, SEQ.main.getFontMaterialDesignIcons())
            },
            height: function(a) {
                return SEQ.metrics.calcHeight(SEQ.main.getFontMaterialDesignIcons(), a, SEQ.main.getFontIconSize())
            }
        },
        fontawesome5brands: {
            paint: function(a, b, c, d, e) {
                var f, g = b.longNameTextData ? b.longNameTextData.height : SEQ.metrics.data.textLineHeight + SEQ.metrics.data.textTopBottomPadding;
                if (e) {
                    var h = SEQ.metrics.calcHeight(SEQ.main.getFontFontAwesome(), b.iconUnicode, SEQ.main.getFontIconSize());
                    f = e + g + h
                } else f = c + d - g - SEQ.metrics.data.baseSpaceMetric / 2;
                a.save(), a.font = SEQ.main.getFontFontAwesome5Brands();
                var i = SEQ.metrics.calcWidth(b.iconUnicode, SEQ.main.getFontFontAwesome5Brands());
                b.styling.fillColor && (a.fillStyle = b.styling.fillColor), a.fillText(b.iconUnicode, b.posX - i / 2, f), a.restore()
            },
            width: function(a) {
                return SEQ.metrics.calcWidth(a, SEQ.main.getFontFontAwesome5Brands())
            },
            height: function(a) {
                return SEQ.metrics.calcHeight(SEQ.main.getFontFontAwesome5Brands(), a, SEQ.main.getFontIconSize())
            }
        },
        fontawesome5regular: {
            paint: function(a, b, c, d, e) {
                var f, g = b.longNameTextData ? b.longNameTextData.height : SEQ.metrics.data.textLineHeight + SEQ.metrics.data.textTopBottomPadding;
                if (e) {
                    var h = SEQ.metrics.calcHeight(SEQ.main.getFontFontAwesome(), b.iconUnicode, SEQ.main.getFontIconSize());
                    f = e + g + h
                } else f = c + d - g - SEQ.metrics.data.baseSpaceMetric / 2;
                a.save(), a.font = SEQ.main.getFontFontAwesome5Regular();
                var i = SEQ.metrics.calcWidth(b.iconUnicode, SEQ.main.getFontFontAwesome5Regular());
                b.styling.fillColor && (a.fillStyle = b.styling.fillColor), a.fillText(b.iconUnicode, b.posX - i / 2, f), a.restore()
            },
            width: function(a) {
                return SEQ.metrics.calcWidth(a, SEQ.main.getFontFontAwesome5Regular())
            },
            height: function(a) {
                return SEQ.metrics.calcHeight(SEQ.main.getFontFontAwesome5Regular(), a, SEQ.main.getFontIconSize())
            }
        },
        fontawesome5solid: {
            paint: function(a, b, c, d, e) {
                var f, g = b.longNameTextData ? b.longNameTextData.height : SEQ.metrics.data.textLineHeight + SEQ.metrics.data.textTopBottomPadding;
                if (e) {
                    var h = SEQ.metrics.calcHeight(SEQ.main.getFontFontAwesome(), b.iconUnicode, SEQ.main.getFontIconSize());
                    f = e + g + h
                } else f = c + d - g - SEQ.metrics.data.baseSpaceMetric / 2;
                a.save(), a.font = SEQ.main.getFontFontAwesome5Solid();
                var i = SEQ.metrics.calcWidth(b.iconUnicode, SEQ.main.getFontFontAwesome5Solid());
                b.styling.fillColor && (a.fillStyle = b.styling.fillColor), a.fillText(b.iconUnicode, b.posX - i / 2, f), a.restore()
            },
            width: function(a) {
                return SEQ.metrics.calcWidth(a, SEQ.main.getFontFontAwesome5Solid())
            },
            height: function(a) {
                return SEQ.metrics.calcHeight(SEQ.main.getFontFontAwesome5Solid(), a, SEQ.main.getFontIconSize())
            }
        },
        actor: {
            paint: function(a, d, e, f, g) {
                var h, i = d.longNameTextData ? d.longNameTextData.height : SEQ.metrics.data.textLineHeight + SEQ.metrics.data.textTopBottomPadding,
                    j = SEQ.metrics.data.baseSpaceMetric,
                    k = 3.5 * j,
                    l = .57 * j,
                    m = 1.22 * j,
                    n = .72 * j,
                    o = .44 * j + 2 * l;
                h = g ? g + i + k + SEQ.metrics.data.participantTypeLineWeight / 2 : e + f - i, a.save(), a.beginPath(), a.arc(d.posX, h - k + l, l, 0, 2 * Math.PI), a.moveTo(d.posX, h - k + 2 * l), a.lineTo(d.posX, h - k + 2 * l + m), a.moveTo(d.posX - n, h - k + o), a.lineTo(d.posX + n, h - k + o), a.moveTo(d.posX, h - k + 2 * l + m), a.lineTo(d.posX - n, h), a.moveTo(d.posX, h - k + 2 * l + m), a.lineTo(d.posX + n, h), b(d, a), c(d, a), a.restore()
            },
            width: function() {
                return .72 * SEQ.metrics.data.baseSpaceMetric * 2
            },
            height: function() {
                return 3.5 * SEQ.metrics.data.baseSpaceMetric + SEQ.metrics.data.participantTypeLineWeight / 2
            }
        },
        boundary: {
            paint: function(a, e, f, g, h) {
                var i, j = e.styling.lineWeight ? SEQ.main.getLineWeightParticipantType(e.styling.lineWeight) : SEQ.metrics.data.participantTypeLineWeight,
                    k = e.longNameTextData ? e.longNameTextData.height : SEQ.metrics.data.textLineHeight + SEQ.metrics.data.textTopBottomPadding,
                    l = d();
                i = h ? h + k + l / 2 + SEQ.metrics.data.participantTypeLineWeight / 2 + SEQ.metrics.data.participantTypeLineWeight / 2 : g + f - k - l / 2 - SEQ.metrics.data.participantTypeLineWeight / 2;
                var m = l / 2,
                    n = SEQ.metrics.data.baseSpaceMetric / 2;
                a.save(), a.beginPath(), a.arc(e.posX + n, i, m, 0, 2 * Math.PI), a.moveTo(e.posX - m - n + j / 2, i - m - j / 2), a.lineTo(e.posX - m - n + j / 2, i + m + j / 2), a.moveTo(e.posX - m - n, i), a.lineTo(e.posX - m + n, i), b(e, a), c(e, a), a.restore()
            },
            width: function() {
                return d() + SEQ.metrics.data.baseSpaceMetric / 2 + SEQ.metrics.data.participantTypeLineWeight
            },
            height: function() {
                return d() + SEQ.metrics.data.participantTypeLineWeight
            }
        },
        control: {
            paint: function(a, e, f, g, h) {
                var i, j = e.longNameTextData ? e.longNameTextData.height : SEQ.metrics.data.textLineHeight + SEQ.metrics.data.textTopBottomPadding,
                    k = d(),
                    l = k / 2,
                    m = .6 * SEQ.metrics.data.baseSpaceMetric,
                    n = SEQ.metrics.data.baseSpaceMetric / 2,
                    o = e.posX - .2 * SEQ.metrics.data.baseSpaceMetric;
                i = h ? h + j + k / 2 + SEQ.metrics.data.participantTypeLineWeight / 2 + n : g + f - j - k / 2 - SEQ.metrics.data.participantTypeLineWeight / 2, a.save(), a.beginPath(), a.arc(e.posX, i, l, 0, 2 * Math.PI), a.moveTo(o, i - l), a.lineTo(o + m, i - l - n), a.moveTo(o, i - l), a.lineTo(o + m, i - l + n), b(e, a), c(e, a), a.restore()
            },
            width: function() {
                return d() + SEQ.metrics.data.participantTypeLineWeight
            },
            height: function() {
                return d() + SEQ.metrics.data.participantTypeLineWeight + SEQ.metrics.data.baseSpaceMetric / 2
            }
        },
        entity: {
            paint: function(a, e, f, g, h) {
                var i, j = e.styling.lineWeight ? SEQ.main.getLineWeightParticipantType(e.styling.lineWeight) : SEQ.metrics.data.participantTypeLineWeight,
                    k = e.longNameTextData ? e.longNameTextData.height : SEQ.metrics.data.textLineHeight + SEQ.metrics.data.textTopBottomPadding,
                    l = d();
                i = h ? h + k + l / 2 + SEQ.metrics.data.participantTypeLineWeight / 2 + SEQ.metrics.data.participantTypeLineWeight : g + f - k - l / 2 - SEQ.metrics.data.participantTypeLineWeight / 2;
                var m = l / 2;
                a.save(), a.beginPath(), a.arc(e.posX, i - .8 * j, m, 0, 2 * Math.PI), a.moveTo(e.posX - m - j / 2, i + m), a.lineTo(e.posX + m + j / 2, i + m), b(e, a), c(e, a), a.restore()
            },
            width: function() {
                return d() + SEQ.metrics.data.participantTypeLineWeight
            },
            height: function() {
                return d() + 1.8 * SEQ.metrics.data.participantTypeLineWeight
            }
        },
        database: {
            paint: function(d, e, f, g, h) {
                var i, j = e.longNameTextData ? e.longNameTextData.height : SEQ.metrics.data.textLineHeight + SEQ.metrics.data.textTopBottomPadding,
                    k = SEQ.metrics.data.baseSpaceMetric,
                    l = 3.42 * k,
                    m = .66 * k,
                    n = 2.92 * k,
                    o = 1.46 * k;
                i = h ? h + j + l + SEQ.metrics.data.participantTypeLineWeight : f + g - j;
                var p = .073 * k;
                d.save(), d.beginPath(), d.moveTo(e.posX - n / 2, i - m), d.lineTo(e.posX - n / 2, i - l + m), d.lineTo(e.posX + n / 2, i - l + m), d.lineTo(e.posX + n / 2, i - m), b(e, d), c(e, d), d.beginPath(), a(d, e.posX, i - l + m - p, o, m, 0, 0, 2 * Math.PI), a(d, e.posX, i - m - p, o, m, 0, 0, Math.PI), b(e, d), c(e, d), d.restore()
            },
            width: function() {
                return 4 * SEQ.metrics.data.baseSpaceMetric
            },
            height: function() {
                return 3.42 * SEQ.metrics.data.baseSpaceMetric + SEQ.metrics.data.participantTypeLineWeight
            }
        }
    }
}();
var SEQ = SEQ || {};
SEQ.googleDrive = function() {
    function a() {
        gapi.load("auth2", function() {
            gapi.auth2.init({
                client_id: p,
                scope: q
            }).then(function() {
                var a = SEQ.main.getUrlVars(),
                    b = a.googleDriveAction;
                if (b)
                    if ("open" === b) {
                        var c = a.googleDriveFileId;
                        e(c)
                    } else "create" === b && (v = a.googleDriveFolderId, document.getElementById("activeFileStorageStatus").innerHTML = SEQ.saveAndOpen.StorageProvider.GOOGLE_DRIVE)
            }, function(a) {
                console.log(a)
            })
        }), gapi.load("picker", function() {})
    }

    function b() {
        SEQ.menu.displayNotification("Connecting to Google Drive", !0), m(c)
    }

    function c(a) {
        const b = new google.picker.DocsView(google.picker.ViewId.DOCUMENTS).setIncludeFolders(!0).setSelectFolderEnabled(!1),
            c = new google.picker.DocsView(google.picker.ViewId.DOCUMENTS).setIncludeFolders(!0).setSelectFolderEnabled(!1).setEnableTeamDrives(!0);
        var e = (new google.picker.PickerBuilder).enableFeature(google.picker.Feature.SUPPORT_TEAM_DRIVES).addView(b).addView(c).setOAuthToken(a).setDeveloperKey(r).setCallback(d).setOrigin(window.location.protocol + "//" + window.location.host).build();
        e.setVisible(!0)
    }

    function d(a) {
        a.action == google.picker.Action.PICKED ? (SEQ.menu.displayNotification("Connecting to Google Drive", !0), m(function(b) {
            SEQ.menu.displayNotification("Loading file", !0);
            var c = {
                    method: "GET",
                    headers: new Headers({
                        Authorization: "Bearer " + b
                    })
                },
                d = a.docs[0].name,
                e = s + "/" + a.docs[0].id + "?alt=media&supportsTeamDrives=true";
            fetch(e, c).then(function(b) {
                b.ok ? b.text().then(function(b) {
                    var c = d.replace(".txt", ""),
                        e = t + "/" + a.docs[0].id + "?supportsTeamDrives=true";
                    SEQ.menu.clearNotification(), SEQ.saveAndOpen.newActiveFile(c, SEQ.saveAndOpen.StorageProvider.GOOGLE_DRIVE, e, b)
                }) : (404 === b.status ? SEQ.menu.displayNotification("No permission to open file " + d + ", only files you created with the tool may be opened") : SEQ.menu.displayNotification("Failed to open (" + b.status + ") " + d), console.log(b))
            })
        })) : SEQ.menu.clearNotification()
    }

    function e(a) {
        SEQ.menu.displayNotification("Connecting to Google Drive", !0);
        var b = s + "/" + a + "?supportsTeamDrives=true";
        m(function(c) {
            SEQ.menu.displayNotification("Loading file", !0);
            var d = {
                method: "GET",
                headers: new Headers({
                    Authorization: "Bearer " + c
                })
            };
            fetch(b, d).then(function(b) {
                b.ok ? b.text().then(function(b) {
                    var c = JSON.parse(b),
                        e = c.name.replace(".txt", ""),
                        f = s + "/" + a + "?alt=media&supportsTeamDrives=true";
                    fetch(f, d).then(function(b) {
                        b.ok ? b.text().then(function(b) {
                            var c = t + "/" + a + "?supportsTeamDrives=true";
                            SEQ.menu.clearNotification(), SEQ.saveAndOpen.newActiveFile(e, SEQ.saveAndOpen.StorageProvider.GOOGLE_DRIVE, c, b)
                        }) : (404 === b.status ? SEQ.menu.displayNotification("No permission to open file " + e + ", only files you created with the tool may be opened") : SEQ.menu.displayNotification("Failed to open (" + b.status + ") " + e), console.log(b))
                    })
                }) : (404 === b.status ? SEQ.menu.displayNotification("No permission to open file " + a + ", only files you created with the tool may be opened") : SEQ.menu.displayNotification("Failed to open (" + b.status + ") " + a), console.log(b))
            })
        })
    }

    function f(a) {
        SEQ.menu.displayNotification("Connecting to Google Drive", !0), u = a, m(g)
    }

    function g(a) {
        const b = new google.picker.DocsView(google.picker.ViewId.FOLDERS).setIncludeFolders(!0).setSelectFolderEnabled(!0),
            c = new google.picker.DocsView(google.picker.ViewId.FOLDERS).setIncludeFolders(!0).setSelectFolderEnabled(!0).setEnableTeamDrives(!0);
        var d = (new google.picker.PickerBuilder).enableFeature(google.picker.Feature.SUPPORT_TEAM_DRIVES).addView(b).addView(c).setTitle('Select a folder (or Cancel and click "Save in Root Folder" button instead)').setOAuthToken(a).setDeveloperKey(r).setCallback(h).setOrigin(window.location.protocol + "//" + window.location.host).build();
        d.setVisible(!0)
    }

    function h(a) {
        a.action == google.picker.Action.PICKED ? (m(j, u, a.docs[0].id), u = null) : SEQ.menu.clearNotification()
    }

    function i(a) {
        o(), SEQ.menu.displayNotification("Connecting to Google Drive", !0), m(j, a)
    }

    function j(a, b, c) {
        SEQ.menu.clearNotification(), SEQ.saveAndOpen.displaySaving(b, SEQ.saveAndOpen.StorageProvider.GOOGLE_DRIVE);
        var d = [];
        c && d.push(c);
        var e = {
            method: "POST",
            headers: new Headers({
                Authorization: "Bearer " + a,
                "Content-Type": "application/json; charset=UTF-8",
                "X-Upload-Content-Type": "text/plain"
            }),
            body: JSON.stringify({
                name: b + ".txt",
                mimeType: "text/plain",
                parents: d
            })
        };
        fetch(t + "?uploadType=resumable&supportsTeamDrives=true", e).then(function(b) {
            if (b.ok) {
                var c = b.headers.get("Location"),
                    d = SEQ.main.getSourceValue(),
                    e = {
                        method: "PUT",
                        headers: new Headers({
                            Authorization: "Bearer " + a,
                            "Content-Type": "plain/text",
                            "Content-Length": d.length
                        }),
                        body: d
                    };
                fetch(c, e).then(function(a) {
                    a.ok ? a.json().then(function(a) {
                        var b = a.name.replace(".txt", ""),
                            c = t + "/" + a.id + "?supportsTeamDrives=true";
                        SEQ.saveAndOpen.newActiveFile(b, SEQ.saveAndOpen.StorageProvider.GOOGLE_DRIVE, c)
                    }) : (SEQ.saveAndOpen.displaySavingFailed(a.status + " " + a.statusText), console.log(a))
                })
            } else SEQ.saveAndOpen.displaySavingFailed(b.status + " " + b.statusText), console.log(b)
        })
    }

    function k(a) {
        SEQ.menu.displayNotification("Connecting to Google Drive", !0), m(j, a, v), o()
    }

    function l(a) {
        function b(b) {
            var d = {
                method: "PATCH",
                body: c,
                headers: new Headers({
                    Authorization: "Bearer " + b,
                    "Content-Type": "text/plain"
                })
            };
            fetch(a.resourceUrl, d).then(function(a) {
                a.ok ? SEQ.saveAndOpen.displaySaved() : (SEQ.saveAndOpen.displaySavingFailed(a.status + " " + a.statusText), console.log(a))
            })
        }
        SEQ.saveAndOpen.displaySaving(a.diagramName, SEQ.saveAndOpen.StorageProvider.GOOGLE_DRIVE);
        var c = SEQ.main.getSourceValue();
        m(b)
    }

    function m(a, b, c) {
        function d() {
            var a = gapi.auth2.getAuthInstance().currentUser.get();
            return a.getAuthResponse(!0).access_token
        }
        var e = gapi.auth2.getAuthInstance();
        if (e.isSignedIn.get()) {
            var f = d();
            a(f, b, c)
        } else e.signIn().then(function() {
            var e = d();
            a(e, b, c)
        }, function(a) {
            SEQ.menu.displayNotification(a.error), console.log(a)
        })
    }

    function n() {
        return !!v
    }

    function o() {
        v = null
    }
    const p = "128530462773-5utfp5o2q8tt52ctbod1snqs8l509rkg.apps.googleusercontent.com",
        q = "https://www.googleapis.com/auth/drive.file",
        r = "AIzaSyCQ7DbuqBVp2WoBgS4AX64N2g5PbtYUSjc",
        s = "https://www.googleapis.com/drive/v3/files",
        t = "https://www.googleapis.com/upload/drive/v3/files";
    var u = null,
        v = null;
    return {
        init: a,
        open: b,
        saveInRoot: i,
        saveAs: f,
        saveDirectly: l,
        saveDirectlyInPreSelectedFolder: k,
        preSelectedFolder: n,
        clearPreSelectedFolder: o
    }
}();
var SEQ = SEQ || {};
SEQ.oneDrive = function() {
    function a() {
        SEQ.menu.displayNotification("Connecting to OneDrive", !0), l.getUser() ? d(f) : l.loginPopup(k).then(function() {
            d(f)
        }, function(a) {
            SEQ.menu.displayNotification(a), console.log(a)
        })
    }

    function b(a) {
        SEQ.menu.displayNotification("Connecting to OneDrive", !0), l.getUser() ? d(c, a) : l.loginPopup(k).then(function() {
            d(c, a)
        }, function(a) {
            SEQ.menu.displayNotification(a), console.log(a)
        })
    }

    function c(a, b) {
        var c = l.getUser().idToken,
            d = {
                clientId: i,
                action: "save",
                accountSwitchEnabled: !1,
                sourceUri: "data:text/plain;base64," + btoa(SEQ.main.getSourceValue()),
                fileName: b + ".txt",
                advanced: {
                    accessToken: a,
                    loginHint: c.preferred_username,
                    isConsumerAccount: c.iss.indexOf(j) > -1
                },
                success: function(a) {
                    var c = e(a);
                    SEQ.saveAndOpen.newActiveFile(b, SEQ.saveAndOpen.StorageProvider.ONE_DRIVE, c)
                },
                cancel: function() {
                    SEQ.menu.displayNotification("Cancelled")
                },
                error: function(a) {
                    SEQ.saveAndOpen.displaySavingFailed(a), console.log(a)
                }
            };
        OneDrive.save(d), SEQ.menu.clearNotification()
    }

    function d(a, b) {
        l.acquireTokenSilent(k).then(function(c) {
            a(c, b)
        }, function(c) {
            console.log("AcquireTokenSilent Failure, trying interactive", c), l.acquireTokenPopup(k).then(function(c) {
                a(c, b)
            }, function(a) {
                SEQ.menu.displayNotification(a), console.log(a)
            })
        })
    }

    function e(a) {
        return a.apiEndpoint + "/me/drive/items/" + a.value[0].id + "/content"
    }

    function f(a) {
        var b = l.getUser().idToken,
            c = {
                clientId: i,
                action: "query",
                accountSwitchEnabled: !1,
                advanced: {
                    accessToken: a,
                    loginHint: b.preferred_username,
                    isConsumerAccount: b.iss.indexOf(j) > -1,
                    filter: ".txt"
                },
                success: function(b) {
                    SEQ.menu.displayNotification("Loading file", !0);
                    var c = {
                            method: "GET",
                            headers: new Headers({
                                Authorization: "Bearer " + a
                            })
                        },
                        d = e(b);
                    fetch(d, c).then(function(a) {
                        a.ok ? a.text().then(function(b) {
                            SEQ.menu.clearNotification();
                            var c = a.url.split("/"),
                                e = c[c.length - 1],
                                f = e.replace(".txt", "");
                            SEQ.menu.clearNotification(), SEQ.saveAndOpen.newActiveFile(f, SEQ.saveAndOpen.StorageProvider.ONE_DRIVE, d, b)
                        }) : (SEQ.menu.displayNotification("Failed to load selected file: " + a.status + " " + a.statusText, !0), console.log(a))
                    })
                },
                cancel: function() {
                    SEQ.menu.displayNotification("Cancelled")
                },
                error: function(a) {
                    SEQ.menu.displayNotification(a), console.log(a)
                }
            };
        OneDrive.open(c), SEQ.menu.clearNotification()
    }

    function g(a) {
        function b(b) {
            var d = {
                method: "PUT",
                body: c,
                headers: new Headers({
                    Authorization: "Bearer " + b,
                    "Content-Type": "text/plain"
                })
            };
            fetch(a.resourceUrl, d).then(function(a) {
                a.ok ? SEQ.saveAndOpen.displaySaved() : (SEQ.saveAndOpen.displaySavingFailed(a.status + " " + a.statusText), console.log(a))
            })
        }
        SEQ.saveAndOpen.displaySaving(a.diagramName, SEQ.saveAndOpen.StorageProvider.ONE_DRIVE);
        var c = SEQ.main.getSourceValue();
        d(b)
    }

    function h() {
        l = new Msal.UserAgentApplication(i, null, null)
    }
    const i = "57e1591f-d474-4b1b-90ca-53897268b441",
        j = "9188040d-6c67-4c5b-b112-36a304b66dad",
        k = ["User.Read", "Files.ReadWrite.All"];
    var l;
    return {
        init: h,
        open: a,
        saveAs: b,
        saveDirectly: g
    }
}();
var SEQ = SEQ || {};
SEQ.webStorage = function() {
    function a() {
        var a = localStorage.getItem(o);
        if (!a) {
            for (var b = [], c = 0; c < localStorage.length; c++) {
                var d = localStorage.key(c);
                d.indexOf("SEQUENCE_DIAGRAM_ORG_INTERNAL") === -1 && d.indexOf("USER_SETTINGS") === -1 && d.indexOf("odpicker") === -1 && b.push({
                    name: d.replace(".txt", ""),
                    modified: "Unknown",
                    source: localStorage.getItem(d)
                })
            }
            localStorage.setItem(o, JSON.stringify(b))
        }
    }

    function b() {
        c(), document.getElementById("cover").style.display = "block", document.getElementById("webStoragePopup").style.display = "block"
    }

    function c() {
        for (var a = document.getElementById("webStorageDiagramTableTBody"); a.firstChild;) a.removeChild(a.firstChild);
        var b = g();
        b.length && b.forEach(function(b) {
            var c = document.createElement("tr"),
                d = document.createElement("td");
            d.className = "webStorageCheckbox", d.innerHTML = "☐", d["data-diagram-name"] = b.name, c.appendChild(d), c.onclick = function() {
                "☐" == d.innerHTML ? d.innerHTML = "☑" : d.innerHTML = "☐", k()
            }, c.addEventListener("dblclick", function() {
                var a = i(b.name);
                SEQ.saveAndOpen.newActiveFile(b.name, SEQ.saveAndOpen.StorageProvider.WEB_STORAGE, null, a.source), SEQ.main.closePopups()
            });
            var e = document.createElement("td");
            e.innerHTML = b.name, c.appendChild(e);
            var f = document.createElement("td");
            f.innerHTML = b.modified, c.appendChild(f);
            var g = document.createElement("td");
            g.innerHTML = b.source.length + " bytes", c.appendChild(g), a.appendChild(c)
        }), k()
    }

    function d(a) {
        f(a), SEQ.saveAndOpen.newActiveFile(a, SEQ.saveAndOpen.StorageProvider.WEB_STORAGE)
    }

    function e(a) {
        f(a.diagramName), SEQ.saveAndOpen.displaySaved()
    }

    function f(a) {
        SEQ.saveAndOpen.displaySaving(a, SEQ.saveAndOpen.StorageProvider.WEB_STORAGE);
        var b = SEQ.main.getSourceValue(),
            c = new Date,
            d = c.toLocaleDateString() + " " + c.toLocaleTimeString(),
            e = g(),
            f = null;
        e.forEach(function(b) {
            b.name == a && (f = b)
        }), f ? (f.source = b, f.modified = d) : e.unshift({
            name: a,
            modified: d,
            source: b
        }), h(e)
    }

    function g() {
        var a = localStorage.getItem(o);
        return JSON.parse(a)
    }

    function h(a) {
        localStorage.setItem(o, JSON.stringify(a))
    }

    function i(a) {
        var b = g(),
            c = null;
        return b.forEach(function(b) {
            b.name == a && (c = b)
        }), c
    }

    function j() {
        for (var a = [], b = document.getElementById("webStorageDiagramTable"), c = b.getElementsByClassName("webStorageCheckbox"), d = 0; d < c.length; d++) "☑" == c[d].innerHTML && a.push(c[d]["data-diagram-name"]);
        return a
    }

    function k() {
        var a = j().length;
        document.getElementById("webStorageOpen").disabled = 1 != a, document.getElementById("webStorageDelete").disabled = a <= 0
    }

    function l(a) {
        var b = document.getElementById("webStorageDiagramTable"),
            c = b.getElementsByClassName("webStorageCheckbox");
        "☐" == a.innerHTML ? a.innerHTML = "☑" : a.innerHTML = "☐";
        for (var d = 0; d < c.length; d++) {
            var e = c[d];
            e.innerHTML = a.innerHTML
        }
        k()
    }

    function m() {
        var a = j()[0],
            b = i(a);
        SEQ.saveAndOpen.newActiveFile(b.name, SEQ.saveAndOpen.StorageProvider.WEB_STORAGE, null, b.source), SEQ.main.closePopups()
    }

    function n() {
        var a, b = j();
        a = 1 == b.length ? "Are you sure you want to delete " + b[0] + "?" : "Are you sure you want to delete " + b.length + " diagrams?";
        var d = confirm(a);
        if (d) {
            var e = g(),
                f = [];
            e.forEach(function(a) {
                b.indexOf(a.name) > -1 || f.push(a)
            }), h(f), c()
        }
    }
    const o = "SAVED_DIAGRAMS";
    return {
        init: a,
        open: b,
        saveAs: d,
        saveDirectly: e,
        toggleWebStorageSelection: l,
        openSelected: m,
        deleteSelected: n
    }
}();
var SEQ = SEQ || {};
SEQ.localDisk = function() {
    function a(a) {
        var b = a.files;
        if (window.File && window.FileReader && window.FileList && window.Blob) {
            var c = b[0],
                d = b[0].name.replace(".txt", ""),
                e = new FileReader;
            e.onload = function(b) {
                a.form.reset(), SEQ.saveAndOpen.newActiveFile(d, SEQ.saveAndOpen.StorageProvider.LOCAL_DISK, null, b.target.result)
            }, e.readAsText(c)
        } else SEQ.menu.displayNotification("The JavaScript file APIs are not fully supported in this browser.")
    }

    function b(a) {
        d(a), SEQ.saveAndOpen.newActiveFile(a, SEQ.saveAndOpen.StorageProvider.LOCAL_DISK, "resourceUrl")
    }

    function c(a) {
        d(a.diagramName), SEQ.saveAndOpen.displaySaved()
    }

    function d(a) {
        var b = a + ".txt",
            c = SEQ.main.getSourceValue();
        navigator.appVersion.indexOf("Win") != -1 && (c = c.replace(/\n/g, "\r\n"));
        var d = new Blob([c], {
            type: "text/plain"
        });
        if (navigator.msSaveBlob) navigator.msSaveBlob(d, b);
        else {
            var e = document.createElement("a");
            e.download = b, e.innerHTML = "download source", e.onclick = function(a) {
                document.body.removeChild(a.target)
            };
            var f = window.URL || window.webkitURL;
            e.href = f.createObjectURL(d), e.style.display = "none", document.body.appendChild(e), e.click()
        }
    }
    return {
        open: a,
        saveAs: b,
        saveDirectly: c
    }
}();
var SEQ = SEQ || {};
SEQ.saveAndOpen = function() {
    function a() {
        window.addEventListener("beforeunload", function(a) {
            c() && (a.preventDefault(), a.returnValue = "")
        }), L = setInterval(function() {
            SEQ.menu.readAutosave() && c() && z(!0)
        }, 6e5), document.addEventListener("mousedown", function(a) {
            var c = document.getElementById("activeFileNameChange");
            "activeFileNameChange" != a.target.id && "none" != c.style.display && b()
        }), document.getElementById("activeFileNameChange").addEventListener("keydown", function(a) {
            13 == a.keyCode && b()
        })
    }

    function b() {
        var a = document.getElementById("activeFileNameChange");
        a.value != M.diagramName && e(a.value), J()
    }

    function c() {
        return SEQ.menu.readAlertForUnsavedChanges() && (M.hash && M.hash != B(SEQ.main.getSourceValue()) || !M.hash && "865703748" != B(SEQ.main.getSourceValue())) && !SEQ.main.currentDataIsSameAsInitialDataInUrl()
    }

    function d() {
        var a = !0;
        c() && (a = confirm("Create new diagram without saving changes?")), a ? (SEQ.googleDrive.clearPreSelectedFolder(), M = {}, SEQ.main.updateSource(SEQ.main.getDefaultData()), SEQ.main.parse(), document.title = "SequenceDiagram.org", document.getElementById("activeFileNameStatus").innerHTML = "Untitled", document.getElementById("activeFileStorageStatus").innerHTML = "Not saved", SEQ.menu.displayNotification("New diagram created")) : SEQ.menu.displayNotification("Cancelled by user")
    }

    function e(a) {
        M = {
            diagramName: a
        }, document.title = M.diagramName + " - SequenceDiagram.org", document.getElementById("activeFileNameStatus").innerHTML = M.diagramName, document.getElementById("activeFileStorageStatus").innerHTML = "Not saved"
    }

    function f() {
        if (SEQ.menu.readSynchronizeFilenameWithTitle()) {
            var a = g();
            M.diagramName != a && e(a)
        }
    }

    function g() {
        var a = "Untitled";
        return SEQ.parser.diagram.title ? a = SEQ.parser.diagram.title.title : SEQ.parser.diagram.frame && (a = SEQ.parser.diagram.frame.text), a.replace(/[\/\\?%*:|"<>,()&;#{}\[\]\^~`@=]/g, "")
    }

    function h() {
        return M.diagramName ? M.diagramName : "Untitled"
    }

    function i() {
        var a = document.getElementById("fileNameExport").value;
        return a ? a : h()
    }

    function j() {
        F();
        var a = i() + ".png",
            b = SEQ.main.getDiagramCanvas();
        if (b.msToBlob) {
            var c = b.msToBlob();
            window.navigator.msSaveBlob(c, a)
        } else {
            var d = document.getElementById("exportButtonPngLink"),
                e = b.toDataURL("image/png");
            d.download = a, d.href = e
        }
    }

    function k() {
        var a = SEQ.main.getDiagramCanvas(),
            b = new C2S(a.width, a.height);
        SEQ.main.setCanvasToSvgContext(b), SEQ.parser.parse();
        var c = b.getSerializedSvg(),
            d = "data:image/svg+xml;charset=utf-8," + encodeURIComponent(c);
        return SEQ.main.setCanvasToSvgContext(null), SEQ.parser.parse(), d
    }

    function l() {
        F();
        var a = i() + ".svg",
            b = k();
        if (SEQ.main.getDiagramCanvas().msToBlob) SEQ.menu.displayNotification("Please use Chrome or Firefox for svg export");
        else {
            var c = document.createElement("a");
            c.onclick = function(a) {
                document.body.removeChild(a.target)
            }, c.href = b, c.download = a, c.style.display = "none", document.body.appendChild(c), c.click()
        }
    }

    function m(a) {
        var b = document.getElementById("openSourceMenu");
        if ("block" == b.style.display) b.style.display = "none";
        else {
            F();
            var c = a.getBoundingClientRect();
            b.style.top = c.top + "px", b.style.left = c.right + "px", b.style.display = "block"
        }
    }

    function n(a) {
        var b = document.getElementById("saveSourceMenu");
        if ("block" == b.style.display) b.style.display = "none";
        else {
            F();
            var c = a.getBoundingClientRect();
            b.style.top = c.top + "px", b.style.left = c.right + "px", b.style.display = "block", document.getElementById("fileName").value = h()
        }
    }

    function o(a) {
        var b = document.getElementById("exportDiagramMenu");
        if ("block" == b.style.display) b.style.display = "none";
        else {
            F();
            var c = a.getBoundingClientRect();
            b.style.top = c.top + "px", b.style.left = c.right + "px", b.style.display = "block", document.getElementById("fileNameExport").value = h()
        }
    }

    function p() {
        var a = SEQ.menu.readDefaultStorageLocation();
        K.GOOGLE_DRIVE == a || K.GOOGLE_DRIVE_ROOT_FOLDER == a ? s() : K.ONE_DRIVE == a ? q() : K.LOCAL_DISK == a ? (document.getElementById("openButtonLocalDisk").focus(), document.getElementById("openButtonLocalDisk").click()) : K.WEB_STORAGE == a && v()
    }

    function q() {
        F(), SEQ.oneDrive.open()
    }

    function r() {
        F(), K.ONE_DRIVE == M.storageProvider ? SEQ.oneDrive.saveDirectly(M) : SEQ.oneDrive.saveAs(h())
    }

    function s() {
        F(), SEQ.googleDrive.open()
    }

    function t() {
        F(), K.GOOGLE_DRIVE == M.storageProvider ? SEQ.googleDrive.saveDirectly(M) : SEQ.googleDrive.saveInRoot(h())
    }

    function u() {
        F(), SEQ.googleDrive.preSelectedFolder() ? SEQ.googleDrive.saveDirectlyInPreSelectedFolder(h()) : K.GOOGLE_DRIVE == M.storageProvider ? SEQ.googleDrive.saveDirectly(M) : SEQ.googleDrive.saveAs(h())
    }

    function v() {
        F(), SEQ.webStorage.open()
    }

    function w() {
        F(), K.WEB_STORAGE == M.storageProvider ? SEQ.webStorage.saveDirectly(M) : SEQ.webStorage.saveAs(h())
    }

    function x(a) {
        F(), SEQ.localDisk.open(a)
    }

    function y() {
        F(), K.LOCAL_DISK == M.storageProvider ? SEQ.localDisk.saveDirectly(M) : SEQ.localDisk.saveAs(h())
    }

    function z(a) {
        if (K.ONE_DRIVE == M.storageProvider) SEQ.oneDrive.saveDirectly(M);
        else if (SEQ.googleDrive.preSelectedFolder()) SEQ.googleDrive.saveDirectlyInPreSelectedFolder(h());
        else if (K.GOOGLE_DRIVE == M.storageProvider) SEQ.googleDrive.saveDirectly(M);
        else if (K.WEB_STORAGE == M.storageProvider) SEQ.webStorage.saveDirectly(M);
        else if (K.LOCAL_DISK == M.storageProvider) a || SEQ.localDisk.saveDirectly(M);
        else if (!a) {
            var b = SEQ.menu.readDefaultStorageLocation();
            SEQ.menu.displayNotification("New file default storage: " + b), K.ONE_DRIVE == b ? SEQ.oneDrive.saveAs(h()) : K.GOOGLE_DRIVE == b ? SEQ.googleDrive.saveAs(h()) : K.GOOGLE_DRIVE_ROOT_FOLDER == b ? SEQ.googleDrive.saveInRoot(h()) : K.WEB_STORAGE == b ? SEQ.webStorage.saveAs(h()) : K.LOCAL_DISK == b && SEQ.localDisk.saveAs(h())
        }
    }

    function A(a, b, d, f) {
        var g = !0;
        f && c() && (g = confirm("Open new diagram without saving changes?")), g && (a && e(a), M.storageProvider = b, M.resourceUrl = d, b && (document.getElementById("activeFileStorageStatus").innerHTML = M.storageProvider), f ? (SEQ.main.updateSource(f), SEQ.main.parse()) : d && D(), M.hash = B(SEQ.main.getSourceValue()))
    }

    function B(a) {
        var b, c, d = 0;
        if (0 === a.length) return d;
        for (b = 0; b < a.length; b++) c = a.charCodeAt(b), d = (d << 5) - d + c, d |= 0;
        return d
    }

    function C(a, b) {
        document.getElementById("activeFileNameStatus").innerHTML = a, document.getElementById("activeFileStorageStatus").innerHTML = "Saving to " + b + "..."
    }

    function D() {
        var a = new Date;
        document.getElementById("activeFileStorageStatus").innerHTML = "Saved to " + M.storageProvider + " - " + a.toLocaleDateString() + " " + a.toLocaleTimeString(), M.hash = B(SEQ.main.getSourceValue())
    }

    function E(a) {
        document.getElementById("activeFileStorageStatus").innerHTML = "Saving failed! (" + a + ")"
    }

    function F() {
        for (var a = document.getElementsByClassName("openSaveMenu"), b = 0; b < a.length; b++) a[b].style.display = "none"
    }

    function G(a) {
        for (var b = document.getElementsByClassName("openSaveMenu"), c = 0; c < b.length; c++)
            if (b[c].id == a.id || b[c].contains(a)) return !0
    }

    function H(a) {
        var b = a.target;
        "openButton" == b.id || "saveButton" == b.id || "exportButton" == b.id || G(b) || F()
    }

    function I() {
        var a = document.getElementById("activeFileNameStatus"),
            b = a.innerHTML,
            c = document.getElementById("activeFileNameChange");
        c.value = b, a.style.display = "none", c.style.display = "inline", c.select()
    }

    function J() {
        document.getElementById("activeFileNameChange").style.display = "none", document.getElementById("activeFileNameStatus").style.display = "inline"
    }
    const K = {
        GOOGLE_DRIVE: "Google Drive",
        GOOGLE_DRIVE_ROOT_FOLDER: "Google Drive Root Folder",
        ONE_DRIVE: "OneDrive",
        LOCAL_DISK: "Local Disk",
        WEB_STORAGE: "Web Storage"
    };
    var L, M = {};
    return {
        init: a,
        onDocumentMouseDown: H,
        showOpenDialog: m,
        showSaveDialog: n,
        showExportDialog: o,
        hideAllOpenSaveMenus: F,
        saveDirectly: z,
        savePngHq: j,
        saveSvg: l,
        getActiveDiagramNameOrTitleName: h,
        getDiagramNameForExport: i,
        clearDiagramSaveStateAndSetNewName: e,
        newActiveFile: A,
        displaySaving: C,
        displaySaved: D,
        displaySavingFailed: E,
        StorageProvider: K,
        openButtonOneDrive: q,
        saveButtonOneDrive: r,
        openButtonGoogleDrive: s,
        saveButtonGoogleDrive: u,
        saveInRootButtonGoogleDrive: t,
        openButtonWebStorage: v,
        saveButtonWebStorage: w,
        openButtonLocalDisk: x,
        saveButtonLocalDisk: y,
        showDefaultStorageOpen: p,
        newDiagram: d,
        synchronizeFileNameWithTitleIfEnabled: f,
        showActiveFileNameChange: I,
        cancelActiveFileNameChange: J
    }
}();
var SEQ = SEQ || {};
SEQ.seqDiaHint = function() {
    "use strict";

    function a() {
        b(SEQ.entityNoteBoxOver, e), b(SEQ.entityNoteBoxLeftRight, e), b(SEQ.entityActivation, e), b(SEQ.entityCreateDestroy, e), b(SEQ.entityDivider, f), b(SEQ.entityParticipant, f), b(SEQ.entityParticipantGroup, f), b(SEQ.entityFragment, f), b(SEQ.entityTitle, f), b(SEQ.entityLinear, f), b(SEQ.entityParallel, f), b(SEQ.entityAutoNumber, f), b(SEQ.entityAutoActivation, f), b(SEQ.entityFontFamily, f), b(SEQ.entityFontSize, f), b(SEQ.entitySpace, f), b(SEQ.entityParticipantSpacing, f), b(SEQ.entityEntrySpacing, f), b(SEQ.entityActiveColor, f), b(SEQ.entityLifeLineStyle, f), b(SEQ.entityBottomParticipants, f), b(SEQ.entityFrame, f), b(SEQ.entityMessage, g)
    }

    function b(a, b) {
        if (a.NotePosition) {
            for (var c in a.Type)
                if (a.Type.hasOwnProperty(c))
                    for (var d in a.NotePosition) a.NotePosition.hasOwnProperty(d) && b.push(a.Type[c] + " " + a.NotePosition[d])
        } else
            for (var e in a.Type)
                if (a.Type.hasOwnProperty(e)) {
                    var f = a.Type[e];
                    !b.indexOf(f) > -1 && b.push(f)
                }
    }

    function c(a) {
        for (var b = 0; b < e.length; b++) {
            var c = e[b];
            if (0 === a.replace(/^\s+/, "").lastIndexOf(c + " ")) return {
                participantPart: a.replace(c, "").trim(),
                start: a.indexOf(c) + c.length + 1
            }
        }
        return !1
    }

    function d(a) {
        var b, d = a.getCursor(),
            h = a.getLine(d.line).substring(0, d.ch),
            i = [],
            j = d.ch,
            k = j;
        if (a.getLine(d.line).length > d.ch);
        else if (SEQ.entityMessage.regExpArrow.test(h)) {
            for (; k && ">" !== h.charAt(k - 1) && "-" !== h.charAt(k - 1) && "x" !== h.charAt(k - 1);) k--;
            b = h.slice(k, j).trim(), SEQ.parser.diagram.participants.forEach(function(a) {
                0 === a.name.lastIndexOf(b, 0) && i.push(a.name)
            })
        } else if (SEQ.parser.diagram.participantsByName[h.trim()]) i = g;
        else {
            for (k = 0;
                " " === h.charAt(k);) k++;
            if (b = h.replace(/^\s+/, ""), 0 === b.length) SEQ.parser.diagram.participants.forEach(function(a) {
                i.push(a.name)
            }), e.forEach(function(a) {
                i.push(a + " ")
            }), f.forEach(function(a) {
                i.push(a + " ")
            });
            else if ("#" === b.charAt(0) || ":" === b.charAt(b.length - 1));
            else {
                var l = c(h);
                l ? (k = l.start, SEQ.parser.diagram.participants.forEach(function(a) {
                    0 === a.name.lastIndexOf(l.participantPart, 0) && i.push(a.name)
                })) : (SEQ.parser.diagram.participants.forEach(function(a) {
                    0 === a.name.lastIndexOf(b, 0) && i.push(a.name)
                }), e.forEach(function(a) {
                    0 === a.indexOf(b.trim(), 0) && i.push(a + " ")
                }), f.forEach(function(a) {
                    0 === a.indexOf(b.trim(), 0) && i.push(a + " ")
                }))
            }
        }
        return {
            list: i,
            from: CodeMirror.Pos(d.line, k),
            to: CodeMirror.Pos(d.line, j)
        }
    }
    var e = [],
        f = [],
        g = [];
    return {
        init: function() {
            a(), CodeMirror.registerHelper("hint", "seqdiahint", function(a) {
                return d(a)
            })
        }
    }
}();
var SEQ = SEQ || {};
SEQ.seqDiaMode = function() {
    "use strict";

    function a() {
        var a = function(a) {
                for (var b; !b && a.currentGroup < a.maxGroup;) a.currentGroup++, b = a.seqdiaMatch[a.currentGroup];
                return b ? (a.pos = a.string.indexOf(b, a.pos) + b.length, a.groupMapping[a.currentGroup].style) : void a.skipToEnd()
            },
            b = {};
        b.regExp = SEQ.entityMessage.regExp, b.maxGroup = SEQ.entityMessage.groups.TEXT, b.handlePartOfType = !1, b.groupMapping = {}, b.groupMapping[SEQ.entityMessage.groups.PARTICIPANT_1] = {
            style: c.ACTOR
        }, b.groupMapping[SEQ.entityMessage.groups.TYPE_RIGHT] = {
            style: c.ARROW
        }, b.groupMapping[SEQ.entityMessage.groups.COLOR_HEX_1] = {
            style: c.PARAMETER
        }, b.groupMapping[SEQ.entityMessage.groups.COLOR_NAME_1] = {
            style: c.PARAMETER
        }, b.groupMapping[SEQ.entityMessage.groups.WEIGHT_1] = {
            style: c.PARAMETER
        }, b.groupMapping[SEQ.entityMessage.groups.DELAY_RIGHT] = {
            style: c.PARAMETER
        }, b.groupMapping[SEQ.entityMessage.groups.CREATE_RIGHT] = {
            style: c.PARAMETER
        }, b.groupMapping[SEQ.entityMessage.groups.CREATE_LEFT] = {
            style: c.PARAMETER
        }, b.groupMapping[SEQ.entityMessage.groups.DELAY_LEFT] = {
            style: c.PARAMETER
        }, b.groupMapping[SEQ.entityMessage.groups.TYPE_LEFT] = {
            style: c.ARROW
        }, b.groupMapping[SEQ.entityMessage.groups.COLOR_HEX_2] = {
            style: c.PARAMETER
        }, b.groupMapping[SEQ.entityMessage.groups.COLOR_NAME_2] = {
            style: c.PARAMETER
        }, b.groupMapping[SEQ.entityMessage.groups.WEIGHT_2] = {
            style: c.PARAMETER
        }, b.groupMapping[SEQ.entityMessage.groups.CREATE_DUAL_LEFT] = {
            style: c.PARAMETER
        }, b.groupMapping[SEQ.entityMessage.groups.TYPE_DUAL] = {
            style: c.ARROW
        }, b.groupMapping[SEQ.entityMessage.groups.COLOR_HEX_3] = {
            style: c.PARAMETER
        }, b.groupMapping[SEQ.entityMessage.groups.COLOR_NAME_3] = {
            style: c.PARAMETER
        }, b.groupMapping[SEQ.entityMessage.groups.WEIGHT_3] = {
            style: c.PARAMETER
        }, b.groupMapping[SEQ.entityMessage.groups.CREATE_DUAL_RIGHT] = {
            style: c.PARAMETER
        }, b.groupMapping[SEQ.entityMessage.groups.PARTICIPANT_2] = {
            style: c.ACTOR
        }, b.groupMapping[SEQ.entityMessage.groups.TEXT] = {
            style: c.TEXT
        }, b.groupMapping[SEQ.entityMessage.groups.DELAY_LEFT] = {
            style: c.PARAMETER
        }, b.groupMapping[SEQ.entityMessage.groups.DELAY_RIGHT] = {
            style: c.PARAMETER
        }, b.groupMapping[SEQ.entityMessage.groups.COLOR_NAME_3] = {
            style: c.PARAMETER
        }, b.progressStream = function(a) {
            for (var c; !c && a.currentGroup < a.maxGroup;) a.currentGroup++, c = a.seqdiaMatch[a.currentGroup];
            var d = a.groupMapping[a.currentGroup];
            if (a.ongoingTypeWithAttributesLength) {
                if (a.currentGroup === SEQ.entityMessage.groups.COLOR_HEX_1 || a.currentGroup === SEQ.entityMessage.groups.COLOR_NAME_1 || a.currentGroup === SEQ.entityMessage.groups.COLOR_HEX_2 || a.currentGroup === SEQ.entityMessage.groups.COLOR_NAME_2 || a.currentGroup === SEQ.entityMessage.groups.COLOR_HEX_3 || a.currentGroup === SEQ.entityMessage.groups.COLOR_NAME_3) {
                    var e = c.length;
                    return c.indexOf("#") === -1 && (e += 1), a.pos += e, a.ongoingTypeWithAttributesLength -= e, d.style
                }
                if (a.currentGroup === SEQ.entityMessage.groups.WEIGHT_1 || a.currentGroup === SEQ.entityMessage.groups.WEIGHT_2 || a.currentGroup === SEQ.entityMessage.groups.WEIGHT_3) {
                    var f = c.length + 1;
                    return a.pos += f, a.ongoingTypeWithAttributesLength -= f, d.style
                }
                return a.pos += a.ongoingTypeWithAttributesLength, a.ongoingTypeWithAttributesLength = null, a.currentGroup--, b.groupMapping[SEQ.entityMessage.groups.TYPE_RIGHT].style
            }
            if (c) {
                if (a.currentGroup === SEQ.entityMessage.groups.TYPE_RIGHT || a.currentGroup === SEQ.entityMessage.groups.TYPE_LEFT || a.currentGroup === SEQ.entityMessage.groups.TYPE_DUAL) {
                    var g = c.indexOf("#"),
                        h = c.indexOf(":");
                    return g > -1 ? (a.pos += g, a.ongoingTypeWithAttributesLength = c.length - g) : h > -1 ? (a.pos += h, a.ongoingTypeWithAttributesLength = c.length - h) : a.pos += c.length, d.style
                }
                return a.currentGroup === SEQ.entityMessage.groups.DELAY_RIGHT || a.currentGroup === SEQ.entityMessage.groups.DELAY_LEFT ? (a.pos += c.length + 2, d.style) : a.currentGroup === SEQ.entityMessage.groups.PARTICIPANT_1 ? (a.pos = a.string.indexOf(c, a.pos) + c.length, d.style) : (a.pos += c.length, d.style)
            }
            a.skipToEnd()
        }, d.push(b);
        var e = {};
        e.regExp = SEQ.entityNoteBoxOver.regExp, e.maxGroup = SEQ.entityNoteBoxOver.groups.TEXT, e.groupMapping = {}, e.groupMapping[SEQ.entityNoteBoxOver.groups.TYPE] = {
            style: c.KEYWORD
        }, e.groupMapping[SEQ.entityNoteBoxOver.groups.SIDE] = {
            style: c.KEYWORD
        }, e.groupMapping[SEQ.entityNoteBoxOver.groups.PARTICIPANT_FROM] = {
            style: c.ACTOR
        }, e.groupMapping[SEQ.entityNoteBoxOver.groups.PARTICIPANT_TO] = {
            style: c.ACTOR
        }, e.groupMapping[SEQ.entityNoteBoxOver.groups.COLOR_HEX] = {
            style: c.PARAMETER
        }, e.groupMapping[SEQ.entityNoteBoxOver.groups.COLOR_NAME] = {
            style: c.PARAMETER
        }, e.groupMapping[SEQ.entityNoteBoxOver.groups.TEXT] = {
            style: c.TEXT
        }, e.progressStream = a, d.push(e);
        var f = {};
        f.regExp = SEQ.entityNoteBoxLeftRight.regExp, f.maxGroup = SEQ.entityNoteBoxLeftRight.groups.TEXT, f.groupMapping = {}, f.groupMapping[SEQ.entityNoteBoxLeftRight.groups.TYPE] = {
            style: c.KEYWORD
        }, f.groupMapping[SEQ.entityNoteBoxLeftRight.groups.SIDE] = {
            style: c.KEYWORD
        }, f.groupMapping[SEQ.entityNoteBoxLeftRight.groups.PARTICIPANT_FROM] = {
            style: c.ACTOR
        }, f.groupMapping[SEQ.entityNoteBoxLeftRight.groups.COLOR_HEX] = {
            style: c.PARAMETER
        }, f.groupMapping[SEQ.entityNoteBoxLeftRight.groups.COLOR_NAME] = {
            style: c.PARAMETER
        }, f.groupMapping[SEQ.entityNoteBoxLeftRight.groups.TEXT] = {
            style: c.TEXT
        }, f.progressStream = a, d.push(f);
        var g = {};
        g.regExp = SEQ.entityFragment.regExp, g.maxGroup = SEQ.entityFragment.groups.GROUP_CONDITION_RIGHT_BRACKET, g.groupMapping = {}, g.groupMapping[SEQ.entityFragment.groups.OPERATOR] = {
            style: c.KEYWORD
        }, g.groupMapping[SEQ.entityFragment.groups.COLOR_HEX_FRAGMENT] = {
            style: c.PARAMETER
        }, g.groupMapping[SEQ.entityFragment.groups.COLOR_NAME_FRAGMENT] = {
            style: c.PARAMETER
        }, g.groupMapping[SEQ.entityFragment.groups.COLOR_HEX_LABEL] = {
            style: c.PARAMETER
        }, g.groupMapping[SEQ.entityFragment.groups.COLOR_NAME_LABEL] = {
            style: c.PARAMETER
        }, g.groupMapping[SEQ.entityFragment.groups.TEXT] = {
            style: c.TEXT
        }, g.groupMapping[SEQ.entityFragment.groups.GROUP] = {
            style: c.KEYWORD
        }, g.groupMapping[SEQ.entityFragment.groups.COLOR_HEX_FRAGMENT_GROUP] = {
            style: c.PARAMETER
        }, g.groupMapping[SEQ.entityFragment.groups.COLOR_NAME_FRAGMENT_GROUP] = {
            style: c.PARAMETER
        }, g.groupMapping[SEQ.entityFragment.groups.GROUP_LABEL] = {
            style: c.TEXT
        }, g.groupMapping[SEQ.entityFragment.groups.COLOR_HEX_LABEL_GROUP] = {
            style: c.PARAMETER
        }, g.groupMapping[SEQ.entityFragment.groups.COLOR_NAME_LABEL_GROUP] = {
            style: c.PARAMETER
        }, g.groupMapping[SEQ.entityFragment.groups.GROUP_CONDITION_LEFT_BRACKET] = {
            style: c.KEYWORD
        }, g.groupMapping[SEQ.entityFragment.groups.GROUP_CONDITION] = {
            style: c.TEXT
        }, g.groupMapping[SEQ.entityFragment.groups.GROUP_CONDITION_RIGHT_BRACKET] = {
            style: c.KEYWORD
        }, g.progressStream = a, d.push(g);
        var h = {};
        h.regExp = SEQ.entityActivation.regExp, h.maxGroup = SEQ.entityActivation.groups.COLOR_NAME, h.groupMapping = {}, h.groupMapping[SEQ.entityActivation.groups.TYPE] = {
            style: c.KEYWORD
        }, h.groupMapping[SEQ.entityActivation.groups.PARTICIPANT] = {
            style: c.ACTOR
        }, h.groupMapping[SEQ.entityActivation.groups.COLOR_HEX] = {
            style: c.PARAMETER
        }, h.groupMapping[SEQ.entityActivation.groups.COLOR_NAME] = {
            style: c.PARAMETER
        }, h.progressStream = a, d.push(h);
        var i = {};
        i.regExp = SEQ.entityAutoNumber.regExp, i.maxGroup = SEQ.entityAutoNumber.groups.STATUS, i.groupMapping = {}, i.groupMapping[SEQ.entityAutoNumber.groups.AUTO_NUMBER] = {
            style: c.KEYWORD
        }, i.groupMapping[SEQ.entityAutoNumber.groups.STATUS] = {
            style: c.PARAMETER
        }, i.progressStream = a, d.push(i);
        var j = {};
        j.regExp = SEQ.entityAutoActivation.regExp, j.maxGroup = SEQ.entityAutoActivation.groups.STATUS, j.groupMapping = {}, j.groupMapping[SEQ.entityAutoActivation.groups.AUTO_ACTIVATION] = {
            style: c.KEYWORD
        }, j.groupMapping[SEQ.entityAutoActivation.groups.STATUS] = {
            style: c.PARAMETER
        }, j.progressStream = a, d.push(j);
        var k = {};
        k.regExp = SEQ.entityDivider.regExp, k.maxGroup = SEQ.entityDivider.groups.COLOR_NAME, k.groupMapping = {}, k.groupMapping[SEQ.entityDivider.groups.EQUALS_1] = {
            style: c.KEYWORD
        }, k.groupMapping[SEQ.entityDivider.groups.TEXT] = {
            style: c.TEXT
        }, k.groupMapping[SEQ.entityDivider.groups.EQUALS_2] = {
            style: c.KEYWORD
        }, k.groupMapping[SEQ.entityDivider.groups.COLOR_HEX] = {
            style: c.PARAMETER
        }, k.groupMapping[SEQ.entityDivider.groups.COLOR_NAME] = {
            style: c.PARAMETER
        }, k.progressStream = a, d.push(k);
        var l = {};
        l.regExp = SEQ.entityEntrySpacing.regExp, l.maxGroup = SEQ.entityEntrySpacing.groups.SPACING, l.groupMapping = {}, l.groupMapping[SEQ.entityEntrySpacing.groups.ENTRY_SPACING] = {
            style: c.KEYWORD
        }, l.groupMapping[SEQ.entityEntrySpacing.groups.SPACING] = {
            style: c.PARAMETER
        }, l.progressStream = a, d.push(l);
        var m = {};
        m.regExp = SEQ.entityFontFamily.regExp, m.maxGroup = SEQ.entityFontFamily.groups.NAME, m.groupMapping = {}, m.groupMapping[SEQ.entityFontFamily.groups.FONT_FAMILY] = {
            style: c.KEYWORD
        }, m.groupMapping[SEQ.entityFontFamily.groups.NAME] = {
            style: c.PARAMETER
        }, m.progressStream = a, d.push(m);
        var n = {};
        n.regExp = SEQ.entityFontSize.regExp, n.maxGroup = SEQ.entityFontSize.groups.SIZE, n.groupMapping = {}, n.groupMapping[SEQ.entityFontSize.groups.FONT_SIZE] = {
            style: c.KEYWORD
        }, n.groupMapping[SEQ.entityFontSize.groups.SIZE] = {
            style: c.PARAMETER
        }, n.progressStream = a, d.push(n);
        var o = {};
        o.regExp = SEQ.entityLinear.regExp, o.maxGroup = SEQ.entityLinear.groups.STATUS, o.groupMapping = {}, o.groupMapping[SEQ.entityLinear.groups.LINEAR] = {
            style: c.KEYWORD
        }, o.groupMapping[SEQ.entityLinear.groups.STATUS] = {
            style: c.PARAMETER
        }, o.progressStream = a, d.push(o);
        var p = {};
        p.regExp = SEQ.entityParallel.regExp, p.maxGroup = SEQ.entityParallel.groups.STATUS, p.groupMapping = {}, p.groupMapping[SEQ.entityParallel.groups.PARALLEL] = {
            style: c.KEYWORD
        }, p.groupMapping[SEQ.entityParallel.groups.STATUS] = {
            style: c.PARAMETER
        }, p.progressStream = a, d.push(p);
        var q = {};
        q.regExp = SEQ.entityParticipant.regExp, q.maxGroup = SEQ.entityParticipant.groups.FILL_COLOR_NAME, q.groupMapping = {}, q.groupMapping[SEQ.entityParticipant.groups.TYPE] = {
            style: c.KEYWORD
        }, q.groupMapping[SEQ.entityParticipant.groups.LINE_COLOR_HEX] = {
            style: c.PARAMETER
        }, q.groupMapping[SEQ.entityParticipant.groups.LINE_COLOR_NAME] = {
            style: c.PARAMETER
        }, q.groupMapping[SEQ.entityParticipant.groups.LINE_WEIGHT] = {
            style: c.PARAMETER
        }, q.groupMapping[SEQ.entityParticipant.groups.ICON_FONT_TYPE] = {
            style: c.KEYWORD
        }, q.groupMapping[SEQ.entityParticipant.groups.ICON_UNICODE] = {
            style: c.PARAMETER
        }, q.groupMapping[SEQ.entityParticipant.groups.QUOTE_1] = {
            style: c.KEYWORD
        }, q.groupMapping[SEQ.entityParticipant.groups.LONG_NAME] = {
            style: c.TEXT
        }, q.groupMapping[SEQ.entityParticipant.groups.QUOTE_2] = {
            style: c.KEYWORD
        }, q.groupMapping[SEQ.entityParticipant.groups.AS] = {
            style: c.KEYWORD
        }, q.groupMapping[SEQ.entityParticipant.groups.ALIAS] = {
            style: c.ACTOR
        }, q.groupMapping[SEQ.entityParticipant.groups.FILL_COLOR_HEX] = {
            style: c.PARAMETER
        }, q.groupMapping[SEQ.entityParticipant.groups.FILL_COLOR_NAME] = {
            style: c.PARAMETER
        }, q.progressStream = a, d.push(q);
        var r = {};
        r.regExp = SEQ.entityParticipantSpacing.regExp, r.maxGroup = SEQ.entityParticipantSpacing.groups.SPACING, r.groupMapping = {}, r.groupMapping[SEQ.entityParticipantSpacing.groups.PARTICIPANT_SPACING] = {
            style: c.KEYWORD
        }, r.groupMapping[SEQ.entityParticipantSpacing.groups.SPACING] = {
            style: c.PARAMETER
        }, r.progressStream = a, d.push(r);
        var s = {};
        s.regExp = SEQ.entitySpace.regExp, s.maxGroup = SEQ.entitySpace.groups.VALUE, s.groupMapping = {}, s.groupMapping[SEQ.entitySpace.groups.SPACE] = {
            style: c.KEYWORD
        }, s.groupMapping[SEQ.entitySpace.groups.VALUE] = {
            style: c.PARAMETER
        }, s.progressStream = a, d.push(s);
        var t = {};
        t.regExp = SEQ.entityTitle.regExp, t.maxGroup = SEQ.entityTitle.groups.VALUE, t.groupMapping = {}, t.groupMapping[SEQ.entityTitle.groups.TITLE] = {
            style: c.KEYWORD
        }, t.groupMapping[SEQ.entityTitle.groups.VALUE] = {
            style: c.TEXT
        }, t.progressStream = a, d.push(t);
        var u = {};
        u.regExp = SEQ.parser.regExpComment, u.maxGroup = 1, u.groupMapping = {}, u.groupMapping[1] = {
            style: c.COMMENT
        }, u.progressStream = a, d.push(u);
        var v = {};
        v.regExp = SEQ.entityCreateDestroy.regExp, v.maxGroup = SEQ.entityCreateDestroy.groups.PARTICIPANT, v.groupMapping = {}, v.groupMapping[SEQ.entityCreateDestroy.groups.TYPE] = {
            style: c.KEYWORD
        }, v.groupMapping[SEQ.entityCreateDestroy.groups.PARTICIPANT] = {
            style: c.ACTOR
        }, v.progressStream = a, d.push(v);
        var w = {};
        w.regExp = SEQ.entityActiveColor.regExp, w.maxGroup = SEQ.entityActiveColor.groups.COLOR_HEX, w.groupMapping = {}, w.groupMapping[SEQ.entityActiveColor.groups.ACTIVE_COLOR] = {
            style: c.KEYWORD
        }, w.groupMapping[SEQ.entityActiveColor.groups.PARTICIPANT] = {
            style: c.ACTOR
        }, w.groupMapping[SEQ.entityActiveColor.groups.COLOR_NAME] = {
            style: c.PARAMETER
        }, w.groupMapping[SEQ.entityActiveColor.groups.COLOR_HEX] = {
            style: c.PARAMETER
        }, w.progressStream = a, d.push(w);
        var x = {};
        x.regExp = SEQ.entityLifeLineStyle.regExp, x.maxGroup = SEQ.entityLifeLineStyle.groups.STYLE, x.groupMapping = {}, x.groupMapping[SEQ.entityLifeLineStyle.groups.LIFE_LINE_COLOR] = {
            style: c.KEYWORD
        }, x.groupMapping[SEQ.entityLifeLineStyle.groups.PARTICIPANT] = {
            style: c.ACTOR
        }, x.groupMapping[SEQ.entityLifeLineStyle.groups.COLOR_NAME] = {
            style: c.PARAMETER
        }, x.groupMapping[SEQ.entityLifeLineStyle.groups.COLOR_HEX] = {
            style: c.PARAMETER
        }, x.groupMapping[SEQ.entityLifeLineStyle.groups.WEIGHT] = {
            style: c.PARAMETER
        }, x.groupMapping[SEQ.entityLifeLineStyle.groups.STYLE] = {
            style: c.PARAMETER
        }, x.progressStream = a, d.push(x);
        var y = {};
        y.regExp = SEQ.entityBottomParticipants.regExp, y.maxGroup = SEQ.entityBottomParticipants.groups.BOTTOM_PARTICIPANTS, y.groupMapping = {}, y.groupMapping[SEQ.entityBottomParticipants.groups.BOTTOM_PARTICIPANTS] = {
            style: c.KEYWORD
        }, y.progressStream = a, d.push(y);
        var z = {};
        z.regExp = SEQ.entityParticipantGroup.regExp, z.maxGroup = SEQ.entityParticipantGroup.groups.END, z.groupMapping = {}, z.groupMapping[SEQ.entityParticipantGroup.groups.PARTICIPANT_GROUP] = {
            style: c.KEYWORD
        }, z.groupMapping[SEQ.entityParticipantGroup.groups.COLOR_HEX] = {
            style: c.PARAMETER
        }, z.groupMapping[SEQ.entityParticipantGroup.groups.COLOR_NAME] = {
            style: c.PARAMETER
        }, z.groupMapping[SEQ.entityParticipantGroup.groups.TITLE] = {
            style: c.TEXT
        }, z.groupMapping[SEQ.entityParticipantGroup.groups.END] = {
            style: c.KEYWORD
        }, z.progressStream = a, d.push(z);
        var A = {};
        A.regExp = SEQ.entityFrame.regExp, A.maxGroup = SEQ.entityFrame.groups.TEXT, A.groupMapping = {}, A.groupMapping[SEQ.entityFrame.groups.FRAME] = {
            style: c.KEYWORD
        }, A.groupMapping[SEQ.entityFrame.groups.COLOR_HEX_FRAGMENT] = {
            style: c.PARAMETER
        }, A.groupMapping[SEQ.entityFrame.groups.COLOR_NAME_FRAGMENT] = {
            style: c.PARAMETER
        }, A.groupMapping[SEQ.entityFrame.groups.COLOR_HEX_LABEL] = {
            style: c.PARAMETER
        }, A.groupMapping[SEQ.entityFrame.groups.COLOR_NAME_LABEL] = {
            style: c.PARAMETER
        }, A.groupMapping[SEQ.entityFrame.groups.TEXT] = {
            style: c.TEXT
        }, A.progressStream = a, d.push(A)
    }

    function b(a) {
        if (!a.sol()) return a.progressStream(a);
        for (var b = 0; b < d.length; b++) {
            var c = d[b],
                e = a.match(c.regExp, !1, !1);
            if (e) return a.seqdiaMatch = e, a.currentGroup = 0, a.maxGroup = c.maxGroup, a.groupMapping = c.groupMapping, a.progressStream = c.progressStream, a.progressStream(a)
        }
        a.skipToEnd()
    }
    var c = {
            KEYWORD: "def",
            ACTOR: "tag",
            TEXT: "variable",
            COMMENT: "comment",
            ERROR: "error",
            ARROW: "keyword",
            PARAMETER: "bracket"
        },
        d = [];
    return {
        init: function() {
            a(), CodeMirror.defineMode("seqdiamode", function() {
                return {
                    token: b
                }
            })
        }
    }
}();